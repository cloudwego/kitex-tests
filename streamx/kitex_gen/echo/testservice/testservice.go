// Code generated by Kitex v0.12.1. DO NOT EDIT.

package testservice

import (
	"context"
	"errors"
	echo "github.com/cloudwego/kitex-tests/streamx/kitex_gen/echo"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"PingPong": kitex.NewMethodInfo(
		pingPongHandler,
		newTestServicePingPongArgs,
		newTestServicePingPongResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"Unary": kitex.NewMethodInfo(
		unaryHandler,
		newTestServiceUnaryArgs,
		newTestServiceUnaryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"EchoBidi": kitex.NewMethodInfo(
		echoBidiHandler,
		newTestServiceEchoBidiArgs,
		newTestServiceEchoBidiResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingBidirectional),
	),
	"EchoClient": kitex.NewMethodInfo(
		echoClientHandler,
		newTestServiceEchoClientArgs,
		newTestServiceEchoClientResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingClient),
	),
	"EchoServer": kitex.NewMethodInfo(
		echoServerHandler,
		newTestServiceEchoServerArgs,
		newTestServiceEchoServerResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingServer),
	),
}

var (
	testServiceServiceInfo = NewServiceInfo()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return testServiceServiceInfo
}

// NewServiceInfo creates a new ServiceInfo
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo()
}

func newServiceInfo() *kitex.ServiceInfo {
	serviceName := "TestService"
	handlerType := (*echo.TestService)(nil)
	extra := map[string]interface{}{
		"PackageName": "echo",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         serviceMethods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.12.1",
		Extra:           extra,
	}
	return svcInfo
}

func pingPongHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServicePingPongArgs)
	realResult := result.(*echo.TestServicePingPongResult)
	success, err := handler.(echo.TestService).PingPong(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newTestServicePingPongArgs() interface{} {
	return echo.NewTestServicePingPongArgs()
}

func newTestServicePingPongResult() interface{} {
	return echo.NewTestServicePingPongResult()
}

func unaryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.TestServiceUnaryArgs)
	realResult := result.(*echo.TestServiceUnaryResult)
	success, err := handler.(echo.TestService).Unary(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}

func newTestServiceUnaryArgs() interface{} {
	return echo.NewTestServiceUnaryArgs()
}

func newTestServiceUnaryResult() interface{} {
	return echo.NewTestServiceUnaryResult()
}

func echoBidiHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	st, err := streaming.GetServerStreamFromArg(arg)
	if err != nil {
		return err
	}
	stream := streaming.NewBidiStreamingServer[echo.EchoClientRequest, echo.EchoClientResponse](st)
	return handler.(echo.TestService).EchoBidi(ctx, stream)
}

func newTestServiceEchoBidiArgs() interface{} {
	return echo.NewTestServiceEchoBidiArgs()
}

func newTestServiceEchoBidiResult() interface{} {
	return echo.NewTestServiceEchoBidiResult()
}

func echoClientHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	st, err := streaming.GetServerStreamFromArg(arg)
	if err != nil {
		return err
	}
	stream := streaming.NewClientStreamingServer[echo.EchoClientRequest, echo.EchoClientResponse](st)
	return handler.(echo.TestService).EchoClient(ctx, stream)
}

func newTestServiceEchoClientArgs() interface{} {
	return echo.NewTestServiceEchoClientArgs()
}

func newTestServiceEchoClientResult() interface{} {
	return echo.NewTestServiceEchoClientResult()
}

func echoServerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	st, err := streaming.GetServerStreamFromArg(arg)
	if err != nil {
		return err
	}
	stream := streaming.NewServerStreamingServer[echo.EchoClientResponse](st)
	req := new(echo.EchoClientRequest)
	if err := stream.RecvMsg(ctx, req); err != nil {
		return err
	}
	return handler.(echo.TestService).EchoServer(ctx, req, stream)
}

func newTestServiceEchoServerArgs() interface{} {
	return echo.NewTestServiceEchoServerArgs()
}

func newTestServiceEchoServerResult() interface{} {
	return echo.NewTestServiceEchoServerResult()
}

type kClient struct {
	c  client.Client
	sc client.Streaming
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c:  c,
		sc: c.(client.Streaming),
	}
}

func (p *kClient) PingPong(ctx context.Context, req *echo.EchoClientRequest) (r *echo.EchoClientResponse, err error) {
	var _args echo.TestServicePingPongArgs
	_args.Req = req
	var _result echo.TestServicePingPongResult
	if err = p.c.Call(ctx, "PingPong", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Unary(ctx context.Context, req *echo.EchoClientRequest) (r *echo.EchoClientResponse, err error) {
	var _args echo.TestServiceUnaryArgs
	_args.Req = req
	var _result echo.TestServiceUnaryResult
	if err = p.c.Call(ctx, "Unary", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoBidi(ctx context.Context) (TestService_EchoBidiClient, error) {
	st, err := p.sc.StreamX(ctx, "EchoBidi")
	if err != nil {
		return nil, err
	}
	stream := streaming.NewBidiStreamingClient[echo.EchoClientRequest, echo.EchoClientResponse](st)
	return stream, nil
}

func (p *kClient) EchoClient(ctx context.Context) (TestService_EchoClientClient, error) {
	st, err := p.sc.StreamX(ctx, "EchoClient")
	if err != nil {
		return nil, err
	}
	stream := streaming.NewClientStreamingClient[echo.EchoClientRequest, echo.EchoClientResponse](st)
	return stream, nil
}

func (p *kClient) EchoServer(ctx context.Context, req *echo.EchoClientRequest) (TestService_EchoServerClient, error) {
	st, err := p.sc.StreamX(ctx, "EchoServer")
	if err != nil {
		return nil, err
	}
	stream := streaming.NewServerStreamingClient[echo.EchoClientResponse](st)
	if err := stream.SendMsg(ctx, req); err != nil {
		return nil, err
	}
	if err := stream.CloseSend(ctx); err != nil {
		return nil, err
	}
	return stream, nil
}

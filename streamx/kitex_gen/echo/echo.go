// Code generated by thriftgo (0.3.20). DO NOT EDIT.

package echo

import (
	"context"
	"fmt"
	"github.com/cloudwego/kitex/pkg/streaming"
)

type EchoClientRequest struct {
	Message string `thrift:"Message,1" frugal:"1,default,string" json:"Message"`
}

func NewEchoClientRequest() *EchoClientRequest {
	return &EchoClientRequest{}
}

func (p *EchoClientRequest) InitDefault() {
}

func (p *EchoClientRequest) GetMessage() (v string) {
	return p.Message
}
func (p *EchoClientRequest) SetMessage(val string) {
	p.Message = val
}

func (p *EchoClientRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoClientRequest(%+v)", *p)
}

var fieldIDToName_EchoClientRequest = map[int16]string{
	1: "Message",
}

type EchoClientResponse struct {
	Message string `thrift:"Message,1" frugal:"1,default,string" json:"Message"`
}

func NewEchoClientResponse() *EchoClientResponse {
	return &EchoClientResponse{}
}

func (p *EchoClientResponse) InitDefault() {
}

func (p *EchoClientResponse) GetMessage() (v string) {
	return p.Message
}
func (p *EchoClientResponse) SetMessage(val string) {
	p.Message = val
}

func (p *EchoClientResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoClientResponse(%+v)", *p)
}

var fieldIDToName_EchoClientResponse = map[int16]string{
	1: "Message",
}

type TestService interface {
	PingPong(ctx context.Context, req *EchoClientRequest) (r *EchoClientResponse, err error)

	Unary(ctx context.Context, req *EchoClientRequest) (r *EchoClientResponse, err error)

	EchoBidi(ctx context.Context, stream TestService_EchoBidiServer) (err error)

	EchoClient(ctx context.Context, stream TestService_EchoClientServer) (err error)

	EchoServer(ctx context.Context, req *EchoClientRequest, stream TestService_EchoServerServer) (err error)
}

type TestServicePingPongArgs struct {
	Req *EchoClientRequest `thrift:"req,1" frugal:"1,default,EchoClientRequest" json:"req"`
}

func NewTestServicePingPongArgs() *TestServicePingPongArgs {
	return &TestServicePingPongArgs{}
}

func (p *TestServicePingPongArgs) InitDefault() {
}

var TestServicePingPongArgs_Req_DEFAULT *EchoClientRequest

func (p *TestServicePingPongArgs) GetReq() (v *EchoClientRequest) {
	if !p.IsSetReq() {
		return TestServicePingPongArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TestServicePingPongArgs) SetReq(val *EchoClientRequest) {
	p.Req = val
}

func (p *TestServicePingPongArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TestServicePingPongArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServicePingPongArgs(%+v)", *p)
}

var fieldIDToName_TestServicePingPongArgs = map[int16]string{
	1: "req",
}

type TestServicePingPongResult struct {
	Success *EchoClientResponse `thrift:"success,0,optional" frugal:"0,optional,EchoClientResponse" json:"success,omitempty"`
}

func NewTestServicePingPongResult() *TestServicePingPongResult {
	return &TestServicePingPongResult{}
}

func (p *TestServicePingPongResult) InitDefault() {
}

var TestServicePingPongResult_Success_DEFAULT *EchoClientResponse

func (p *TestServicePingPongResult) GetSuccess() (v *EchoClientResponse) {
	if !p.IsSetSuccess() {
		return TestServicePingPongResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServicePingPongResult) SetSuccess(x interface{}) {
	p.Success = x.(*EchoClientResponse)
}

func (p *TestServicePingPongResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServicePingPongResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServicePingPongResult(%+v)", *p)
}

var fieldIDToName_TestServicePingPongResult = map[int16]string{
	0: "success",
}

type TestServiceUnaryArgs struct {
	Req *EchoClientRequest `thrift:"req,1" frugal:"1,default,EchoClientRequest" json:"req"`
}

func NewTestServiceUnaryArgs() *TestServiceUnaryArgs {
	return &TestServiceUnaryArgs{}
}

func (p *TestServiceUnaryArgs) InitDefault() {
}

var TestServiceUnaryArgs_Req_DEFAULT *EchoClientRequest

func (p *TestServiceUnaryArgs) GetReq() (v *EchoClientRequest) {
	if !p.IsSetReq() {
		return TestServiceUnaryArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TestServiceUnaryArgs) SetReq(val *EchoClientRequest) {
	p.Req = val
}

func (p *TestServiceUnaryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TestServiceUnaryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceUnaryArgs(%+v)", *p)
}

var fieldIDToName_TestServiceUnaryArgs = map[int16]string{
	1: "req",
}

type TestServiceUnaryResult struct {
	Success *EchoClientResponse `thrift:"success,0,optional" frugal:"0,optional,EchoClientResponse" json:"success,omitempty"`
}

func NewTestServiceUnaryResult() *TestServiceUnaryResult {
	return &TestServiceUnaryResult{}
}

func (p *TestServiceUnaryResult) InitDefault() {
}

var TestServiceUnaryResult_Success_DEFAULT *EchoClientResponse

func (p *TestServiceUnaryResult) GetSuccess() (v *EchoClientResponse) {
	if !p.IsSetSuccess() {
		return TestServiceUnaryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceUnaryResult) SetSuccess(x interface{}) {
	p.Success = x.(*EchoClientResponse)
}

func (p *TestServiceUnaryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceUnaryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceUnaryResult(%+v)", *p)
}

var fieldIDToName_TestServiceUnaryResult = map[int16]string{
	0: "success",
}

type TestServiceEchoBidiArgs struct {
	Req *EchoClientRequest `thrift:"req,1" frugal:"1,default,EchoClientRequest" json:"req"`
}

func NewTestServiceEchoBidiArgs() *TestServiceEchoBidiArgs {
	return &TestServiceEchoBidiArgs{}
}

func (p *TestServiceEchoBidiArgs) InitDefault() {
}

var TestServiceEchoBidiArgs_Req_DEFAULT *EchoClientRequest

func (p *TestServiceEchoBidiArgs) GetReq() (v *EchoClientRequest) {
	if !p.IsSetReq() {
		return TestServiceEchoBidiArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TestServiceEchoBidiArgs) SetReq(val *EchoClientRequest) {
	p.Req = val
}

func (p *TestServiceEchoBidiArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TestServiceEchoBidiArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBidiArgs(%+v)", *p)
}

var fieldIDToName_TestServiceEchoBidiArgs = map[int16]string{
	1: "req",
}

type TestServiceEchoBidiResult struct {
	Success *EchoClientResponse `thrift:"success,0,optional" frugal:"0,optional,EchoClientResponse" json:"success,omitempty"`
}

func NewTestServiceEchoBidiResult() *TestServiceEchoBidiResult {
	return &TestServiceEchoBidiResult{}
}

func (p *TestServiceEchoBidiResult) InitDefault() {
}

var TestServiceEchoBidiResult_Success_DEFAULT *EchoClientResponse

func (p *TestServiceEchoBidiResult) GetSuccess() (v *EchoClientResponse) {
	if !p.IsSetSuccess() {
		return TestServiceEchoBidiResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoBidiResult) SetSuccess(x interface{}) {
	p.Success = x.(*EchoClientResponse)
}

func (p *TestServiceEchoBidiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoBidiResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoBidiResult(%+v)", *p)
}

var fieldIDToName_TestServiceEchoBidiResult = map[int16]string{
	0: "success",
}

type TestService_EchoBidiServer streaming.BidiStreamingServer[EchoClientRequest, EchoClientResponse]

type TestServiceEchoClientArgs struct {
	Req *EchoClientRequest `thrift:"req,1" frugal:"1,default,EchoClientRequest" json:"req"`
}

func NewTestServiceEchoClientArgs() *TestServiceEchoClientArgs {
	return &TestServiceEchoClientArgs{}
}

func (p *TestServiceEchoClientArgs) InitDefault() {
}

var TestServiceEchoClientArgs_Req_DEFAULT *EchoClientRequest

func (p *TestServiceEchoClientArgs) GetReq() (v *EchoClientRequest) {
	if !p.IsSetReq() {
		return TestServiceEchoClientArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TestServiceEchoClientArgs) SetReq(val *EchoClientRequest) {
	p.Req = val
}

func (p *TestServiceEchoClientArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TestServiceEchoClientArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoClientArgs(%+v)", *p)
}

var fieldIDToName_TestServiceEchoClientArgs = map[int16]string{
	1: "req",
}

type TestServiceEchoClientResult struct {
	Success *EchoClientResponse `thrift:"success,0,optional" frugal:"0,optional,EchoClientResponse" json:"success,omitempty"`
}

func NewTestServiceEchoClientResult() *TestServiceEchoClientResult {
	return &TestServiceEchoClientResult{}
}

func (p *TestServiceEchoClientResult) InitDefault() {
}

var TestServiceEchoClientResult_Success_DEFAULT *EchoClientResponse

func (p *TestServiceEchoClientResult) GetSuccess() (v *EchoClientResponse) {
	if !p.IsSetSuccess() {
		return TestServiceEchoClientResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoClientResult) SetSuccess(x interface{}) {
	p.Success = x.(*EchoClientResponse)
}

func (p *TestServiceEchoClientResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoClientResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoClientResult(%+v)", *p)
}

var fieldIDToName_TestServiceEchoClientResult = map[int16]string{
	0: "success",
}

type TestService_EchoClientServer streaming.ClientStreamingServer[EchoClientRequest, EchoClientResponse]

type TestServiceEchoServerArgs struct {
	Req *EchoClientRequest `thrift:"req,1" frugal:"1,default,EchoClientRequest" json:"req"`
}

func NewTestServiceEchoServerArgs() *TestServiceEchoServerArgs {
	return &TestServiceEchoServerArgs{}
}

func (p *TestServiceEchoServerArgs) InitDefault() {
}

var TestServiceEchoServerArgs_Req_DEFAULT *EchoClientRequest

func (p *TestServiceEchoServerArgs) GetReq() (v *EchoClientRequest) {
	if !p.IsSetReq() {
		return TestServiceEchoServerArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *TestServiceEchoServerArgs) SetReq(val *EchoClientRequest) {
	p.Req = val
}

func (p *TestServiceEchoServerArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TestServiceEchoServerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoServerArgs(%+v)", *p)
}

var fieldIDToName_TestServiceEchoServerArgs = map[int16]string{
	1: "req",
}

type TestServiceEchoServerResult struct {
	Success *EchoClientResponse `thrift:"success,0,optional" frugal:"0,optional,EchoClientResponse" json:"success,omitempty"`
}

func NewTestServiceEchoServerResult() *TestServiceEchoServerResult {
	return &TestServiceEchoServerResult{}
}

func (p *TestServiceEchoServerResult) InitDefault() {
}

var TestServiceEchoServerResult_Success_DEFAULT *EchoClientResponse

func (p *TestServiceEchoServerResult) GetSuccess() (v *EchoClientResponse) {
	if !p.IsSetSuccess() {
		return TestServiceEchoServerResult_Success_DEFAULT
	}
	return p.Success
}
func (p *TestServiceEchoServerResult) SetSuccess(x interface{}) {
	p.Success = x.(*EchoClientResponse)
}

func (p *TestServiceEchoServerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestServiceEchoServerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TestServiceEchoServerResult(%+v)", *p)
}

var fieldIDToName_TestServiceEchoServerResult = map[int16]string{
	0: "success",
}

type TestService_EchoServerServer streaming.ServerStreamingServer[EchoClientResponse]

type EmptyService interface {
}

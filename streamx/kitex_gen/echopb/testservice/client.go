// Code generated by Kitex v0.12.3. DO NOT EDIT.

package testservice

import (
	"context"
	echopb "github.com/cloudwego/kitex-tests/streamx/kitex_gen/echopb"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	streamcall "github.com/cloudwego/kitex/client/callopt/streamcall"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	transport "github.com/cloudwego/kitex/transport"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Unary(ctx context.Context, Req *echopb.EchoClientRequest, callOptions ...callopt.Option) (r *echopb.EchoClientResponse, err error)
	EchoBidi(ctx context.Context, callOptions ...streamcall.Option) (stream TestService_EchoBidiClient, err error)
	EchoClient(ctx context.Context, callOptions ...streamcall.Option) (stream TestService_EchoClientClient, err error)
	EchoServer(ctx context.Context, Req *echopb.EchoClientRequest, callOptions ...streamcall.Option) (stream TestService_EchoServerClient, err error)
}

type TestService_EchoBidiClient streaming.BidiStreamingClient[echopb.EchoClientRequest, echopb.EchoClientResponse]

type TestService_EchoClientClient streaming.ClientStreamingClient[echopb.EchoClientRequest, echopb.EchoClientResponse]

type TestService_EchoServerClient streaming.ServerStreamingClient[echopb.EchoClientResponse]

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, client.WithTransportProtocol(transport.GRPC))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kTestServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kTestServiceClient struct {
	*kClient
}

func (p *kTestServiceClient) Unary(ctx context.Context, Req *echopb.EchoClientRequest, callOptions ...callopt.Option) (r *echopb.EchoClientResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Unary(ctx, Req)
}

func (p *kTestServiceClient) EchoBidi(ctx context.Context, callOptions ...streamcall.Option) (stream TestService_EchoBidiClient, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, streamcall.GetCallOptions(callOptions))
	return p.kClient.EchoBidi(ctx)
}

func (p *kTestServiceClient) EchoClient(ctx context.Context, callOptions ...streamcall.Option) (stream TestService_EchoClientClient, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, streamcall.GetCallOptions(callOptions))
	return p.kClient.EchoClient(ctx)
}

func (p *kTestServiceClient) EchoServer(ctx context.Context, Req *echopb.EchoClientRequest, callOptions ...streamcall.Option) (stream TestService_EchoServerClient, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, streamcall.GetCallOptions(callOptions))
	return p.kClient.EchoServer(ctx, Req)
}

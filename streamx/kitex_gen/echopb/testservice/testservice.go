// Code generated by Kitex v0.12.3. DO NOT EDIT.

package testservice

import (
	"context"
	"errors"
	echopb "github.com/cloudwego/kitex-tests/streamx/kitex_gen/echopb"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Unary": kitex.NewMethodInfo(
		unaryHandler,
		newUnaryArgs,
		newUnaryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"EchoBidi": kitex.NewMethodInfo(
		echoBidiHandler,
		newEchoBidiArgs,
		newEchoBidiResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingBidirectional),
	),
	"EchoClient": kitex.NewMethodInfo(
		echoClientHandler,
		newEchoClientArgs,
		newEchoClientResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingClient),
	),
	"EchoServer": kitex.NewMethodInfo(
		echoServerHandler,
		newEchoServerArgs,
		newEchoServerResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingServer),
	),
}

var (
	testServiceServiceInfo = NewServiceInfo()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return testServiceServiceInfo
}

// NewServiceInfo creates a new ServiceInfo
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo()
}

func newServiceInfo() *kitex.ServiceInfo {
	serviceName := "TestService"
	handlerType := (*echopb.TestService)(nil)
	extra := map[string]interface{}{
		"PackageName": "echopb",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         serviceMethods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.12.3",
		Extra:           extra,
	}
	return svcInfo
}

func unaryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	s := arg.(*UnaryArgs)
	success, err := handler.(echopb.TestService).Unary(ctx, s.Req)
	if err != nil {
		return err
	}
	realResult := result.(*UnaryResult)
	realResult.Success = success
	return nil
}

func newUnaryArgs() interface{} {
	return &UnaryArgs{}
}

func newUnaryResult() interface{} {
	return &UnaryResult{}
}

type UnaryArgs struct {
	Req *echopb.EchoClientRequest
}

func (p *UnaryArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(echopb.EchoClientRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UnaryArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UnaryArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UnaryArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *UnaryArgs) Unmarshal(in []byte) error {
	msg := new(echopb.EchoClientRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var UnaryArgs_Req_DEFAULT *echopb.EchoClientRequest

func (p *UnaryArgs) GetReq() *echopb.EchoClientRequest {
	if !p.IsSetReq() {
		return UnaryArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UnaryArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UnaryArgs) GetFirstArgument() interface{} {
	return p.Req
}

type UnaryResult struct {
	Success *echopb.EchoClientResponse
}

var UnaryResult_Success_DEFAULT *echopb.EchoClientResponse

func (p *UnaryResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(echopb.EchoClientResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UnaryResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UnaryResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UnaryResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *UnaryResult) Unmarshal(in []byte) error {
	msg := new(echopb.EchoClientResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UnaryResult) GetSuccess() *echopb.EchoClientResponse {
	if !p.IsSetSuccess() {
		return UnaryResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UnaryResult) SetSuccess(x interface{}) {
	p.Success = x.(*echopb.EchoClientResponse)
}

func (p *UnaryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UnaryResult) GetResult() interface{} {
	return p.Success
}

func echoBidiHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	st, err := streaming.GetServerStreamFromArg(arg)
	if err != nil {
		return err
	}
	stream := streaming.NewBidiStreamingServer[echopb.EchoClientRequest, echopb.EchoClientResponse](st)
	return handler.(echopb.TestService).EchoBidi(ctx, stream)
}

func newEchoBidiArgs() interface{} {
	return &EchoBidiArgs{}
}

func newEchoBidiResult() interface{} {
	return &EchoBidiResult{}
}

type EchoBidiArgs struct {
	Req *echopb.EchoClientRequest
}

func (p *EchoBidiArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(echopb.EchoClientRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *EchoBidiArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *EchoBidiArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *EchoBidiArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *EchoBidiArgs) Unmarshal(in []byte) error {
	msg := new(echopb.EchoClientRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var EchoBidiArgs_Req_DEFAULT *echopb.EchoClientRequest

func (p *EchoBidiArgs) GetReq() *echopb.EchoClientRequest {
	if !p.IsSetReq() {
		return EchoBidiArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *EchoBidiArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EchoBidiArgs) GetFirstArgument() interface{} {
	return p.Req
}

type EchoBidiResult struct {
	Success *echopb.EchoClientResponse
}

var EchoBidiResult_Success_DEFAULT *echopb.EchoClientResponse

func (p *EchoBidiResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(echopb.EchoClientResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *EchoBidiResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *EchoBidiResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *EchoBidiResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *EchoBidiResult) Unmarshal(in []byte) error {
	msg := new(echopb.EchoClientResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *EchoBidiResult) GetSuccess() *echopb.EchoClientResponse {
	if !p.IsSetSuccess() {
		return EchoBidiResult_Success_DEFAULT
	}
	return p.Success
}

func (p *EchoBidiResult) SetSuccess(x interface{}) {
	p.Success = x.(*echopb.EchoClientResponse)
}

func (p *EchoBidiResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EchoBidiResult) GetResult() interface{} {
	return p.Success
}

func echoClientHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	st, err := streaming.GetServerStreamFromArg(arg)
	if err != nil {
		return err
	}
	stream := streaming.NewClientStreamingServer[echopb.EchoClientRequest, echopb.EchoClientResponse](st)
	return handler.(echopb.TestService).EchoClient(ctx, stream)
}

func newEchoClientArgs() interface{} {
	return &EchoClientArgs{}
}

func newEchoClientResult() interface{} {
	return &EchoClientResult{}
}

type EchoClientArgs struct {
	Req *echopb.EchoClientRequest
}

func (p *EchoClientArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(echopb.EchoClientRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *EchoClientArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *EchoClientArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *EchoClientArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *EchoClientArgs) Unmarshal(in []byte) error {
	msg := new(echopb.EchoClientRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var EchoClientArgs_Req_DEFAULT *echopb.EchoClientRequest

func (p *EchoClientArgs) GetReq() *echopb.EchoClientRequest {
	if !p.IsSetReq() {
		return EchoClientArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *EchoClientArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EchoClientArgs) GetFirstArgument() interface{} {
	return p.Req
}

type EchoClientResult struct {
	Success *echopb.EchoClientResponse
}

var EchoClientResult_Success_DEFAULT *echopb.EchoClientResponse

func (p *EchoClientResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(echopb.EchoClientResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *EchoClientResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *EchoClientResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *EchoClientResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *EchoClientResult) Unmarshal(in []byte) error {
	msg := new(echopb.EchoClientResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *EchoClientResult) GetSuccess() *echopb.EchoClientResponse {
	if !p.IsSetSuccess() {
		return EchoClientResult_Success_DEFAULT
	}
	return p.Success
}

func (p *EchoClientResult) SetSuccess(x interface{}) {
	p.Success = x.(*echopb.EchoClientResponse)
}

func (p *EchoClientResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EchoClientResult) GetResult() interface{} {
	return p.Success
}

func echoServerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	st, err := streaming.GetServerStreamFromArg(arg)
	if err != nil {
		return err
	}
	stream := streaming.NewServerStreamingServer[echopb.EchoClientResponse](st)
	req := new(echopb.EchoClientRequest)
	if err := stream.RecvMsg(ctx, req); err != nil {
		return err
	}
	return handler.(echopb.TestService).EchoServer(ctx, req, stream)
}

func newEchoServerArgs() interface{} {
	return &EchoServerArgs{}
}

func newEchoServerResult() interface{} {
	return &EchoServerResult{}
}

type EchoServerArgs struct {
	Req *echopb.EchoClientRequest
}

func (p *EchoServerArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(echopb.EchoClientRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *EchoServerArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *EchoServerArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *EchoServerArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *EchoServerArgs) Unmarshal(in []byte) error {
	msg := new(echopb.EchoClientRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var EchoServerArgs_Req_DEFAULT *echopb.EchoClientRequest

func (p *EchoServerArgs) GetReq() *echopb.EchoClientRequest {
	if !p.IsSetReq() {
		return EchoServerArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *EchoServerArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EchoServerArgs) GetFirstArgument() interface{} {
	return p.Req
}

type EchoServerResult struct {
	Success *echopb.EchoClientResponse
}

var EchoServerResult_Success_DEFAULT *echopb.EchoClientResponse

func (p *EchoServerResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(echopb.EchoClientResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *EchoServerResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *EchoServerResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *EchoServerResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *EchoServerResult) Unmarshal(in []byte) error {
	msg := new(echopb.EchoClientResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *EchoServerResult) GetSuccess() *echopb.EchoClientResponse {
	if !p.IsSetSuccess() {
		return EchoServerResult_Success_DEFAULT
	}
	return p.Success
}

func (p *EchoServerResult) SetSuccess(x interface{}) {
	p.Success = x.(*echopb.EchoClientResponse)
}

func (p *EchoServerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EchoServerResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c  client.Client
	sc client.Streaming
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c:  c,
		sc: c.(client.Streaming),
	}
}

func (p *kClient) Unary(ctx context.Context, Req *echopb.EchoClientRequest) (r *echopb.EchoClientResponse, err error) {
	var _args UnaryArgs
	_args.Req = Req
	var _result UnaryResult
	if err = p.c.Call(ctx, "Unary", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoBidi(ctx context.Context) (TestService_EchoBidiClient, error) {
	st, err := p.sc.StreamX(ctx, "EchoBidi")
	if err != nil {
		return nil, err
	}
	stream := streaming.NewBidiStreamingClient[echopb.EchoClientRequest, echopb.EchoClientResponse](st)
	return stream, nil
}

func (p *kClient) EchoClient(ctx context.Context) (TestService_EchoClientClient, error) {
	st, err := p.sc.StreamX(ctx, "EchoClient")
	if err != nil {
		return nil, err
	}
	stream := streaming.NewClientStreamingClient[echopb.EchoClientRequest, echopb.EchoClientResponse](st)
	return stream, nil
}

func (p *kClient) EchoServer(ctx context.Context, req *echopb.EchoClientRequest) (TestService_EchoServerClient, error) {
	st, err := p.sc.StreamX(ctx, "EchoServer")
	if err != nil {
		return nil, err
	}
	stream := streaming.NewServerStreamingClient[echopb.EchoClientResponse](st)
	if err := stream.SendMsg(ctx, req); err != nil {
		return nil, err
	}
	if err := stream.CloseSend(ctx); err != nil {
		return nil, err
	}
	return stream, nil
}

// Code generated by thriftgo (0.4.1). DO NOT EDIT.

package stability

import (
	"context"
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type TestEnum int64

const (
	TestEnum_FIRST  TestEnum = 1
	TestEnum_SECOND TestEnum = 2
	TestEnum_THIRD  TestEnum = 3
	TestEnum_FOURTH TestEnum = 4
)

func (p TestEnum) String() string {
	switch p {
	case TestEnum_FIRST:
		return "FIRST"
	case TestEnum_SECOND:
		return "SECOND"
	case TestEnum_THIRD:
		return "THIRD"
	case TestEnum_FOURTH:
		return "FOURTH"
	}
	return "<UNSET>"
}

func TestEnumFromString(s string) (TestEnum, error) {
	switch s {
	case "FIRST":
		return TestEnum_FIRST, nil
	case "SECOND":
		return TestEnum_SECOND, nil
	case "THIRD":
		return TestEnum_THIRD, nil
	case "FOURTH":
		return TestEnum_FOURTH, nil
	}
	return TestEnum(0), fmt.Errorf("not a valid TestEnum string")
}

func TestEnumPtr(v TestEnum) *TestEnum { return &v }
func (p *TestEnum) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TestEnum(result.Int64)
	return
}

func (p *TestEnum) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type STRequest struct {
	Name       *string           `thrift:"Name,1,optional" frugal:"1,optional,string" json:"Name,omitempty"`
	On         *bool             `thrift:"on,2,optional" frugal:"2,optional,bool" json:"on,omitempty"`
	B          *int8             `thrift:"b,3,optional" frugal:"3,optional,byte" json:"b,omitempty"`
	Int16      int16             `thrift:"int16,4,optional" frugal:"4,optional,i16" json:"int16,omitempty"`
	Int32      *int32            `thrift:"int32,5,optional" frugal:"5,optional,i32" json:"int32,omitempty"`
	Int64      *int64            `thrift:"int64,6,optional" frugal:"6,optional,i64" json:"int64,omitempty"`
	D          *float64          `thrift:"d,7,optional" frugal:"7,optional,double" json:"d,omitempty"`
	Str        *string           `thrift:"str,8,optional" frugal:"8,optional,string" json:"str,omitempty"`
	Bin        []byte            `thrift:"bin,9,optional" frugal:"9,optional,binary" json:"bin,omitempty"`
	StringMap  map[string]string `thrift:"stringMap,10,optional" frugal:"10,optional,map<string:string>" json:"stringMap,omitempty"`
	StringList []string          `thrift:"stringList,11,optional" frugal:"11,optional,list<string>" json:"stringList,omitempty"`
	StringSet  []string          `thrift:"stringSet,12,optional" frugal:"12,optional,set<string>" json:"stringSet,omitempty"`
	E          *TestEnum         `thrift:"e,13,optional" frugal:"13,optional,TestEnum" json:"e,omitempty"`
	FlagMsg    *string           `thrift:"flagMsg,14,optional" frugal:"14,optional,string" json:"flagMsg,omitempty"`
	MockCost   *string           `thrift:"mockCost,15,optional" frugal:"15,optional,string" json:"mockCost,omitempty"`
	Framework  *string           `thrift:"framework,16,optional" frugal:"16,optional,string" query:"framework"`
	UserId     *string           `thrift:"userId,17,optional" frugal:"17,optional,string" header:"X-User-Id"`
}

func NewSTRequest() *STRequest {
	return &STRequest{

		Int16: 42,
	}
}

func (p *STRequest) InitDefault() {
	p.Int16 = 42
}

var STRequest_Name_DEFAULT string

func (p *STRequest) GetName() (v string) {
	if !p.IsSetName() {
		return STRequest_Name_DEFAULT
	}
	return *p.Name
}

var STRequest_On_DEFAULT bool

func (p *STRequest) GetOn() (v bool) {
	if !p.IsSetOn() {
		return STRequest_On_DEFAULT
	}
	return *p.On
}

var STRequest_B_DEFAULT int8

func (p *STRequest) GetB() (v int8) {
	if !p.IsSetB() {
		return STRequest_B_DEFAULT
	}
	return *p.B
}

var STRequest_Int16_DEFAULT int16 = 42

func (p *STRequest) GetInt16() (v int16) {
	if !p.IsSetInt16() {
		return STRequest_Int16_DEFAULT
	}
	return p.Int16
}

var STRequest_Int32_DEFAULT int32

func (p *STRequest) GetInt32() (v int32) {
	if !p.IsSetInt32() {
		return STRequest_Int32_DEFAULT
	}
	return *p.Int32
}

var STRequest_Int64_DEFAULT int64

func (p *STRequest) GetInt64() (v int64) {
	if !p.IsSetInt64() {
		return STRequest_Int64_DEFAULT
	}
	return *p.Int64
}

var STRequest_D_DEFAULT float64

func (p *STRequest) GetD() (v float64) {
	if !p.IsSetD() {
		return STRequest_D_DEFAULT
	}
	return *p.D
}

var STRequest_Str_DEFAULT string

func (p *STRequest) GetStr() (v string) {
	if !p.IsSetStr() {
		return STRequest_Str_DEFAULT
	}
	return *p.Str
}

var STRequest_Bin_DEFAULT []byte

func (p *STRequest) GetBin() (v []byte) {
	if !p.IsSetBin() {
		return STRequest_Bin_DEFAULT
	}
	return p.Bin
}

var STRequest_StringMap_DEFAULT map[string]string

func (p *STRequest) GetStringMap() (v map[string]string) {
	if !p.IsSetStringMap() {
		return STRequest_StringMap_DEFAULT
	}
	return p.StringMap
}

var STRequest_StringList_DEFAULT []string

func (p *STRequest) GetStringList() (v []string) {
	if !p.IsSetStringList() {
		return STRequest_StringList_DEFAULT
	}
	return p.StringList
}

var STRequest_StringSet_DEFAULT []string

func (p *STRequest) GetStringSet() (v []string) {
	if !p.IsSetStringSet() {
		return STRequest_StringSet_DEFAULT
	}
	return p.StringSet
}

var STRequest_E_DEFAULT TestEnum

func (p *STRequest) GetE() (v TestEnum) {
	if !p.IsSetE() {
		return STRequest_E_DEFAULT
	}
	return *p.E
}

var STRequest_FlagMsg_DEFAULT string

func (p *STRequest) GetFlagMsg() (v string) {
	if !p.IsSetFlagMsg() {
		return STRequest_FlagMsg_DEFAULT
	}
	return *p.FlagMsg
}

var STRequest_MockCost_DEFAULT string

func (p *STRequest) GetMockCost() (v string) {
	if !p.IsSetMockCost() {
		return STRequest_MockCost_DEFAULT
	}
	return *p.MockCost
}

var STRequest_Framework_DEFAULT string

func (p *STRequest) GetFramework() (v string) {
	if !p.IsSetFramework() {
		return STRequest_Framework_DEFAULT
	}
	return *p.Framework
}

var STRequest_UserId_DEFAULT string

func (p *STRequest) GetUserId() (v string) {
	if !p.IsSetUserId() {
		return STRequest_UserId_DEFAULT
	}
	return *p.UserId
}
func (p *STRequest) SetName(val *string) {
	p.Name = val
}
func (p *STRequest) SetOn(val *bool) {
	p.On = val
}
func (p *STRequest) SetB(val *int8) {
	p.B = val
}
func (p *STRequest) SetInt16(val int16) {
	p.Int16 = val
}
func (p *STRequest) SetInt32(val *int32) {
	p.Int32 = val
}
func (p *STRequest) SetInt64(val *int64) {
	p.Int64 = val
}
func (p *STRequest) SetD(val *float64) {
	p.D = val
}
func (p *STRequest) SetStr(val *string) {
	p.Str = val
}
func (p *STRequest) SetBin(val []byte) {
	p.Bin = val
}
func (p *STRequest) SetStringMap(val map[string]string) {
	p.StringMap = val
}
func (p *STRequest) SetStringList(val []string) {
	p.StringList = val
}
func (p *STRequest) SetStringSet(val []string) {
	p.StringSet = val
}
func (p *STRequest) SetE(val *TestEnum) {
	p.E = val
}
func (p *STRequest) SetFlagMsg(val *string) {
	p.FlagMsg = val
}
func (p *STRequest) SetMockCost(val *string) {
	p.MockCost = val
}
func (p *STRequest) SetFramework(val *string) {
	p.Framework = val
}
func (p *STRequest) SetUserId(val *string) {
	p.UserId = val
}

func (p *STRequest) IsSetName() bool {
	return p.Name != nil
}

func (p *STRequest) IsSetOn() bool {
	return p.On != nil
}

func (p *STRequest) IsSetB() bool {
	return p.B != nil
}

func (p *STRequest) IsSetInt16() bool {
	return p.Int16 != STRequest_Int16_DEFAULT
}

func (p *STRequest) IsSetInt32() bool {
	return p.Int32 != nil
}

func (p *STRequest) IsSetInt64() bool {
	return p.Int64 != nil
}

func (p *STRequest) IsSetD() bool {
	return p.D != nil
}

func (p *STRequest) IsSetStr() bool {
	return p.Str != nil
}

func (p *STRequest) IsSetBin() bool {
	return p.Bin != nil
}

func (p *STRequest) IsSetStringMap() bool {
	return p.StringMap != nil
}

func (p *STRequest) IsSetStringList() bool {
	return p.StringList != nil
}

func (p *STRequest) IsSetStringSet() bool {
	return p.StringSet != nil
}

func (p *STRequest) IsSetE() bool {
	return p.E != nil
}

func (p *STRequest) IsSetFlagMsg() bool {
	return p.FlagMsg != nil
}

func (p *STRequest) IsSetMockCost() bool {
	return p.MockCost != nil
}

func (p *STRequest) IsSetFramework() bool {
	return p.Framework != nil
}

func (p *STRequest) IsSetUserId() bool {
	return p.UserId != nil
}

func (p *STRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("STRequest(%+v)", *p)
}

var fieldIDToName_STRequest = map[int16]string{
	1:  "Name",
	2:  "on",
	3:  "b",
	4:  "int16",
	5:  "int32",
	6:  "int64",
	7:  "d",
	8:  "str",
	9:  "bin",
	10: "stringMap",
	11: "stringList",
	12: "stringSet",
	13: "e",
	14: "flagMsg",
	15: "mockCost",
	16: "framework",
	17: "userId",
}

type STResponse struct {
	Str       *string           `thrift:"str,1,optional" frugal:"1,optional,string" json:"str,omitempty"`
	Mp        map[string]string `thrift:"mp,2,optional" frugal:"2,optional,map<string:string>" json:"mp,omitempty"`
	Name      *string           `thrift:"name,3,optional" frugal:"3,optional,string" json:"name,omitempty"`
	Framework *string           `thrift:"framework,4,optional" frugal:"4,optional,string" json:"framework,omitempty"`
}

func NewSTResponse() *STResponse {
	return &STResponse{}
}

func (p *STResponse) InitDefault() {
}

var STResponse_Str_DEFAULT string

func (p *STResponse) GetStr() (v string) {
	if !p.IsSetStr() {
		return STResponse_Str_DEFAULT
	}
	return *p.Str
}

var STResponse_Mp_DEFAULT map[string]string

func (p *STResponse) GetMp() (v map[string]string) {
	if !p.IsSetMp() {
		return STResponse_Mp_DEFAULT
	}
	return p.Mp
}

var STResponse_Name_DEFAULT string

func (p *STResponse) GetName() (v string) {
	if !p.IsSetName() {
		return STResponse_Name_DEFAULT
	}
	return *p.Name
}

var STResponse_Framework_DEFAULT string

func (p *STResponse) GetFramework() (v string) {
	if !p.IsSetFramework() {
		return STResponse_Framework_DEFAULT
	}
	return *p.Framework
}
func (p *STResponse) SetStr(val *string) {
	p.Str = val
}
func (p *STResponse) SetMp(val map[string]string) {
	p.Mp = val
}
func (p *STResponse) SetName(val *string) {
	p.Name = val
}
func (p *STResponse) SetFramework(val *string) {
	p.Framework = val
}

func (p *STResponse) IsSetStr() bool {
	return p.Str != nil
}

func (p *STResponse) IsSetMp() bool {
	return p.Mp != nil
}

func (p *STResponse) IsSetName() bool {
	return p.Name != nil
}

func (p *STResponse) IsSetFramework() bool {
	return p.Framework != nil
}

func (p *STResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("STResponse(%+v)", *p)
}

var fieldIDToName_STResponse = map[int16]string{
	1: "str",
	2: "mp",
	3: "name",
	4: "framework",
}

type STService interface {
	TestSTReq(ctx context.Context, req *STRequest) (r *STResponse, err error)
}

type STServiceTestSTReqArgs struct {
	Req *STRequest `thrift:"req,1" frugal:"1,default,STRequest" json:"req"`
}

func NewSTServiceTestSTReqArgs() *STServiceTestSTReqArgs {
	return &STServiceTestSTReqArgs{}
}

func (p *STServiceTestSTReqArgs) InitDefault() {
}

var STServiceTestSTReqArgs_Req_DEFAULT *STRequest

func (p *STServiceTestSTReqArgs) GetReq() (v *STRequest) {
	if !p.IsSetReq() {
		return STServiceTestSTReqArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *STServiceTestSTReqArgs) SetReq(val *STRequest) {
	p.Req = val
}

func (p *STServiceTestSTReqArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *STServiceTestSTReqArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("STServiceTestSTReqArgs(%+v)", *p)
}

var fieldIDToName_STServiceTestSTReqArgs = map[int16]string{
	1: "req",
}

type STServiceTestSTReqResult struct {
	Success *STResponse `thrift:"success,0,optional" frugal:"0,optional,STResponse" json:"success,omitempty"`
}

func NewSTServiceTestSTReqResult() *STServiceTestSTReqResult {
	return &STServiceTestSTReqResult{}
}

func (p *STServiceTestSTReqResult) InitDefault() {
}

var STServiceTestSTReqResult_Success_DEFAULT *STResponse

func (p *STServiceTestSTReqResult) GetSuccess() (v *STResponse) {
	if !p.IsSetSuccess() {
		return STServiceTestSTReqResult_Success_DEFAULT
	}
	return p.Success
}
func (p *STServiceTestSTReqResult) SetSuccess(x interface{}) {
	p.Success = x.(*STResponse)
}

func (p *STServiceTestSTReqResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *STServiceTestSTReqResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("STServiceTestSTReqResult(%+v)", *p)
}

var fieldIDToName_STServiceTestSTReqResult = map[int16]string{
	0: "success",
}

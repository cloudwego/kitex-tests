// Code generated by Kitex v0.8.0. DO NOT EDIT.

package abcservice

import (
	"context"
	c "github.com/cloudwego/kitex-tests/thrift_streaming/kitex_gen_old/a/b/c"
	echo "github.com/cloudwego/kitex-tests/thrift_streaming/kitex_gen_old/echo"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return aBCServiceServiceInfo
}

var aBCServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "ABCService"
	handlerType := (*echo.ABCService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Echo":              kitex.NewMethodInfo(echoHandler, newABCServiceEchoArgs, newABCServiceEchoResult, false),
		"EchoBidirectional": kitex.NewMethodInfo(echoBidirectionalHandler, newABCServiceEchoBidirectionalArgs, newABCServiceEchoBidirectionalResult, false),
		"EchoServer":        kitex.NewMethodInfo(echoServerHandler, newABCServiceEchoServerArgs, newABCServiceEchoServerResult, false),
		"EchoClient":        kitex.NewMethodInfo(echoClientHandler, newABCServiceEchoClientArgs, newABCServiceEchoClientResult, false),
		"EchoUnary":         kitex.NewMethodInfo(echoUnaryHandler, newABCServiceEchoUnaryArgs, newABCServiceEchoUnaryResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "echo",
		"ServiceFilePath": `idl/api.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.8.0",
		Extra:           extra,
	}
	return svcInfo
}

func echoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.ABCServiceEchoArgs)
	realResult := result.(*echo.ABCServiceEchoResult)
	success, err := handler.(echo.ABCService).Echo(ctx, realArg.Req1, realArg.Req2)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newABCServiceEchoArgs() interface{} {
	return echo.NewABCServiceEchoArgs()
}

func newABCServiceEchoResult() interface{} {
	return echo.NewABCServiceEchoResult()
}

func echoBidirectionalHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.ABCServiceEchoBidirectionalArgs)
	realResult := result.(*echo.ABCServiceEchoBidirectionalResult)
	success, err := handler.(echo.ABCService).EchoBidirectional(ctx, realArg.Req1)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newABCServiceEchoBidirectionalArgs() interface{} {
	return echo.NewABCServiceEchoBidirectionalArgs()
}

func newABCServiceEchoBidirectionalResult() interface{} {
	return echo.NewABCServiceEchoBidirectionalResult()
}

func echoServerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.ABCServiceEchoServerArgs)
	realResult := result.(*echo.ABCServiceEchoServerResult)
	success, err := handler.(echo.ABCService).EchoServer(ctx, realArg.Req1)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newABCServiceEchoServerArgs() interface{} {
	return echo.NewABCServiceEchoServerArgs()
}

func newABCServiceEchoServerResult() interface{} {
	return echo.NewABCServiceEchoServerResult()
}

func echoClientHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.ABCServiceEchoClientArgs)
	realResult := result.(*echo.ABCServiceEchoClientResult)
	success, err := handler.(echo.ABCService).EchoClient(ctx, realArg.Req1)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newABCServiceEchoClientArgs() interface{} {
	return echo.NewABCServiceEchoClientArgs()
}

func newABCServiceEchoClientResult() interface{} {
	return echo.NewABCServiceEchoClientResult()
}

func echoUnaryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.ABCServiceEchoUnaryArgs)
	realResult := result.(*echo.ABCServiceEchoUnaryResult)
	success, err := handler.(echo.ABCService).EchoUnary(ctx, realArg.Req1)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newABCServiceEchoUnaryArgs() interface{} {
	return echo.NewABCServiceEchoUnaryArgs()
}

func newABCServiceEchoUnaryResult() interface{} {
	return echo.NewABCServiceEchoUnaryResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Echo(ctx context.Context, req1 *c.Request, req2 *c.Request) (r *c.Response, err error) {
	var _args echo.ABCServiceEchoArgs
	_args.Req1 = req1
	_args.Req2 = req2
	var _result echo.ABCServiceEchoResult
	if err = p.c.Call(ctx, "Echo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoBidirectional(ctx context.Context, req1 *c.Request) (r *c.Response, err error) {
	var _args echo.ABCServiceEchoBidirectionalArgs
	_args.Req1 = req1
	var _result echo.ABCServiceEchoBidirectionalResult
	if err = p.c.Call(ctx, "EchoBidirectional", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoServer(ctx context.Context, req1 *c.Request) (r *c.Response, err error) {
	var _args echo.ABCServiceEchoServerArgs
	_args.Req1 = req1
	var _result echo.ABCServiceEchoServerResult
	if err = p.c.Call(ctx, "EchoServer", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoClient(ctx context.Context, req1 *c.Request) (r *c.Response, err error) {
	var _args echo.ABCServiceEchoClientArgs
	_args.Req1 = req1
	var _result echo.ABCServiceEchoClientResult
	if err = p.c.Call(ctx, "EchoClient", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoUnary(ctx context.Context, req1 *c.Request) (r *c.Response, err error) {
	var _args echo.ABCServiceEchoUnaryArgs
	_args.Req1 = req1
	var _result echo.ABCServiceEchoUnaryResult
	if err = p.c.Call(ctx, "EchoUnary", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

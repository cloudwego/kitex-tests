// Code generated by Kitex v0.8.0. DO NOT EDIT.

package streamonlyservice

import (
	"context"
	echo "github.com/cloudwego/kitex-tests/thrift_streaming/kitex_gen_old/echo"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return streamOnlyServiceServiceInfo
}

var streamOnlyServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "StreamOnlyService"
	handlerType := (*echo.StreamOnlyService)(nil)
	methods := map[string]kitex.MethodInfo{
		"EchoBidirectional": kitex.NewMethodInfo(echoBidirectionalHandler, newStreamOnlyServiceEchoBidirectionalArgs, newStreamOnlyServiceEchoBidirectionalResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "echo",
		"ServiceFilePath": `idl/api.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.8.0",
		Extra:           extra,
	}
	return svcInfo
}

func echoBidirectionalHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*echo.StreamOnlyServiceEchoBidirectionalArgs)
	realResult := result.(*echo.StreamOnlyServiceEchoBidirectionalResult)
	success, err := handler.(echo.StreamOnlyService).EchoBidirectional(ctx, realArg.Req1)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newStreamOnlyServiceEchoBidirectionalArgs() interface{} {
	return echo.NewStreamOnlyServiceEchoBidirectionalArgs()
}

func newStreamOnlyServiceEchoBidirectionalResult() interface{} {
	return echo.NewStreamOnlyServiceEchoBidirectionalResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) EchoBidirectional(ctx context.Context, req1 *echo.EchoRequest) (r *echo.EchoResponse, err error) {
	var _args echo.StreamOnlyServiceEchoBidirectionalArgs
	_args.Req1 = req1
	var _result echo.StreamOnlyServiceEchoBidirectionalResult
	if err = p.c.Call(ctx, "EchoBidirectional", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

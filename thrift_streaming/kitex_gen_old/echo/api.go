// Code generated by thriftgo (0.3.4). DO NOT EDIT.

package echo

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/cloudwego/kitex-tests/thrift_streaming/kitex_gen_old/a/b/c"
	"strings"
)

type EchoRequest struct {
	Message string `thrift:"message,1,required" frugal:"1,required,string" json:"message"`
}

func NewEchoRequest() *EchoRequest {
	return &EchoRequest{}
}

func (p *EchoRequest) InitDefault() {
	*p = EchoRequest{}
}

func (p *EchoRequest) GetMessage() (v string) {
	return p.Message
}
func (p *EchoRequest) SetMessage(val string) {
	p.Message = val
}

var fieldIDToName_EchoRequest = map[int16]string{
	1: "message",
}

func (p *EchoRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetMessage bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetMessage = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetMessage {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EchoRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_EchoRequest[fieldId]))
}

func (p *EchoRequest) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *EchoRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EchoRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EchoRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EchoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoRequest(%+v)", *p)

}

func (p *EchoRequest) DeepEqual(ano *EchoRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Message) {
		return false
	}
	return true
}

func (p *EchoRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}

type EchoResponse struct {
	Message string `thrift:"message,1,required" frugal:"1,required,string" json:"message"`
}

func NewEchoResponse() *EchoResponse {
	return &EchoResponse{}
}

func (p *EchoResponse) InitDefault() {
	*p = EchoResponse{}
}

func (p *EchoResponse) GetMessage() (v string) {
	return p.Message
}
func (p *EchoResponse) SetMessage(val string) {
	p.Message = val
}

var fieldIDToName_EchoResponse = map[int16]string{
	1: "message",
}

func (p *EchoResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetMessage bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetMessage = true
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetMessage {
		fieldId = 1
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EchoResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_EchoResponse[fieldId]))
}

func (p *EchoResponse) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *EchoResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EchoResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EchoResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EchoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoResponse(%+v)", *p)

}

func (p *EchoResponse) DeepEqual(ano *EchoResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Message) {
		return false
	}
	return true
}

func (p *EchoResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}

type EchoException struct {
	Message string `thrift:"message,1" frugal:"1,default,string" json:"message"`
}

func NewEchoException() *EchoException {
	return &EchoException{}
}

func (p *EchoException) InitDefault() {
	*p = EchoException{}
}

func (p *EchoException) GetMessage() (v string) {
	return p.Message
}
func (p *EchoException) SetMessage(val string) {
	p.Message = val
}

var fieldIDToName_EchoException = map[int16]string{
	1: "message",
}

func (p *EchoException) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EchoException[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EchoException) ReadField1(iprot thrift.TProtocol) error {

	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *EchoException) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EchoException"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EchoException) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EchoException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoException(%+v)", *p)

}
func (p *EchoException) Error() string {
	return p.String()
}

func (p *EchoException) DeepEqual(ano *EchoException) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Message) {
		return false
	}
	return true
}

func (p *EchoException) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}

type EchoService interface {
	EchoBidirectional(ctx context.Context, req1 *EchoRequest) (r *EchoResponse, err error)

	EchoClient(ctx context.Context, req1 *EchoRequest) (r *EchoResponse, err error)

	EchoServer(ctx context.Context, req1 *EchoRequest) (r *EchoResponse, err error)

	EchoUnary(ctx context.Context, req1 *EchoRequest) (r *EchoResponse, err error)

	EchoPingPong(ctx context.Context, req1 *EchoRequest, req2 *EchoRequest) (r *EchoResponse, err error)

	EchoOneway(ctx context.Context, req1 *EchoRequest) (err error)

	Ping(ctx context.Context) (err error)
}

type EchoServiceClient struct {
	c thrift.TClient
}

func NewEchoServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *EchoServiceClient {
	return &EchoServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewEchoServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *EchoServiceClient {
	return &EchoServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewEchoServiceClient(c thrift.TClient) *EchoServiceClient {
	return &EchoServiceClient{
		c: c,
	}
}

func (p *EchoServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *EchoServiceClient) EchoBidirectional(ctx context.Context, req1 *EchoRequest) (r *EchoResponse, err error) {
	var _args EchoServiceEchoBidirectionalArgs
	_args.Req1 = req1
	var _result EchoServiceEchoBidirectionalResult
	if err = p.Client_().Call(ctx, "EchoBidirectional", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EchoServiceClient) EchoClient(ctx context.Context, req1 *EchoRequest) (r *EchoResponse, err error) {
	var _args EchoServiceEchoClientArgs
	_args.Req1 = req1
	var _result EchoServiceEchoClientResult
	if err = p.Client_().Call(ctx, "EchoClient", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EchoServiceClient) EchoServer(ctx context.Context, req1 *EchoRequest) (r *EchoResponse, err error) {
	var _args EchoServiceEchoServerArgs
	_args.Req1 = req1
	var _result EchoServiceEchoServerResult
	if err = p.Client_().Call(ctx, "EchoServer", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EchoServiceClient) EchoUnary(ctx context.Context, req1 *EchoRequest) (r *EchoResponse, err error) {
	var _args EchoServiceEchoUnaryArgs
	_args.Req1 = req1
	var _result EchoServiceEchoUnaryResult
	if err = p.Client_().Call(ctx, "EchoUnary", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *EchoServiceClient) EchoPingPong(ctx context.Context, req1 *EchoRequest, req2 *EchoRequest) (r *EchoResponse, err error) {
	var _args EchoServiceEchoPingPongArgs
	_args.Req1 = req1
	_args.Req2 = req2
	var _result EchoServiceEchoPingPongResult
	if err = p.Client_().Call(ctx, "EchoPingPong", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.E != nil:
		return r, _result.E
	}
	return _result.GetSuccess(), nil
}
func (p *EchoServiceClient) EchoOneway(ctx context.Context, req1 *EchoRequest) (err error) {
	var _args EchoServiceEchoOnewayArgs
	_args.Req1 = req1
	var _result EchoServiceEchoOnewayResult
	if err = p.Client_().Call(ctx, "EchoOneway", &_args, &_result); err != nil {
		return
	}
	return nil
}
func (p *EchoServiceClient) Ping(ctx context.Context) (err error) {
	var _args EchoServicePingArgs
	var _result EchoServicePingResult
	if err = p.Client_().Call(ctx, "Ping", &_args, &_result); err != nil {
		return
	}
	return nil
}

type PingPongOnlyService interface {
	EchoPingPongNew(ctx context.Context, req1 *EchoRequest) (r *EchoResponse, err error)
}

type PingPongOnlyServiceClient struct {
	c thrift.TClient
}

func NewPingPongOnlyServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *PingPongOnlyServiceClient {
	return &PingPongOnlyServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewPingPongOnlyServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *PingPongOnlyServiceClient {
	return &PingPongOnlyServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewPingPongOnlyServiceClient(c thrift.TClient) *PingPongOnlyServiceClient {
	return &PingPongOnlyServiceClient{
		c: c,
	}
}

func (p *PingPongOnlyServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *PingPongOnlyServiceClient) EchoPingPongNew(ctx context.Context, req1 *EchoRequest) (r *EchoResponse, err error) {
	var _args PingPongOnlyServiceEchoPingPongNewArgs
	_args.Req1 = req1
	var _result PingPongOnlyServiceEchoPingPongNewResult
	if err = p.Client_().Call(ctx, "EchoPingPongNew", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type PingPongOnlyServiceChild interface {
	PingPongOnlyService

	EchoBidirectionalExtended(ctx context.Context, req1 *EchoRequest) (r *EchoResponse, err error)
}

type PingPongOnlyServiceChildClient struct {
	*PingPongOnlyServiceClient
}

func NewPingPongOnlyServiceChildClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *PingPongOnlyServiceChildClient {
	return &PingPongOnlyServiceChildClient{
		PingPongOnlyServiceClient: NewPingPongOnlyServiceClientFactory(t, f),
	}
}

func NewPingPongOnlyServiceChildClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *PingPongOnlyServiceChildClient {
	return &PingPongOnlyServiceChildClient{
		PingPongOnlyServiceClient: NewPingPongOnlyServiceClientProtocol(t, iprot, oprot),
	}
}

func NewPingPongOnlyServiceChildClient(c thrift.TClient) *PingPongOnlyServiceChildClient {
	return &PingPongOnlyServiceChildClient{
		PingPongOnlyServiceClient: NewPingPongOnlyServiceClient(c),
	}
}

func (p *PingPongOnlyServiceChildClient) EchoBidirectionalExtended(ctx context.Context, req1 *EchoRequest) (r *EchoResponse, err error) {
	var _args PingPongOnlyServiceChildEchoBidirectionalExtendedArgs
	_args.Req1 = req1
	var _result PingPongOnlyServiceChildEchoBidirectionalExtendedResult
	if err = p.Client_().Call(ctx, "EchoBidirectionalExtended", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type PingPongOnlyServiceChildChild interface {
	PingPongOnlyServiceChild
}

type PingPongOnlyServiceChildChildClient struct {
	*PingPongOnlyServiceChildClient
}

func NewPingPongOnlyServiceChildChildClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *PingPongOnlyServiceChildChildClient {
	return &PingPongOnlyServiceChildChildClient{
		PingPongOnlyServiceChildClient: NewPingPongOnlyServiceChildClientFactory(t, f),
	}
}

func NewPingPongOnlyServiceChildChildClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *PingPongOnlyServiceChildChildClient {
	return &PingPongOnlyServiceChildChildClient{
		PingPongOnlyServiceChildClient: NewPingPongOnlyServiceChildClientProtocol(t, iprot, oprot),
	}
}

func NewPingPongOnlyServiceChildChildClient(c thrift.TClient) *PingPongOnlyServiceChildChildClient {
	return &PingPongOnlyServiceChildChildClient{
		PingPongOnlyServiceChildClient: NewPingPongOnlyServiceChildClient(c),
	}
}

type StreamOnlyService interface {
	EchoBidirectionalNew(ctx context.Context, req1 *EchoRequest) (r *EchoResponse, err error)
}

type StreamOnlyServiceClient struct {
	c thrift.TClient
}

func NewStreamOnlyServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *StreamOnlyServiceClient {
	return &StreamOnlyServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewStreamOnlyServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *StreamOnlyServiceClient {
	return &StreamOnlyServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewStreamOnlyServiceClient(c thrift.TClient) *StreamOnlyServiceClient {
	return &StreamOnlyServiceClient{
		c: c,
	}
}

func (p *StreamOnlyServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *StreamOnlyServiceClient) EchoBidirectionalNew(ctx context.Context, req1 *EchoRequest) (r *EchoResponse, err error) {
	var _args StreamOnlyServiceEchoBidirectionalNewArgs
	_args.Req1 = req1
	var _result StreamOnlyServiceEchoBidirectionalNewResult
	if err = p.Client_().Call(ctx, "EchoBidirectionalNew", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type StreamOnlyServiceChild interface {
	StreamOnlyService
}

type StreamOnlyServiceChildClient struct {
	*StreamOnlyServiceClient
}

func NewStreamOnlyServiceChildClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *StreamOnlyServiceChildClient {
	return &StreamOnlyServiceChildClient{
		StreamOnlyServiceClient: NewStreamOnlyServiceClientFactory(t, f),
	}
}

func NewStreamOnlyServiceChildClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *StreamOnlyServiceChildClient {
	return &StreamOnlyServiceChildClient{
		StreamOnlyServiceClient: NewStreamOnlyServiceClientProtocol(t, iprot, oprot),
	}
}

func NewStreamOnlyServiceChildClient(c thrift.TClient) *StreamOnlyServiceChildClient {
	return &StreamOnlyServiceChildClient{
		StreamOnlyServiceClient: NewStreamOnlyServiceClient(c),
	}
}

type StreamOnlyServiceChildChild interface {
	StreamOnlyServiceChild
}

type StreamOnlyServiceChildChildClient struct {
	*StreamOnlyServiceChildClient
}

func NewStreamOnlyServiceChildChildClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *StreamOnlyServiceChildChildClient {
	return &StreamOnlyServiceChildChildClient{
		StreamOnlyServiceChildClient: NewStreamOnlyServiceChildClientFactory(t, f),
	}
}

func NewStreamOnlyServiceChildChildClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *StreamOnlyServiceChildChildClient {
	return &StreamOnlyServiceChildChildClient{
		StreamOnlyServiceChildClient: NewStreamOnlyServiceChildClientProtocol(t, iprot, oprot),
	}
}

func NewStreamOnlyServiceChildChildClient(c thrift.TClient) *StreamOnlyServiceChildChildClient {
	return &StreamOnlyServiceChildChildClient{
		StreamOnlyServiceChildClient: NewStreamOnlyServiceChildClient(c),
	}
}

type ABCService interface {
	Echo(ctx context.Context, req1 *c.Request, req2 *c.Request) (r *c.Response, err error)

	EchoBidirectional(ctx context.Context, req1 *c.Request) (r *c.Response, err error)

	EchoServer(ctx context.Context, req1 *c.Request) (r *c.Response, err error)

	EchoClient(ctx context.Context, req1 *c.Request) (r *c.Response, err error)

	EchoUnary(ctx context.Context, req1 *c.Request) (r *c.Response, err error)
}

type ABCServiceClient struct {
	c thrift.TClient
}

func NewABCServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ABCServiceClient {
	return &ABCServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewABCServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ABCServiceClient {
	return &ABCServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewABCServiceClient(c thrift.TClient) *ABCServiceClient {
	return &ABCServiceClient{
		c: c,
	}
}

func (p *ABCServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *ABCServiceClient) Echo(ctx context.Context, req1 *c.Request, req2 *c.Request) (r *c.Response, err error) {
	var _args ABCServiceEchoArgs
	_args.Req1 = req1
	_args.Req2 = req2
	var _result ABCServiceEchoResult
	if err = p.Client_().Call(ctx, "Echo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ABCServiceClient) EchoBidirectional(ctx context.Context, req1 *c.Request) (r *c.Response, err error) {
	var _args ABCServiceEchoBidirectionalArgs
	_args.Req1 = req1
	var _result ABCServiceEchoBidirectionalResult
	if err = p.Client_().Call(ctx, "EchoBidirectional", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ABCServiceClient) EchoServer(ctx context.Context, req1 *c.Request) (r *c.Response, err error) {
	var _args ABCServiceEchoServerArgs
	_args.Req1 = req1
	var _result ABCServiceEchoServerResult
	if err = p.Client_().Call(ctx, "EchoServer", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ABCServiceClient) EchoClient(ctx context.Context, req1 *c.Request) (r *c.Response, err error) {
	var _args ABCServiceEchoClientArgs
	_args.Req1 = req1
	var _result ABCServiceEchoClientResult
	if err = p.Client_().Call(ctx, "EchoClient", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *ABCServiceClient) EchoUnary(ctx context.Context, req1 *c.Request) (r *c.Response, err error) {
	var _args ABCServiceEchoUnaryArgs
	_args.Req1 = req1
	var _result ABCServiceEchoUnaryResult
	if err = p.Client_().Call(ctx, "EchoUnary", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type EchoServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      EchoService
}

func (p *EchoServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *EchoServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *EchoServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewEchoServiceProcessor(handler EchoService) *EchoServiceProcessor {
	self := &EchoServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("EchoBidirectional", &echoServiceProcessorEchoBidirectional{handler: handler})
	self.AddToProcessorMap("EchoClient", &echoServiceProcessorEchoClient{handler: handler})
	self.AddToProcessorMap("EchoServer", &echoServiceProcessorEchoServer{handler: handler})
	self.AddToProcessorMap("EchoUnary", &echoServiceProcessorEchoUnary{handler: handler})
	self.AddToProcessorMap("EchoPingPong", &echoServiceProcessorEchoPingPong{handler: handler})
	self.AddToProcessorMap("EchoOneway", &echoServiceProcessorEchoOneway{handler: handler})
	self.AddToProcessorMap("Ping", &echoServiceProcessorPing{handler: handler})
	return self
}
func (p *EchoServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type echoServiceProcessorEchoBidirectional struct {
	handler EchoService
}

func (p *echoServiceProcessorEchoBidirectional) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EchoServiceEchoBidirectionalArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("EchoBidirectional", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EchoServiceEchoBidirectionalResult{}
	var retval *EchoResponse
	if retval, err2 = p.handler.EchoBidirectional(ctx, args.Req1); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing EchoBidirectional: "+err2.Error())
		oprot.WriteMessageBegin("EchoBidirectional", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("EchoBidirectional", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type echoServiceProcessorEchoClient struct {
	handler EchoService
}

func (p *echoServiceProcessorEchoClient) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EchoServiceEchoClientArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("EchoClient", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EchoServiceEchoClientResult{}
	var retval *EchoResponse
	if retval, err2 = p.handler.EchoClient(ctx, args.Req1); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing EchoClient: "+err2.Error())
		oprot.WriteMessageBegin("EchoClient", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("EchoClient", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type echoServiceProcessorEchoServer struct {
	handler EchoService
}

func (p *echoServiceProcessorEchoServer) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EchoServiceEchoServerArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("EchoServer", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EchoServiceEchoServerResult{}
	var retval *EchoResponse
	if retval, err2 = p.handler.EchoServer(ctx, args.Req1); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing EchoServer: "+err2.Error())
		oprot.WriteMessageBegin("EchoServer", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("EchoServer", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type echoServiceProcessorEchoUnary struct {
	handler EchoService
}

func (p *echoServiceProcessorEchoUnary) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EchoServiceEchoUnaryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("EchoUnary", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EchoServiceEchoUnaryResult{}
	var retval *EchoResponse
	if retval, err2 = p.handler.EchoUnary(ctx, args.Req1); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing EchoUnary: "+err2.Error())
		oprot.WriteMessageBegin("EchoUnary", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("EchoUnary", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type echoServiceProcessorEchoPingPong struct {
	handler EchoService
}

func (p *echoServiceProcessorEchoPingPong) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EchoServiceEchoPingPongArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("EchoPingPong", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EchoServiceEchoPingPongResult{}
	var retval *EchoResponse
	if retval, err2 = p.handler.EchoPingPong(ctx, args.Req1, args.Req2); err2 != nil {
		switch v := err2.(type) {
		case *EchoException:
			result.E = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing EchoPingPong: "+err2.Error())
			oprot.WriteMessageBegin("EchoPingPong", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("EchoPingPong", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type echoServiceProcessorEchoOneway struct {
	handler EchoService
}

func (p *echoServiceProcessorEchoOneway) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EchoServiceEchoOnewayArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("EchoOneway", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EchoServiceEchoOnewayResult{}
	if err2 = p.handler.EchoOneway(ctx, args.Req1); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing EchoOneway: "+err2.Error())
		oprot.WriteMessageBegin("EchoOneway", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("EchoOneway", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type echoServiceProcessorPing struct {
	handler EchoService
}

func (p *echoServiceProcessorPing) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := EchoServicePingArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Ping", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := EchoServicePingResult{}
	if err2 = p.handler.Ping(ctx); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Ping: "+err2.Error())
		oprot.WriteMessageBegin("Ping", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	}
	if err2 = oprot.WriteMessageBegin("Ping", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type EchoServiceEchoBidirectionalArgs struct {
	Req1 *EchoRequest `thrift:"req1,1" frugal:"1,default,EchoRequest" json:"req1"`
}

func NewEchoServiceEchoBidirectionalArgs() *EchoServiceEchoBidirectionalArgs {
	return &EchoServiceEchoBidirectionalArgs{}
}

func (p *EchoServiceEchoBidirectionalArgs) InitDefault() {
	*p = EchoServiceEchoBidirectionalArgs{}
}

var EchoServiceEchoBidirectionalArgs_Req1_DEFAULT *EchoRequest

func (p *EchoServiceEchoBidirectionalArgs) GetReq1() (v *EchoRequest) {
	if !p.IsSetReq1() {
		return EchoServiceEchoBidirectionalArgs_Req1_DEFAULT
	}
	return p.Req1
}
func (p *EchoServiceEchoBidirectionalArgs) SetReq1(val *EchoRequest) {
	p.Req1 = val
}

var fieldIDToName_EchoServiceEchoBidirectionalArgs = map[int16]string{
	1: "req1",
}

func (p *EchoServiceEchoBidirectionalArgs) IsSetReq1() bool {
	return p.Req1 != nil
}

func (p *EchoServiceEchoBidirectionalArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EchoServiceEchoBidirectionalArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EchoServiceEchoBidirectionalArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req1 = NewEchoRequest()
	if err := p.Req1.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *EchoServiceEchoBidirectionalArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EchoBidirectional_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EchoServiceEchoBidirectionalArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req1", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req1.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EchoServiceEchoBidirectionalArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoServiceEchoBidirectionalArgs(%+v)", *p)

}

func (p *EchoServiceEchoBidirectionalArgs) DeepEqual(ano *EchoServiceEchoBidirectionalArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req1) {
		return false
	}
	return true
}

func (p *EchoServiceEchoBidirectionalArgs) Field1DeepEqual(src *EchoRequest) bool {

	if !p.Req1.DeepEqual(src) {
		return false
	}
	return true
}

type EchoServiceEchoBidirectionalResult struct {
	Success *EchoResponse `thrift:"success,0,optional" frugal:"0,optional,EchoResponse" json:"success,omitempty"`
}

func NewEchoServiceEchoBidirectionalResult() *EchoServiceEchoBidirectionalResult {
	return &EchoServiceEchoBidirectionalResult{}
}

func (p *EchoServiceEchoBidirectionalResult) InitDefault() {
	*p = EchoServiceEchoBidirectionalResult{}
}

var EchoServiceEchoBidirectionalResult_Success_DEFAULT *EchoResponse

func (p *EchoServiceEchoBidirectionalResult) GetSuccess() (v *EchoResponse) {
	if !p.IsSetSuccess() {
		return EchoServiceEchoBidirectionalResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EchoServiceEchoBidirectionalResult) SetSuccess(x interface{}) {
	p.Success = x.(*EchoResponse)
}

var fieldIDToName_EchoServiceEchoBidirectionalResult = map[int16]string{
	0: "success",
}

func (p *EchoServiceEchoBidirectionalResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EchoServiceEchoBidirectionalResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EchoServiceEchoBidirectionalResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EchoServiceEchoBidirectionalResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewEchoResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *EchoServiceEchoBidirectionalResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EchoBidirectional_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EchoServiceEchoBidirectionalResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EchoServiceEchoBidirectionalResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoServiceEchoBidirectionalResult(%+v)", *p)

}

func (p *EchoServiceEchoBidirectionalResult) DeepEqual(ano *EchoServiceEchoBidirectionalResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EchoServiceEchoBidirectionalResult) Field0DeepEqual(src *EchoResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EchoServiceEchoClientArgs struct {
	Req1 *EchoRequest `thrift:"req1,1" frugal:"1,default,EchoRequest" json:"req1"`
}

func NewEchoServiceEchoClientArgs() *EchoServiceEchoClientArgs {
	return &EchoServiceEchoClientArgs{}
}

func (p *EchoServiceEchoClientArgs) InitDefault() {
	*p = EchoServiceEchoClientArgs{}
}

var EchoServiceEchoClientArgs_Req1_DEFAULT *EchoRequest

func (p *EchoServiceEchoClientArgs) GetReq1() (v *EchoRequest) {
	if !p.IsSetReq1() {
		return EchoServiceEchoClientArgs_Req1_DEFAULT
	}
	return p.Req1
}
func (p *EchoServiceEchoClientArgs) SetReq1(val *EchoRequest) {
	p.Req1 = val
}

var fieldIDToName_EchoServiceEchoClientArgs = map[int16]string{
	1: "req1",
}

func (p *EchoServiceEchoClientArgs) IsSetReq1() bool {
	return p.Req1 != nil
}

func (p *EchoServiceEchoClientArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EchoServiceEchoClientArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EchoServiceEchoClientArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req1 = NewEchoRequest()
	if err := p.Req1.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *EchoServiceEchoClientArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EchoClient_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EchoServiceEchoClientArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req1", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req1.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EchoServiceEchoClientArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoServiceEchoClientArgs(%+v)", *p)

}

func (p *EchoServiceEchoClientArgs) DeepEqual(ano *EchoServiceEchoClientArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req1) {
		return false
	}
	return true
}

func (p *EchoServiceEchoClientArgs) Field1DeepEqual(src *EchoRequest) bool {

	if !p.Req1.DeepEqual(src) {
		return false
	}
	return true
}

type EchoServiceEchoClientResult struct {
	Success *EchoResponse `thrift:"success,0,optional" frugal:"0,optional,EchoResponse" json:"success,omitempty"`
}

func NewEchoServiceEchoClientResult() *EchoServiceEchoClientResult {
	return &EchoServiceEchoClientResult{}
}

func (p *EchoServiceEchoClientResult) InitDefault() {
	*p = EchoServiceEchoClientResult{}
}

var EchoServiceEchoClientResult_Success_DEFAULT *EchoResponse

func (p *EchoServiceEchoClientResult) GetSuccess() (v *EchoResponse) {
	if !p.IsSetSuccess() {
		return EchoServiceEchoClientResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EchoServiceEchoClientResult) SetSuccess(x interface{}) {
	p.Success = x.(*EchoResponse)
}

var fieldIDToName_EchoServiceEchoClientResult = map[int16]string{
	0: "success",
}

func (p *EchoServiceEchoClientResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EchoServiceEchoClientResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EchoServiceEchoClientResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EchoServiceEchoClientResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewEchoResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *EchoServiceEchoClientResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EchoClient_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EchoServiceEchoClientResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EchoServiceEchoClientResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoServiceEchoClientResult(%+v)", *p)

}

func (p *EchoServiceEchoClientResult) DeepEqual(ano *EchoServiceEchoClientResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EchoServiceEchoClientResult) Field0DeepEqual(src *EchoResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EchoServiceEchoServerArgs struct {
	Req1 *EchoRequest `thrift:"req1,1" frugal:"1,default,EchoRequest" json:"req1"`
}

func NewEchoServiceEchoServerArgs() *EchoServiceEchoServerArgs {
	return &EchoServiceEchoServerArgs{}
}

func (p *EchoServiceEchoServerArgs) InitDefault() {
	*p = EchoServiceEchoServerArgs{}
}

var EchoServiceEchoServerArgs_Req1_DEFAULT *EchoRequest

func (p *EchoServiceEchoServerArgs) GetReq1() (v *EchoRequest) {
	if !p.IsSetReq1() {
		return EchoServiceEchoServerArgs_Req1_DEFAULT
	}
	return p.Req1
}
func (p *EchoServiceEchoServerArgs) SetReq1(val *EchoRequest) {
	p.Req1 = val
}

var fieldIDToName_EchoServiceEchoServerArgs = map[int16]string{
	1: "req1",
}

func (p *EchoServiceEchoServerArgs) IsSetReq1() bool {
	return p.Req1 != nil
}

func (p *EchoServiceEchoServerArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EchoServiceEchoServerArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EchoServiceEchoServerArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req1 = NewEchoRequest()
	if err := p.Req1.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *EchoServiceEchoServerArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EchoServer_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EchoServiceEchoServerArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req1", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req1.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EchoServiceEchoServerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoServiceEchoServerArgs(%+v)", *p)

}

func (p *EchoServiceEchoServerArgs) DeepEqual(ano *EchoServiceEchoServerArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req1) {
		return false
	}
	return true
}

func (p *EchoServiceEchoServerArgs) Field1DeepEqual(src *EchoRequest) bool {

	if !p.Req1.DeepEqual(src) {
		return false
	}
	return true
}

type EchoServiceEchoServerResult struct {
	Success *EchoResponse `thrift:"success,0,optional" frugal:"0,optional,EchoResponse" json:"success,omitempty"`
}

func NewEchoServiceEchoServerResult() *EchoServiceEchoServerResult {
	return &EchoServiceEchoServerResult{}
}

func (p *EchoServiceEchoServerResult) InitDefault() {
	*p = EchoServiceEchoServerResult{}
}

var EchoServiceEchoServerResult_Success_DEFAULT *EchoResponse

func (p *EchoServiceEchoServerResult) GetSuccess() (v *EchoResponse) {
	if !p.IsSetSuccess() {
		return EchoServiceEchoServerResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EchoServiceEchoServerResult) SetSuccess(x interface{}) {
	p.Success = x.(*EchoResponse)
}

var fieldIDToName_EchoServiceEchoServerResult = map[int16]string{
	0: "success",
}

func (p *EchoServiceEchoServerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EchoServiceEchoServerResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EchoServiceEchoServerResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EchoServiceEchoServerResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewEchoResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *EchoServiceEchoServerResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EchoServer_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EchoServiceEchoServerResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EchoServiceEchoServerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoServiceEchoServerResult(%+v)", *p)

}

func (p *EchoServiceEchoServerResult) DeepEqual(ano *EchoServiceEchoServerResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EchoServiceEchoServerResult) Field0DeepEqual(src *EchoResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EchoServiceEchoUnaryArgs struct {
	Req1 *EchoRequest `thrift:"req1,1" frugal:"1,default,EchoRequest" json:"req1"`
}

func NewEchoServiceEchoUnaryArgs() *EchoServiceEchoUnaryArgs {
	return &EchoServiceEchoUnaryArgs{}
}

func (p *EchoServiceEchoUnaryArgs) InitDefault() {
	*p = EchoServiceEchoUnaryArgs{}
}

var EchoServiceEchoUnaryArgs_Req1_DEFAULT *EchoRequest

func (p *EchoServiceEchoUnaryArgs) GetReq1() (v *EchoRequest) {
	if !p.IsSetReq1() {
		return EchoServiceEchoUnaryArgs_Req1_DEFAULT
	}
	return p.Req1
}
func (p *EchoServiceEchoUnaryArgs) SetReq1(val *EchoRequest) {
	p.Req1 = val
}

var fieldIDToName_EchoServiceEchoUnaryArgs = map[int16]string{
	1: "req1",
}

func (p *EchoServiceEchoUnaryArgs) IsSetReq1() bool {
	return p.Req1 != nil
}

func (p *EchoServiceEchoUnaryArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EchoServiceEchoUnaryArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EchoServiceEchoUnaryArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req1 = NewEchoRequest()
	if err := p.Req1.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *EchoServiceEchoUnaryArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EchoUnary_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EchoServiceEchoUnaryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req1", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req1.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EchoServiceEchoUnaryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoServiceEchoUnaryArgs(%+v)", *p)

}

func (p *EchoServiceEchoUnaryArgs) DeepEqual(ano *EchoServiceEchoUnaryArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req1) {
		return false
	}
	return true
}

func (p *EchoServiceEchoUnaryArgs) Field1DeepEqual(src *EchoRequest) bool {

	if !p.Req1.DeepEqual(src) {
		return false
	}
	return true
}

type EchoServiceEchoUnaryResult struct {
	Success *EchoResponse `thrift:"success,0,optional" frugal:"0,optional,EchoResponse" json:"success,omitempty"`
}

func NewEchoServiceEchoUnaryResult() *EchoServiceEchoUnaryResult {
	return &EchoServiceEchoUnaryResult{}
}

func (p *EchoServiceEchoUnaryResult) InitDefault() {
	*p = EchoServiceEchoUnaryResult{}
}

var EchoServiceEchoUnaryResult_Success_DEFAULT *EchoResponse

func (p *EchoServiceEchoUnaryResult) GetSuccess() (v *EchoResponse) {
	if !p.IsSetSuccess() {
		return EchoServiceEchoUnaryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EchoServiceEchoUnaryResult) SetSuccess(x interface{}) {
	p.Success = x.(*EchoResponse)
}

var fieldIDToName_EchoServiceEchoUnaryResult = map[int16]string{
	0: "success",
}

func (p *EchoServiceEchoUnaryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EchoServiceEchoUnaryResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EchoServiceEchoUnaryResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EchoServiceEchoUnaryResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewEchoResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *EchoServiceEchoUnaryResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EchoUnary_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EchoServiceEchoUnaryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EchoServiceEchoUnaryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoServiceEchoUnaryResult(%+v)", *p)

}

func (p *EchoServiceEchoUnaryResult) DeepEqual(ano *EchoServiceEchoUnaryResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EchoServiceEchoUnaryResult) Field0DeepEqual(src *EchoResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type EchoServiceEchoPingPongArgs struct {
	Req1 *EchoRequest `thrift:"req1,1" frugal:"1,default,EchoRequest" json:"req1"`
	Req2 *EchoRequest `thrift:"req2,2" frugal:"2,default,EchoRequest" json:"req2"`
}

func NewEchoServiceEchoPingPongArgs() *EchoServiceEchoPingPongArgs {
	return &EchoServiceEchoPingPongArgs{}
}

func (p *EchoServiceEchoPingPongArgs) InitDefault() {
	*p = EchoServiceEchoPingPongArgs{}
}

var EchoServiceEchoPingPongArgs_Req1_DEFAULT *EchoRequest

func (p *EchoServiceEchoPingPongArgs) GetReq1() (v *EchoRequest) {
	if !p.IsSetReq1() {
		return EchoServiceEchoPingPongArgs_Req1_DEFAULT
	}
	return p.Req1
}

var EchoServiceEchoPingPongArgs_Req2_DEFAULT *EchoRequest

func (p *EchoServiceEchoPingPongArgs) GetReq2() (v *EchoRequest) {
	if !p.IsSetReq2() {
		return EchoServiceEchoPingPongArgs_Req2_DEFAULT
	}
	return p.Req2
}
func (p *EchoServiceEchoPingPongArgs) SetReq1(val *EchoRequest) {
	p.Req1 = val
}
func (p *EchoServiceEchoPingPongArgs) SetReq2(val *EchoRequest) {
	p.Req2 = val
}

var fieldIDToName_EchoServiceEchoPingPongArgs = map[int16]string{
	1: "req1",
	2: "req2",
}

func (p *EchoServiceEchoPingPongArgs) IsSetReq1() bool {
	return p.Req1 != nil
}

func (p *EchoServiceEchoPingPongArgs) IsSetReq2() bool {
	return p.Req2 != nil
}

func (p *EchoServiceEchoPingPongArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EchoServiceEchoPingPongArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EchoServiceEchoPingPongArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req1 = NewEchoRequest()
	if err := p.Req1.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *EchoServiceEchoPingPongArgs) ReadField2(iprot thrift.TProtocol) error {
	p.Req2 = NewEchoRequest()
	if err := p.Req2.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *EchoServiceEchoPingPongArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EchoPingPong_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EchoServiceEchoPingPongArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req1", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req1.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EchoServiceEchoPingPongArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req2", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req2.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *EchoServiceEchoPingPongArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoServiceEchoPingPongArgs(%+v)", *p)

}

func (p *EchoServiceEchoPingPongArgs) DeepEqual(ano *EchoServiceEchoPingPongArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req1) {
		return false
	}
	if !p.Field2DeepEqual(ano.Req2) {
		return false
	}
	return true
}

func (p *EchoServiceEchoPingPongArgs) Field1DeepEqual(src *EchoRequest) bool {

	if !p.Req1.DeepEqual(src) {
		return false
	}
	return true
}
func (p *EchoServiceEchoPingPongArgs) Field2DeepEqual(src *EchoRequest) bool {

	if !p.Req2.DeepEqual(src) {
		return false
	}
	return true
}

type EchoServiceEchoPingPongResult struct {
	Success *EchoResponse  `thrift:"success,0,optional" frugal:"0,optional,EchoResponse" json:"success,omitempty"`
	E       *EchoException `thrift:"e,1,optional" frugal:"1,optional,EchoException" json:"e,omitempty"`
}

func NewEchoServiceEchoPingPongResult() *EchoServiceEchoPingPongResult {
	return &EchoServiceEchoPingPongResult{}
}

func (p *EchoServiceEchoPingPongResult) InitDefault() {
	*p = EchoServiceEchoPingPongResult{}
}

var EchoServiceEchoPingPongResult_Success_DEFAULT *EchoResponse

func (p *EchoServiceEchoPingPongResult) GetSuccess() (v *EchoResponse) {
	if !p.IsSetSuccess() {
		return EchoServiceEchoPingPongResult_Success_DEFAULT
	}
	return p.Success
}

var EchoServiceEchoPingPongResult_E_DEFAULT *EchoException

func (p *EchoServiceEchoPingPongResult) GetE() (v *EchoException) {
	if !p.IsSetE() {
		return EchoServiceEchoPingPongResult_E_DEFAULT
	}
	return p.E
}
func (p *EchoServiceEchoPingPongResult) SetSuccess(x interface{}) {
	p.Success = x.(*EchoResponse)
}
func (p *EchoServiceEchoPingPongResult) SetE(val *EchoException) {
	p.E = val
}

var fieldIDToName_EchoServiceEchoPingPongResult = map[int16]string{
	0: "success",
	1: "e",
}

func (p *EchoServiceEchoPingPongResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EchoServiceEchoPingPongResult) IsSetE() bool {
	return p.E != nil
}

func (p *EchoServiceEchoPingPongResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EchoServiceEchoPingPongResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EchoServiceEchoPingPongResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewEchoResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *EchoServiceEchoPingPongResult) ReadField1(iprot thrift.TProtocol) error {
	p.E = NewEchoException()
	if err := p.E.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *EchoServiceEchoPingPongResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EchoPingPong_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EchoServiceEchoPingPongResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *EchoServiceEchoPingPongResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetE() {
		if err = oprot.WriteFieldBegin("e", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.E.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EchoServiceEchoPingPongResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoServiceEchoPingPongResult(%+v)", *p)

}

func (p *EchoServiceEchoPingPongResult) DeepEqual(ano *EchoServiceEchoPingPongResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.E) {
		return false
	}
	return true
}

func (p *EchoServiceEchoPingPongResult) Field0DeepEqual(src *EchoResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *EchoServiceEchoPingPongResult) Field1DeepEqual(src *EchoException) bool {

	if !p.E.DeepEqual(src) {
		return false
	}
	return true
}

type EchoServiceEchoOnewayArgs struct {
	Req1 *EchoRequest `thrift:"req1,1" frugal:"1,default,EchoRequest" json:"req1"`
}

func NewEchoServiceEchoOnewayArgs() *EchoServiceEchoOnewayArgs {
	return &EchoServiceEchoOnewayArgs{}
}

func (p *EchoServiceEchoOnewayArgs) InitDefault() {
	*p = EchoServiceEchoOnewayArgs{}
}

var EchoServiceEchoOnewayArgs_Req1_DEFAULT *EchoRequest

func (p *EchoServiceEchoOnewayArgs) GetReq1() (v *EchoRequest) {
	if !p.IsSetReq1() {
		return EchoServiceEchoOnewayArgs_Req1_DEFAULT
	}
	return p.Req1
}
func (p *EchoServiceEchoOnewayArgs) SetReq1(val *EchoRequest) {
	p.Req1 = val
}

var fieldIDToName_EchoServiceEchoOnewayArgs = map[int16]string{
	1: "req1",
}

func (p *EchoServiceEchoOnewayArgs) IsSetReq1() bool {
	return p.Req1 != nil
}

func (p *EchoServiceEchoOnewayArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_EchoServiceEchoOnewayArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EchoServiceEchoOnewayArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req1 = NewEchoRequest()
	if err := p.Req1.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *EchoServiceEchoOnewayArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EchoOneway_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EchoServiceEchoOnewayArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req1", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req1.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *EchoServiceEchoOnewayArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoServiceEchoOnewayArgs(%+v)", *p)

}

func (p *EchoServiceEchoOnewayArgs) DeepEqual(ano *EchoServiceEchoOnewayArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req1) {
		return false
	}
	return true
}

func (p *EchoServiceEchoOnewayArgs) Field1DeepEqual(src *EchoRequest) bool {

	if !p.Req1.DeepEqual(src) {
		return false
	}
	return true
}

type EchoServiceEchoOnewayResult struct {
}

func NewEchoServiceEchoOnewayResult() *EchoServiceEchoOnewayResult {
	return &EchoServiceEchoOnewayResult{}
}

func (p *EchoServiceEchoOnewayResult) InitDefault() {
	*p = EchoServiceEchoOnewayResult{}
}

var fieldIDToName_EchoServiceEchoOnewayResult = map[int16]string{}

func (p *EchoServiceEchoOnewayResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EchoServiceEchoOnewayResult) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("EchoOneway_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EchoServiceEchoOnewayResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoServiceEchoOnewayResult(%+v)", *p)

}

func (p *EchoServiceEchoOnewayResult) DeepEqual(ano *EchoServiceEchoOnewayResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type EchoServicePingArgs struct {
}

func NewEchoServicePingArgs() *EchoServicePingArgs {
	return &EchoServicePingArgs{}
}

func (p *EchoServicePingArgs) InitDefault() {
	*p = EchoServicePingArgs{}
}

var fieldIDToName_EchoServicePingArgs = map[int16]string{}

func (p *EchoServicePingArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EchoServicePingArgs) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("Ping_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EchoServicePingArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoServicePingArgs(%+v)", *p)

}

func (p *EchoServicePingArgs) DeepEqual(ano *EchoServicePingArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type EchoServicePingResult struct {
}

func NewEchoServicePingResult() *EchoServicePingResult {
	return &EchoServicePingResult{}
}

func (p *EchoServicePingResult) InitDefault() {
	*p = EchoServicePingResult{}
}

var fieldIDToName_EchoServicePingResult = map[int16]string{}

func (p *EchoServicePingResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		if err = iprot.Skip(fieldTypeId); err != nil {
			goto SkipFieldTypeError
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
SkipFieldTypeError:
	return thrift.PrependError(fmt.Sprintf("%T skip field type %d error", p, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *EchoServicePingResult) Write(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteStructBegin("Ping_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *EchoServicePingResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoServicePingResult(%+v)", *p)

}

func (p *EchoServicePingResult) DeepEqual(ano *EchoServicePingResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	return true
}

type PingPongOnlyServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      PingPongOnlyService
}

func (p *PingPongOnlyServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *PingPongOnlyServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *PingPongOnlyServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewPingPongOnlyServiceProcessor(handler PingPongOnlyService) *PingPongOnlyServiceProcessor {
	self := &PingPongOnlyServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("EchoPingPongNew", &pingPongOnlyServiceProcessorEchoPingPongNew{handler: handler})
	return self
}
func (p *PingPongOnlyServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type pingPongOnlyServiceProcessorEchoPingPongNew struct {
	handler PingPongOnlyService
}

func (p *pingPongOnlyServiceProcessorEchoPingPongNew) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PingPongOnlyServiceEchoPingPongNewArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("EchoPingPongNew", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PingPongOnlyServiceEchoPingPongNewResult{}
	var retval *EchoResponse
	if retval, err2 = p.handler.EchoPingPongNew(ctx, args.Req1); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing EchoPingPongNew: "+err2.Error())
		oprot.WriteMessageBegin("EchoPingPongNew", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("EchoPingPongNew", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type PingPongOnlyServiceEchoPingPongNewArgs struct {
	Req1 *EchoRequest `thrift:"req1,1" frugal:"1,default,EchoRequest" json:"req1"`
}

func NewPingPongOnlyServiceEchoPingPongNewArgs() *PingPongOnlyServiceEchoPingPongNewArgs {
	return &PingPongOnlyServiceEchoPingPongNewArgs{}
}

func (p *PingPongOnlyServiceEchoPingPongNewArgs) InitDefault() {
	*p = PingPongOnlyServiceEchoPingPongNewArgs{}
}

var PingPongOnlyServiceEchoPingPongNewArgs_Req1_DEFAULT *EchoRequest

func (p *PingPongOnlyServiceEchoPingPongNewArgs) GetReq1() (v *EchoRequest) {
	if !p.IsSetReq1() {
		return PingPongOnlyServiceEchoPingPongNewArgs_Req1_DEFAULT
	}
	return p.Req1
}
func (p *PingPongOnlyServiceEchoPingPongNewArgs) SetReq1(val *EchoRequest) {
	p.Req1 = val
}

var fieldIDToName_PingPongOnlyServiceEchoPingPongNewArgs = map[int16]string{
	1: "req1",
}

func (p *PingPongOnlyServiceEchoPingPongNewArgs) IsSetReq1() bool {
	return p.Req1 != nil
}

func (p *PingPongOnlyServiceEchoPingPongNewArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PingPongOnlyServiceEchoPingPongNewArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PingPongOnlyServiceEchoPingPongNewArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req1 = NewEchoRequest()
	if err := p.Req1.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PingPongOnlyServiceEchoPingPongNewArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EchoPingPongNew_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PingPongOnlyServiceEchoPingPongNewArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req1", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req1.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PingPongOnlyServiceEchoPingPongNewArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PingPongOnlyServiceEchoPingPongNewArgs(%+v)", *p)

}

func (p *PingPongOnlyServiceEchoPingPongNewArgs) DeepEqual(ano *PingPongOnlyServiceEchoPingPongNewArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req1) {
		return false
	}
	return true
}

func (p *PingPongOnlyServiceEchoPingPongNewArgs) Field1DeepEqual(src *EchoRequest) bool {

	if !p.Req1.DeepEqual(src) {
		return false
	}
	return true
}

type PingPongOnlyServiceEchoPingPongNewResult struct {
	Success *EchoResponse `thrift:"success,0,optional" frugal:"0,optional,EchoResponse" json:"success,omitempty"`
}

func NewPingPongOnlyServiceEchoPingPongNewResult() *PingPongOnlyServiceEchoPingPongNewResult {
	return &PingPongOnlyServiceEchoPingPongNewResult{}
}

func (p *PingPongOnlyServiceEchoPingPongNewResult) InitDefault() {
	*p = PingPongOnlyServiceEchoPingPongNewResult{}
}

var PingPongOnlyServiceEchoPingPongNewResult_Success_DEFAULT *EchoResponse

func (p *PingPongOnlyServiceEchoPingPongNewResult) GetSuccess() (v *EchoResponse) {
	if !p.IsSetSuccess() {
		return PingPongOnlyServiceEchoPingPongNewResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PingPongOnlyServiceEchoPingPongNewResult) SetSuccess(x interface{}) {
	p.Success = x.(*EchoResponse)
}

var fieldIDToName_PingPongOnlyServiceEchoPingPongNewResult = map[int16]string{
	0: "success",
}

func (p *PingPongOnlyServiceEchoPingPongNewResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PingPongOnlyServiceEchoPingPongNewResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PingPongOnlyServiceEchoPingPongNewResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PingPongOnlyServiceEchoPingPongNewResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewEchoResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PingPongOnlyServiceEchoPingPongNewResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EchoPingPongNew_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PingPongOnlyServiceEchoPingPongNewResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PingPongOnlyServiceEchoPingPongNewResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PingPongOnlyServiceEchoPingPongNewResult(%+v)", *p)

}

func (p *PingPongOnlyServiceEchoPingPongNewResult) DeepEqual(ano *PingPongOnlyServiceEchoPingPongNewResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PingPongOnlyServiceEchoPingPongNewResult) Field0DeepEqual(src *EchoResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PingPongOnlyServiceChildProcessor struct {
	*PingPongOnlyServiceProcessor
}

func NewPingPongOnlyServiceChildProcessor(handler PingPongOnlyServiceChild) *PingPongOnlyServiceChildProcessor {
	self := &PingPongOnlyServiceChildProcessor{NewPingPongOnlyServiceProcessor(handler)}
	self.AddToProcessorMap("EchoBidirectionalExtended", &pingPongOnlyServiceChildProcessorEchoBidirectionalExtended{handler: handler})
	return self
}

type pingPongOnlyServiceChildProcessorEchoBidirectionalExtended struct {
	handler PingPongOnlyServiceChild
}

func (p *pingPongOnlyServiceChildProcessorEchoBidirectionalExtended) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := PingPongOnlyServiceChildEchoBidirectionalExtendedArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("EchoBidirectionalExtended", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := PingPongOnlyServiceChildEchoBidirectionalExtendedResult{}
	var retval *EchoResponse
	if retval, err2 = p.handler.EchoBidirectionalExtended(ctx, args.Req1); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing EchoBidirectionalExtended: "+err2.Error())
		oprot.WriteMessageBegin("EchoBidirectionalExtended", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("EchoBidirectionalExtended", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type PingPongOnlyServiceChildEchoBidirectionalExtendedArgs struct {
	Req1 *EchoRequest `thrift:"req1,1" frugal:"1,default,EchoRequest" json:"req1"`
}

func NewPingPongOnlyServiceChildEchoBidirectionalExtendedArgs() *PingPongOnlyServiceChildEchoBidirectionalExtendedArgs {
	return &PingPongOnlyServiceChildEchoBidirectionalExtendedArgs{}
}

func (p *PingPongOnlyServiceChildEchoBidirectionalExtendedArgs) InitDefault() {
	*p = PingPongOnlyServiceChildEchoBidirectionalExtendedArgs{}
}

var PingPongOnlyServiceChildEchoBidirectionalExtendedArgs_Req1_DEFAULT *EchoRequest

func (p *PingPongOnlyServiceChildEchoBidirectionalExtendedArgs) GetReq1() (v *EchoRequest) {
	if !p.IsSetReq1() {
		return PingPongOnlyServiceChildEchoBidirectionalExtendedArgs_Req1_DEFAULT
	}
	return p.Req1
}
func (p *PingPongOnlyServiceChildEchoBidirectionalExtendedArgs) SetReq1(val *EchoRequest) {
	p.Req1 = val
}

var fieldIDToName_PingPongOnlyServiceChildEchoBidirectionalExtendedArgs = map[int16]string{
	1: "req1",
}

func (p *PingPongOnlyServiceChildEchoBidirectionalExtendedArgs) IsSetReq1() bool {
	return p.Req1 != nil
}

func (p *PingPongOnlyServiceChildEchoBidirectionalExtendedArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PingPongOnlyServiceChildEchoBidirectionalExtendedArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PingPongOnlyServiceChildEchoBidirectionalExtendedArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req1 = NewEchoRequest()
	if err := p.Req1.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PingPongOnlyServiceChildEchoBidirectionalExtendedArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EchoBidirectionalExtended_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PingPongOnlyServiceChildEchoBidirectionalExtendedArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req1", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req1.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *PingPongOnlyServiceChildEchoBidirectionalExtendedArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PingPongOnlyServiceChildEchoBidirectionalExtendedArgs(%+v)", *p)

}

func (p *PingPongOnlyServiceChildEchoBidirectionalExtendedArgs) DeepEqual(ano *PingPongOnlyServiceChildEchoBidirectionalExtendedArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req1) {
		return false
	}
	return true
}

func (p *PingPongOnlyServiceChildEchoBidirectionalExtendedArgs) Field1DeepEqual(src *EchoRequest) bool {

	if !p.Req1.DeepEqual(src) {
		return false
	}
	return true
}

type PingPongOnlyServiceChildEchoBidirectionalExtendedResult struct {
	Success *EchoResponse `thrift:"success,0,optional" frugal:"0,optional,EchoResponse" json:"success,omitempty"`
}

func NewPingPongOnlyServiceChildEchoBidirectionalExtendedResult() *PingPongOnlyServiceChildEchoBidirectionalExtendedResult {
	return &PingPongOnlyServiceChildEchoBidirectionalExtendedResult{}
}

func (p *PingPongOnlyServiceChildEchoBidirectionalExtendedResult) InitDefault() {
	*p = PingPongOnlyServiceChildEchoBidirectionalExtendedResult{}
}

var PingPongOnlyServiceChildEchoBidirectionalExtendedResult_Success_DEFAULT *EchoResponse

func (p *PingPongOnlyServiceChildEchoBidirectionalExtendedResult) GetSuccess() (v *EchoResponse) {
	if !p.IsSetSuccess() {
		return PingPongOnlyServiceChildEchoBidirectionalExtendedResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PingPongOnlyServiceChildEchoBidirectionalExtendedResult) SetSuccess(x interface{}) {
	p.Success = x.(*EchoResponse)
}

var fieldIDToName_PingPongOnlyServiceChildEchoBidirectionalExtendedResult = map[int16]string{
	0: "success",
}

func (p *PingPongOnlyServiceChildEchoBidirectionalExtendedResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PingPongOnlyServiceChildEchoBidirectionalExtendedResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_PingPongOnlyServiceChildEchoBidirectionalExtendedResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *PingPongOnlyServiceChildEchoBidirectionalExtendedResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewEchoResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *PingPongOnlyServiceChildEchoBidirectionalExtendedResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EchoBidirectionalExtended_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *PingPongOnlyServiceChildEchoBidirectionalExtendedResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *PingPongOnlyServiceChildEchoBidirectionalExtendedResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PingPongOnlyServiceChildEchoBidirectionalExtendedResult(%+v)", *p)

}

func (p *PingPongOnlyServiceChildEchoBidirectionalExtendedResult) DeepEqual(ano *PingPongOnlyServiceChildEchoBidirectionalExtendedResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *PingPongOnlyServiceChildEchoBidirectionalExtendedResult) Field0DeepEqual(src *EchoResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type PingPongOnlyServiceChildChildProcessor struct {
	*PingPongOnlyServiceChildProcessor
}

func NewPingPongOnlyServiceChildChildProcessor(handler PingPongOnlyServiceChildChild) *PingPongOnlyServiceChildChildProcessor {
	self := &PingPongOnlyServiceChildChildProcessor{NewPingPongOnlyServiceChildProcessor(handler)}
	return self
}

type StreamOnlyServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      StreamOnlyService
}

func (p *StreamOnlyServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *StreamOnlyServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *StreamOnlyServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewStreamOnlyServiceProcessor(handler StreamOnlyService) *StreamOnlyServiceProcessor {
	self := &StreamOnlyServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("EchoBidirectionalNew", &streamOnlyServiceProcessorEchoBidirectionalNew{handler: handler})
	return self
}
func (p *StreamOnlyServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type streamOnlyServiceProcessorEchoBidirectionalNew struct {
	handler StreamOnlyService
}

func (p *streamOnlyServiceProcessorEchoBidirectionalNew) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := StreamOnlyServiceEchoBidirectionalNewArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("EchoBidirectionalNew", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := StreamOnlyServiceEchoBidirectionalNewResult{}
	var retval *EchoResponse
	if retval, err2 = p.handler.EchoBidirectionalNew(ctx, args.Req1); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing EchoBidirectionalNew: "+err2.Error())
		oprot.WriteMessageBegin("EchoBidirectionalNew", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("EchoBidirectionalNew", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type StreamOnlyServiceEchoBidirectionalNewArgs struct {
	Req1 *EchoRequest `thrift:"req1,1" frugal:"1,default,EchoRequest" json:"req1"`
}

func NewStreamOnlyServiceEchoBidirectionalNewArgs() *StreamOnlyServiceEchoBidirectionalNewArgs {
	return &StreamOnlyServiceEchoBidirectionalNewArgs{}
}

func (p *StreamOnlyServiceEchoBidirectionalNewArgs) InitDefault() {
	*p = StreamOnlyServiceEchoBidirectionalNewArgs{}
}

var StreamOnlyServiceEchoBidirectionalNewArgs_Req1_DEFAULT *EchoRequest

func (p *StreamOnlyServiceEchoBidirectionalNewArgs) GetReq1() (v *EchoRequest) {
	if !p.IsSetReq1() {
		return StreamOnlyServiceEchoBidirectionalNewArgs_Req1_DEFAULT
	}
	return p.Req1
}
func (p *StreamOnlyServiceEchoBidirectionalNewArgs) SetReq1(val *EchoRequest) {
	p.Req1 = val
}

var fieldIDToName_StreamOnlyServiceEchoBidirectionalNewArgs = map[int16]string{
	1: "req1",
}

func (p *StreamOnlyServiceEchoBidirectionalNewArgs) IsSetReq1() bool {
	return p.Req1 != nil
}

func (p *StreamOnlyServiceEchoBidirectionalNewArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_StreamOnlyServiceEchoBidirectionalNewArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *StreamOnlyServiceEchoBidirectionalNewArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req1 = NewEchoRequest()
	if err := p.Req1.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *StreamOnlyServiceEchoBidirectionalNewArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EchoBidirectionalNew_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *StreamOnlyServiceEchoBidirectionalNewArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req1", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req1.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *StreamOnlyServiceEchoBidirectionalNewArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StreamOnlyServiceEchoBidirectionalNewArgs(%+v)", *p)

}

func (p *StreamOnlyServiceEchoBidirectionalNewArgs) DeepEqual(ano *StreamOnlyServiceEchoBidirectionalNewArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req1) {
		return false
	}
	return true
}

func (p *StreamOnlyServiceEchoBidirectionalNewArgs) Field1DeepEqual(src *EchoRequest) bool {

	if !p.Req1.DeepEqual(src) {
		return false
	}
	return true
}

type StreamOnlyServiceEchoBidirectionalNewResult struct {
	Success *EchoResponse `thrift:"success,0,optional" frugal:"0,optional,EchoResponse" json:"success,omitempty"`
}

func NewStreamOnlyServiceEchoBidirectionalNewResult() *StreamOnlyServiceEchoBidirectionalNewResult {
	return &StreamOnlyServiceEchoBidirectionalNewResult{}
}

func (p *StreamOnlyServiceEchoBidirectionalNewResult) InitDefault() {
	*p = StreamOnlyServiceEchoBidirectionalNewResult{}
}

var StreamOnlyServiceEchoBidirectionalNewResult_Success_DEFAULT *EchoResponse

func (p *StreamOnlyServiceEchoBidirectionalNewResult) GetSuccess() (v *EchoResponse) {
	if !p.IsSetSuccess() {
		return StreamOnlyServiceEchoBidirectionalNewResult_Success_DEFAULT
	}
	return p.Success
}
func (p *StreamOnlyServiceEchoBidirectionalNewResult) SetSuccess(x interface{}) {
	p.Success = x.(*EchoResponse)
}

var fieldIDToName_StreamOnlyServiceEchoBidirectionalNewResult = map[int16]string{
	0: "success",
}

func (p *StreamOnlyServiceEchoBidirectionalNewResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *StreamOnlyServiceEchoBidirectionalNewResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_StreamOnlyServiceEchoBidirectionalNewResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *StreamOnlyServiceEchoBidirectionalNewResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewEchoResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *StreamOnlyServiceEchoBidirectionalNewResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EchoBidirectionalNew_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *StreamOnlyServiceEchoBidirectionalNewResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *StreamOnlyServiceEchoBidirectionalNewResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StreamOnlyServiceEchoBidirectionalNewResult(%+v)", *p)

}

func (p *StreamOnlyServiceEchoBidirectionalNewResult) DeepEqual(ano *StreamOnlyServiceEchoBidirectionalNewResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *StreamOnlyServiceEchoBidirectionalNewResult) Field0DeepEqual(src *EchoResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type StreamOnlyServiceChildProcessor struct {
	*StreamOnlyServiceProcessor
}

func NewStreamOnlyServiceChildProcessor(handler StreamOnlyServiceChild) *StreamOnlyServiceChildProcessor {
	self := &StreamOnlyServiceChildProcessor{NewStreamOnlyServiceProcessor(handler)}
	return self
}

type StreamOnlyServiceChildChildProcessor struct {
	*StreamOnlyServiceChildProcessor
}

func NewStreamOnlyServiceChildChildProcessor(handler StreamOnlyServiceChildChild) *StreamOnlyServiceChildChildProcessor {
	self := &StreamOnlyServiceChildChildProcessor{NewStreamOnlyServiceChildProcessor(handler)}
	return self
}

type ABCServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      ABCService
}

func (p *ABCServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *ABCServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *ABCServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewABCServiceProcessor(handler ABCService) *ABCServiceProcessor {
	self := &ABCServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("Echo", &aBCServiceProcessorEcho{handler: handler})
	self.AddToProcessorMap("EchoBidirectional", &aBCServiceProcessorEchoBidirectional{handler: handler})
	self.AddToProcessorMap("EchoServer", &aBCServiceProcessorEchoServer{handler: handler})
	self.AddToProcessorMap("EchoClient", &aBCServiceProcessorEchoClient{handler: handler})
	self.AddToProcessorMap("EchoUnary", &aBCServiceProcessorEchoUnary{handler: handler})
	return self
}
func (p *ABCServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type aBCServiceProcessorEcho struct {
	handler ABCService
}

func (p *aBCServiceProcessorEcho) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ABCServiceEchoArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("Echo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ABCServiceEchoResult{}
	var retval *c.Response
	if retval, err2 = p.handler.Echo(ctx, args.Req1, args.Req2); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing Echo: "+err2.Error())
		oprot.WriteMessageBegin("Echo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("Echo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type aBCServiceProcessorEchoBidirectional struct {
	handler ABCService
}

func (p *aBCServiceProcessorEchoBidirectional) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ABCServiceEchoBidirectionalArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("EchoBidirectional", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ABCServiceEchoBidirectionalResult{}
	var retval *c.Response
	if retval, err2 = p.handler.EchoBidirectional(ctx, args.Req1); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing EchoBidirectional: "+err2.Error())
		oprot.WriteMessageBegin("EchoBidirectional", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("EchoBidirectional", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type aBCServiceProcessorEchoServer struct {
	handler ABCService
}

func (p *aBCServiceProcessorEchoServer) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ABCServiceEchoServerArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("EchoServer", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ABCServiceEchoServerResult{}
	var retval *c.Response
	if retval, err2 = p.handler.EchoServer(ctx, args.Req1); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing EchoServer: "+err2.Error())
		oprot.WriteMessageBegin("EchoServer", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("EchoServer", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type aBCServiceProcessorEchoClient struct {
	handler ABCService
}

func (p *aBCServiceProcessorEchoClient) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ABCServiceEchoClientArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("EchoClient", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ABCServiceEchoClientResult{}
	var retval *c.Response
	if retval, err2 = p.handler.EchoClient(ctx, args.Req1); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing EchoClient: "+err2.Error())
		oprot.WriteMessageBegin("EchoClient", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("EchoClient", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type aBCServiceProcessorEchoUnary struct {
	handler ABCService
}

func (p *aBCServiceProcessorEchoUnary) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := ABCServiceEchoUnaryArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("EchoUnary", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := ABCServiceEchoUnaryResult{}
	var retval *c.Response
	if retval, err2 = p.handler.EchoUnary(ctx, args.Req1); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing EchoUnary: "+err2.Error())
		oprot.WriteMessageBegin("EchoUnary", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("EchoUnary", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type ABCServiceEchoArgs struct {
	Req1 *c.Request `thrift:"req1,1" frugal:"1,default,c.Request" json:"req1"`
	Req2 *c.Request `thrift:"req2,2" frugal:"2,default,c.Request" json:"req2"`
}

func NewABCServiceEchoArgs() *ABCServiceEchoArgs {
	return &ABCServiceEchoArgs{}
}

func (p *ABCServiceEchoArgs) InitDefault() {
	*p = ABCServiceEchoArgs{}
}

var ABCServiceEchoArgs_Req1_DEFAULT *c.Request

func (p *ABCServiceEchoArgs) GetReq1() (v *c.Request) {
	if !p.IsSetReq1() {
		return ABCServiceEchoArgs_Req1_DEFAULT
	}
	return p.Req1
}

var ABCServiceEchoArgs_Req2_DEFAULT *c.Request

func (p *ABCServiceEchoArgs) GetReq2() (v *c.Request) {
	if !p.IsSetReq2() {
		return ABCServiceEchoArgs_Req2_DEFAULT
	}
	return p.Req2
}
func (p *ABCServiceEchoArgs) SetReq1(val *c.Request) {
	p.Req1 = val
}
func (p *ABCServiceEchoArgs) SetReq2(val *c.Request) {
	p.Req2 = val
}

var fieldIDToName_ABCServiceEchoArgs = map[int16]string{
	1: "req1",
	2: "req2",
}

func (p *ABCServiceEchoArgs) IsSetReq1() bool {
	return p.Req1 != nil
}

func (p *ABCServiceEchoArgs) IsSetReq2() bool {
	return p.Req2 != nil
}

func (p *ABCServiceEchoArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		case 2:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ABCServiceEchoArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ABCServiceEchoArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req1 = c.NewRequest()
	if err := p.Req1.Read(iprot); err != nil {
		return err
	}
	return nil
}
func (p *ABCServiceEchoArgs) ReadField2(iprot thrift.TProtocol) error {
	p.Req2 = c.NewRequest()
	if err := p.Req2.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ABCServiceEchoArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Echo_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ABCServiceEchoArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req1", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req1.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ABCServiceEchoArgs) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req2", thrift.STRUCT, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req2.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ABCServiceEchoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ABCServiceEchoArgs(%+v)", *p)

}

func (p *ABCServiceEchoArgs) DeepEqual(ano *ABCServiceEchoArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req1) {
		return false
	}
	if !p.Field2DeepEqual(ano.Req2) {
		return false
	}
	return true
}

func (p *ABCServiceEchoArgs) Field1DeepEqual(src *c.Request) bool {

	if !p.Req1.DeepEqual(src) {
		return false
	}
	return true
}
func (p *ABCServiceEchoArgs) Field2DeepEqual(src *c.Request) bool {

	if !p.Req2.DeepEqual(src) {
		return false
	}
	return true
}

type ABCServiceEchoResult struct {
	Success *c.Response `thrift:"success,0,optional" frugal:"0,optional,c.Response" json:"success,omitempty"`
}

func NewABCServiceEchoResult() *ABCServiceEchoResult {
	return &ABCServiceEchoResult{}
}

func (p *ABCServiceEchoResult) InitDefault() {
	*p = ABCServiceEchoResult{}
}

var ABCServiceEchoResult_Success_DEFAULT *c.Response

func (p *ABCServiceEchoResult) GetSuccess() (v *c.Response) {
	if !p.IsSetSuccess() {
		return ABCServiceEchoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ABCServiceEchoResult) SetSuccess(x interface{}) {
	p.Success = x.(*c.Response)
}

var fieldIDToName_ABCServiceEchoResult = map[int16]string{
	0: "success",
}

func (p *ABCServiceEchoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ABCServiceEchoResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ABCServiceEchoResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ABCServiceEchoResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = c.NewResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ABCServiceEchoResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("Echo_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ABCServiceEchoResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ABCServiceEchoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ABCServiceEchoResult(%+v)", *p)

}

func (p *ABCServiceEchoResult) DeepEqual(ano *ABCServiceEchoResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ABCServiceEchoResult) Field0DeepEqual(src *c.Response) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ABCServiceEchoBidirectionalArgs struct {
	Req1 *c.Request `thrift:"req1,1" frugal:"1,default,c.Request" json:"req1"`
}

func NewABCServiceEchoBidirectionalArgs() *ABCServiceEchoBidirectionalArgs {
	return &ABCServiceEchoBidirectionalArgs{}
}

func (p *ABCServiceEchoBidirectionalArgs) InitDefault() {
	*p = ABCServiceEchoBidirectionalArgs{}
}

var ABCServiceEchoBidirectionalArgs_Req1_DEFAULT *c.Request

func (p *ABCServiceEchoBidirectionalArgs) GetReq1() (v *c.Request) {
	if !p.IsSetReq1() {
		return ABCServiceEchoBidirectionalArgs_Req1_DEFAULT
	}
	return p.Req1
}
func (p *ABCServiceEchoBidirectionalArgs) SetReq1(val *c.Request) {
	p.Req1 = val
}

var fieldIDToName_ABCServiceEchoBidirectionalArgs = map[int16]string{
	1: "req1",
}

func (p *ABCServiceEchoBidirectionalArgs) IsSetReq1() bool {
	return p.Req1 != nil
}

func (p *ABCServiceEchoBidirectionalArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ABCServiceEchoBidirectionalArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ABCServiceEchoBidirectionalArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req1 = c.NewRequest()
	if err := p.Req1.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ABCServiceEchoBidirectionalArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EchoBidirectional_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ABCServiceEchoBidirectionalArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req1", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req1.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ABCServiceEchoBidirectionalArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ABCServiceEchoBidirectionalArgs(%+v)", *p)

}

func (p *ABCServiceEchoBidirectionalArgs) DeepEqual(ano *ABCServiceEchoBidirectionalArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req1) {
		return false
	}
	return true
}

func (p *ABCServiceEchoBidirectionalArgs) Field1DeepEqual(src *c.Request) bool {

	if !p.Req1.DeepEqual(src) {
		return false
	}
	return true
}

type ABCServiceEchoBidirectionalResult struct {
	Success *c.Response `thrift:"success,0,optional" frugal:"0,optional,c.Response" json:"success,omitempty"`
}

func NewABCServiceEchoBidirectionalResult() *ABCServiceEchoBidirectionalResult {
	return &ABCServiceEchoBidirectionalResult{}
}

func (p *ABCServiceEchoBidirectionalResult) InitDefault() {
	*p = ABCServiceEchoBidirectionalResult{}
}

var ABCServiceEchoBidirectionalResult_Success_DEFAULT *c.Response

func (p *ABCServiceEchoBidirectionalResult) GetSuccess() (v *c.Response) {
	if !p.IsSetSuccess() {
		return ABCServiceEchoBidirectionalResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ABCServiceEchoBidirectionalResult) SetSuccess(x interface{}) {
	p.Success = x.(*c.Response)
}

var fieldIDToName_ABCServiceEchoBidirectionalResult = map[int16]string{
	0: "success",
}

func (p *ABCServiceEchoBidirectionalResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ABCServiceEchoBidirectionalResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ABCServiceEchoBidirectionalResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ABCServiceEchoBidirectionalResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = c.NewResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ABCServiceEchoBidirectionalResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EchoBidirectional_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ABCServiceEchoBidirectionalResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ABCServiceEchoBidirectionalResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ABCServiceEchoBidirectionalResult(%+v)", *p)

}

func (p *ABCServiceEchoBidirectionalResult) DeepEqual(ano *ABCServiceEchoBidirectionalResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ABCServiceEchoBidirectionalResult) Field0DeepEqual(src *c.Response) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ABCServiceEchoServerArgs struct {
	Req1 *c.Request `thrift:"req1,1" frugal:"1,default,c.Request" json:"req1"`
}

func NewABCServiceEchoServerArgs() *ABCServiceEchoServerArgs {
	return &ABCServiceEchoServerArgs{}
}

func (p *ABCServiceEchoServerArgs) InitDefault() {
	*p = ABCServiceEchoServerArgs{}
}

var ABCServiceEchoServerArgs_Req1_DEFAULT *c.Request

func (p *ABCServiceEchoServerArgs) GetReq1() (v *c.Request) {
	if !p.IsSetReq1() {
		return ABCServiceEchoServerArgs_Req1_DEFAULT
	}
	return p.Req1
}
func (p *ABCServiceEchoServerArgs) SetReq1(val *c.Request) {
	p.Req1 = val
}

var fieldIDToName_ABCServiceEchoServerArgs = map[int16]string{
	1: "req1",
}

func (p *ABCServiceEchoServerArgs) IsSetReq1() bool {
	return p.Req1 != nil
}

func (p *ABCServiceEchoServerArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ABCServiceEchoServerArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ABCServiceEchoServerArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req1 = c.NewRequest()
	if err := p.Req1.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ABCServiceEchoServerArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EchoServer_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ABCServiceEchoServerArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req1", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req1.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ABCServiceEchoServerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ABCServiceEchoServerArgs(%+v)", *p)

}

func (p *ABCServiceEchoServerArgs) DeepEqual(ano *ABCServiceEchoServerArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req1) {
		return false
	}
	return true
}

func (p *ABCServiceEchoServerArgs) Field1DeepEqual(src *c.Request) bool {

	if !p.Req1.DeepEqual(src) {
		return false
	}
	return true
}

type ABCServiceEchoServerResult struct {
	Success *c.Response `thrift:"success,0,optional" frugal:"0,optional,c.Response" json:"success,omitempty"`
}

func NewABCServiceEchoServerResult() *ABCServiceEchoServerResult {
	return &ABCServiceEchoServerResult{}
}

func (p *ABCServiceEchoServerResult) InitDefault() {
	*p = ABCServiceEchoServerResult{}
}

var ABCServiceEchoServerResult_Success_DEFAULT *c.Response

func (p *ABCServiceEchoServerResult) GetSuccess() (v *c.Response) {
	if !p.IsSetSuccess() {
		return ABCServiceEchoServerResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ABCServiceEchoServerResult) SetSuccess(x interface{}) {
	p.Success = x.(*c.Response)
}

var fieldIDToName_ABCServiceEchoServerResult = map[int16]string{
	0: "success",
}

func (p *ABCServiceEchoServerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ABCServiceEchoServerResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ABCServiceEchoServerResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ABCServiceEchoServerResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = c.NewResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ABCServiceEchoServerResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EchoServer_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ABCServiceEchoServerResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ABCServiceEchoServerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ABCServiceEchoServerResult(%+v)", *p)

}

func (p *ABCServiceEchoServerResult) DeepEqual(ano *ABCServiceEchoServerResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ABCServiceEchoServerResult) Field0DeepEqual(src *c.Response) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ABCServiceEchoClientArgs struct {
	Req1 *c.Request `thrift:"req1,1" frugal:"1,default,c.Request" json:"req1"`
}

func NewABCServiceEchoClientArgs() *ABCServiceEchoClientArgs {
	return &ABCServiceEchoClientArgs{}
}

func (p *ABCServiceEchoClientArgs) InitDefault() {
	*p = ABCServiceEchoClientArgs{}
}

var ABCServiceEchoClientArgs_Req1_DEFAULT *c.Request

func (p *ABCServiceEchoClientArgs) GetReq1() (v *c.Request) {
	if !p.IsSetReq1() {
		return ABCServiceEchoClientArgs_Req1_DEFAULT
	}
	return p.Req1
}
func (p *ABCServiceEchoClientArgs) SetReq1(val *c.Request) {
	p.Req1 = val
}

var fieldIDToName_ABCServiceEchoClientArgs = map[int16]string{
	1: "req1",
}

func (p *ABCServiceEchoClientArgs) IsSetReq1() bool {
	return p.Req1 != nil
}

func (p *ABCServiceEchoClientArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ABCServiceEchoClientArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ABCServiceEchoClientArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req1 = c.NewRequest()
	if err := p.Req1.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ABCServiceEchoClientArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EchoClient_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ABCServiceEchoClientArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req1", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req1.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ABCServiceEchoClientArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ABCServiceEchoClientArgs(%+v)", *p)

}

func (p *ABCServiceEchoClientArgs) DeepEqual(ano *ABCServiceEchoClientArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req1) {
		return false
	}
	return true
}

func (p *ABCServiceEchoClientArgs) Field1DeepEqual(src *c.Request) bool {

	if !p.Req1.DeepEqual(src) {
		return false
	}
	return true
}

type ABCServiceEchoClientResult struct {
	Success *c.Response `thrift:"success,0,optional" frugal:"0,optional,c.Response" json:"success,omitempty"`
}

func NewABCServiceEchoClientResult() *ABCServiceEchoClientResult {
	return &ABCServiceEchoClientResult{}
}

func (p *ABCServiceEchoClientResult) InitDefault() {
	*p = ABCServiceEchoClientResult{}
}

var ABCServiceEchoClientResult_Success_DEFAULT *c.Response

func (p *ABCServiceEchoClientResult) GetSuccess() (v *c.Response) {
	if !p.IsSetSuccess() {
		return ABCServiceEchoClientResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ABCServiceEchoClientResult) SetSuccess(x interface{}) {
	p.Success = x.(*c.Response)
}

var fieldIDToName_ABCServiceEchoClientResult = map[int16]string{
	0: "success",
}

func (p *ABCServiceEchoClientResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ABCServiceEchoClientResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ABCServiceEchoClientResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ABCServiceEchoClientResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = c.NewResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ABCServiceEchoClientResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EchoClient_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ABCServiceEchoClientResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ABCServiceEchoClientResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ABCServiceEchoClientResult(%+v)", *p)

}

func (p *ABCServiceEchoClientResult) DeepEqual(ano *ABCServiceEchoClientResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ABCServiceEchoClientResult) Field0DeepEqual(src *c.Response) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type ABCServiceEchoUnaryArgs struct {
	Req1 *c.Request `thrift:"req1,1" frugal:"1,default,c.Request" json:"req1"`
}

func NewABCServiceEchoUnaryArgs() *ABCServiceEchoUnaryArgs {
	return &ABCServiceEchoUnaryArgs{}
}

func (p *ABCServiceEchoUnaryArgs) InitDefault() {
	*p = ABCServiceEchoUnaryArgs{}
}

var ABCServiceEchoUnaryArgs_Req1_DEFAULT *c.Request

func (p *ABCServiceEchoUnaryArgs) GetReq1() (v *c.Request) {
	if !p.IsSetReq1() {
		return ABCServiceEchoUnaryArgs_Req1_DEFAULT
	}
	return p.Req1
}
func (p *ABCServiceEchoUnaryArgs) SetReq1(val *c.Request) {
	p.Req1 = val
}

var fieldIDToName_ABCServiceEchoUnaryArgs = map[int16]string{
	1: "req1",
}

func (p *ABCServiceEchoUnaryArgs) IsSetReq1() bool {
	return p.Req1 != nil
}

func (p *ABCServiceEchoUnaryArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ABCServiceEchoUnaryArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ABCServiceEchoUnaryArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req1 = c.NewRequest()
	if err := p.Req1.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ABCServiceEchoUnaryArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EchoUnary_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ABCServiceEchoUnaryArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req1", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req1.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ABCServiceEchoUnaryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ABCServiceEchoUnaryArgs(%+v)", *p)

}

func (p *ABCServiceEchoUnaryArgs) DeepEqual(ano *ABCServiceEchoUnaryArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req1) {
		return false
	}
	return true
}

func (p *ABCServiceEchoUnaryArgs) Field1DeepEqual(src *c.Request) bool {

	if !p.Req1.DeepEqual(src) {
		return false
	}
	return true
}

type ABCServiceEchoUnaryResult struct {
	Success *c.Response `thrift:"success,0,optional" frugal:"0,optional,c.Response" json:"success,omitempty"`
}

func NewABCServiceEchoUnaryResult() *ABCServiceEchoUnaryResult {
	return &ABCServiceEchoUnaryResult{}
}

func (p *ABCServiceEchoUnaryResult) InitDefault() {
	*p = ABCServiceEchoUnaryResult{}
}

var ABCServiceEchoUnaryResult_Success_DEFAULT *c.Response

func (p *ABCServiceEchoUnaryResult) GetSuccess() (v *c.Response) {
	if !p.IsSetSuccess() {
		return ABCServiceEchoUnaryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ABCServiceEchoUnaryResult) SetSuccess(x interface{}) {
	p.Success = x.(*c.Response)
}

var fieldIDToName_ABCServiceEchoUnaryResult = map[int16]string{
	0: "success",
}

func (p *ABCServiceEchoUnaryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ABCServiceEchoUnaryResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}
		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ABCServiceEchoUnaryResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ABCServiceEchoUnaryResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = c.NewResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *ABCServiceEchoUnaryResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("EchoUnary_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ABCServiceEchoUnaryResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *ABCServiceEchoUnaryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ABCServiceEchoUnaryResult(%+v)", *p)

}

func (p *ABCServiceEchoUnaryResult) DeepEqual(ano *ABCServiceEchoUnaryResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *ABCServiceEchoUnaryResult) Field0DeepEqual(src *c.Response) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

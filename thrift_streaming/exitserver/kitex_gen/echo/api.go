// Code generated by thriftgo (0.3.18). DO NOT EDIT.

package echo

import (
	"context"
	"fmt"
	"github.com/cloudwego/kitex/pkg/streaming"
	"strings"
)

type EchoRequest struct {
	Message string `thrift:"message,1,required" frugal:"1,required,string" json:"message"`
}

func NewEchoRequest() *EchoRequest {
	return &EchoRequest{}
}

func (p *EchoRequest) InitDefault() {
}

func (p *EchoRequest) GetMessage() (v string) {
	return p.Message
}
func (p *EchoRequest) SetMessage(val string) {
	p.Message = val
}

func (p *EchoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoRequest(%+v)", *p)
}

func (p *EchoRequest) DeepEqual(ano *EchoRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Message) {
		return false
	}
	return true
}

func (p *EchoRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_EchoRequest = map[int16]string{
	1: "message",
}

type EchoResponse struct {
	Message string `thrift:"message,1,required" frugal:"1,required,string" json:"message"`
}

func NewEchoResponse() *EchoResponse {
	return &EchoResponse{}
}

func (p *EchoResponse) InitDefault() {
}

func (p *EchoResponse) GetMessage() (v string) {
	return p.Message
}
func (p *EchoResponse) SetMessage(val string) {
	p.Message = val
}

func (p *EchoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoResponse(%+v)", *p)
}

func (p *EchoResponse) DeepEqual(ano *EchoResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Message) {
		return false
	}
	return true
}

func (p *EchoResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}

var fieldIDToName_EchoResponse = map[int16]string{
	1: "message",
}

type EchoService interface {
	EchoBidirectional(stream EchoService_EchoBidirectionalServer) (err error)

	EchoClient(stream EchoService_EchoClientServer) (err error)

	EchoServer(req *EchoRequest, stream EchoService_EchoServerServer) (err error)

	EchoUnary(ctx context.Context, req1 *EchoRequest) (r *EchoResponse, err error)
}

type EchoServiceEchoBidirectionalArgs struct {
	Req1 *EchoRequest `thrift:"req1,1" frugal:"1,default,EchoRequest" json:"req1"`
}

func NewEchoServiceEchoBidirectionalArgs() *EchoServiceEchoBidirectionalArgs {
	return &EchoServiceEchoBidirectionalArgs{}
}

func (p *EchoServiceEchoBidirectionalArgs) InitDefault() {
}

var EchoServiceEchoBidirectionalArgs_Req1_DEFAULT *EchoRequest

func (p *EchoServiceEchoBidirectionalArgs) GetReq1() (v *EchoRequest) {
	if !p.IsSetReq1() {
		return EchoServiceEchoBidirectionalArgs_Req1_DEFAULT
	}
	return p.Req1
}
func (p *EchoServiceEchoBidirectionalArgs) SetReq1(val *EchoRequest) {
	p.Req1 = val
}

func (p *EchoServiceEchoBidirectionalArgs) IsSetReq1() bool {
	return p.Req1 != nil
}

func (p *EchoServiceEchoBidirectionalArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoServiceEchoBidirectionalArgs(%+v)", *p)
}

func (p *EchoServiceEchoBidirectionalArgs) DeepEqual(ano *EchoServiceEchoBidirectionalArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req1) {
		return false
	}
	return true
}

func (p *EchoServiceEchoBidirectionalArgs) Field1DeepEqual(src *EchoRequest) bool {

	if !p.Req1.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_EchoServiceEchoBidirectionalArgs = map[int16]string{
	1: "req1",
}

type EchoServiceEchoBidirectionalResult struct {
	Success *EchoResponse `thrift:"success,0,optional" frugal:"0,optional,EchoResponse" json:"success,omitempty"`
}

func NewEchoServiceEchoBidirectionalResult() *EchoServiceEchoBidirectionalResult {
	return &EchoServiceEchoBidirectionalResult{}
}

func (p *EchoServiceEchoBidirectionalResult) InitDefault() {
}

var EchoServiceEchoBidirectionalResult_Success_DEFAULT *EchoResponse

func (p *EchoServiceEchoBidirectionalResult) GetSuccess() (v *EchoResponse) {
	if !p.IsSetSuccess() {
		return EchoServiceEchoBidirectionalResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EchoServiceEchoBidirectionalResult) SetSuccess(x interface{}) {
	p.Success = x.(*EchoResponse)
}

func (p *EchoServiceEchoBidirectionalResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EchoServiceEchoBidirectionalResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoServiceEchoBidirectionalResult(%+v)", *p)
}

func (p *EchoServiceEchoBidirectionalResult) DeepEqual(ano *EchoServiceEchoBidirectionalResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EchoServiceEchoBidirectionalResult) Field0DeepEqual(src *EchoResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_EchoServiceEchoBidirectionalResult = map[int16]string{
	0: "success",
}

type EchoService_EchoBidirectionalServer interface {
	streaming.Stream

	Recv() (*EchoRequest, error)

	Send(*EchoResponse) error
}

type EchoServiceEchoClientArgs struct {
	Req1 *EchoRequest `thrift:"req1,1" frugal:"1,default,EchoRequest" json:"req1"`
}

func NewEchoServiceEchoClientArgs() *EchoServiceEchoClientArgs {
	return &EchoServiceEchoClientArgs{}
}

func (p *EchoServiceEchoClientArgs) InitDefault() {
}

var EchoServiceEchoClientArgs_Req1_DEFAULT *EchoRequest

func (p *EchoServiceEchoClientArgs) GetReq1() (v *EchoRequest) {
	if !p.IsSetReq1() {
		return EchoServiceEchoClientArgs_Req1_DEFAULT
	}
	return p.Req1
}
func (p *EchoServiceEchoClientArgs) SetReq1(val *EchoRequest) {
	p.Req1 = val
}

func (p *EchoServiceEchoClientArgs) IsSetReq1() bool {
	return p.Req1 != nil
}

func (p *EchoServiceEchoClientArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoServiceEchoClientArgs(%+v)", *p)
}

func (p *EchoServiceEchoClientArgs) DeepEqual(ano *EchoServiceEchoClientArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req1) {
		return false
	}
	return true
}

func (p *EchoServiceEchoClientArgs) Field1DeepEqual(src *EchoRequest) bool {

	if !p.Req1.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_EchoServiceEchoClientArgs = map[int16]string{
	1: "req1",
}

type EchoServiceEchoClientResult struct {
	Success *EchoResponse `thrift:"success,0,optional" frugal:"0,optional,EchoResponse" json:"success,omitempty"`
}

func NewEchoServiceEchoClientResult() *EchoServiceEchoClientResult {
	return &EchoServiceEchoClientResult{}
}

func (p *EchoServiceEchoClientResult) InitDefault() {
}

var EchoServiceEchoClientResult_Success_DEFAULT *EchoResponse

func (p *EchoServiceEchoClientResult) GetSuccess() (v *EchoResponse) {
	if !p.IsSetSuccess() {
		return EchoServiceEchoClientResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EchoServiceEchoClientResult) SetSuccess(x interface{}) {
	p.Success = x.(*EchoResponse)
}

func (p *EchoServiceEchoClientResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EchoServiceEchoClientResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoServiceEchoClientResult(%+v)", *p)
}

func (p *EchoServiceEchoClientResult) DeepEqual(ano *EchoServiceEchoClientResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EchoServiceEchoClientResult) Field0DeepEqual(src *EchoResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_EchoServiceEchoClientResult = map[int16]string{
	0: "success",
}

type EchoService_EchoClientServer interface {
	streaming.Stream

	Recv() (*EchoRequest, error)

	SendAndClose(*EchoResponse) error
}

type EchoServiceEchoServerArgs struct {
	Req1 *EchoRequest `thrift:"req1,1" frugal:"1,default,EchoRequest" json:"req1"`
}

func NewEchoServiceEchoServerArgs() *EchoServiceEchoServerArgs {
	return &EchoServiceEchoServerArgs{}
}

func (p *EchoServiceEchoServerArgs) InitDefault() {
}

var EchoServiceEchoServerArgs_Req1_DEFAULT *EchoRequest

func (p *EchoServiceEchoServerArgs) GetReq1() (v *EchoRequest) {
	if !p.IsSetReq1() {
		return EchoServiceEchoServerArgs_Req1_DEFAULT
	}
	return p.Req1
}
func (p *EchoServiceEchoServerArgs) SetReq1(val *EchoRequest) {
	p.Req1 = val
}

func (p *EchoServiceEchoServerArgs) IsSetReq1() bool {
	return p.Req1 != nil
}

func (p *EchoServiceEchoServerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoServiceEchoServerArgs(%+v)", *p)
}

func (p *EchoServiceEchoServerArgs) DeepEqual(ano *EchoServiceEchoServerArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req1) {
		return false
	}
	return true
}

func (p *EchoServiceEchoServerArgs) Field1DeepEqual(src *EchoRequest) bool {

	if !p.Req1.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_EchoServiceEchoServerArgs = map[int16]string{
	1: "req1",
}

type EchoServiceEchoServerResult struct {
	Success *EchoResponse `thrift:"success,0,optional" frugal:"0,optional,EchoResponse" json:"success,omitempty"`
}

func NewEchoServiceEchoServerResult() *EchoServiceEchoServerResult {
	return &EchoServiceEchoServerResult{}
}

func (p *EchoServiceEchoServerResult) InitDefault() {
}

var EchoServiceEchoServerResult_Success_DEFAULT *EchoResponse

func (p *EchoServiceEchoServerResult) GetSuccess() (v *EchoResponse) {
	if !p.IsSetSuccess() {
		return EchoServiceEchoServerResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EchoServiceEchoServerResult) SetSuccess(x interface{}) {
	p.Success = x.(*EchoResponse)
}

func (p *EchoServiceEchoServerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EchoServiceEchoServerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoServiceEchoServerResult(%+v)", *p)
}

func (p *EchoServiceEchoServerResult) DeepEqual(ano *EchoServiceEchoServerResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EchoServiceEchoServerResult) Field0DeepEqual(src *EchoResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_EchoServiceEchoServerResult = map[int16]string{
	0: "success",
}

type EchoService_EchoServerServer interface {
	streaming.Stream

	Send(*EchoResponse) error
}

type EchoServiceEchoUnaryArgs struct {
	Req1 *EchoRequest `thrift:"req1,1" frugal:"1,default,EchoRequest" json:"req1"`
}

func NewEchoServiceEchoUnaryArgs() *EchoServiceEchoUnaryArgs {
	return &EchoServiceEchoUnaryArgs{}
}

func (p *EchoServiceEchoUnaryArgs) InitDefault() {
}

var EchoServiceEchoUnaryArgs_Req1_DEFAULT *EchoRequest

func (p *EchoServiceEchoUnaryArgs) GetReq1() (v *EchoRequest) {
	if !p.IsSetReq1() {
		return EchoServiceEchoUnaryArgs_Req1_DEFAULT
	}
	return p.Req1
}
func (p *EchoServiceEchoUnaryArgs) SetReq1(val *EchoRequest) {
	p.Req1 = val
}

func (p *EchoServiceEchoUnaryArgs) IsSetReq1() bool {
	return p.Req1 != nil
}

func (p *EchoServiceEchoUnaryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoServiceEchoUnaryArgs(%+v)", *p)
}

func (p *EchoServiceEchoUnaryArgs) DeepEqual(ano *EchoServiceEchoUnaryArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req1) {
		return false
	}
	return true
}

func (p *EchoServiceEchoUnaryArgs) Field1DeepEqual(src *EchoRequest) bool {

	if !p.Req1.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_EchoServiceEchoUnaryArgs = map[int16]string{
	1: "req1",
}

type EchoServiceEchoUnaryResult struct {
	Success *EchoResponse `thrift:"success,0,optional" frugal:"0,optional,EchoResponse" json:"success,omitempty"`
}

func NewEchoServiceEchoUnaryResult() *EchoServiceEchoUnaryResult {
	return &EchoServiceEchoUnaryResult{}
}

func (p *EchoServiceEchoUnaryResult) InitDefault() {
}

var EchoServiceEchoUnaryResult_Success_DEFAULT *EchoResponse

func (p *EchoServiceEchoUnaryResult) GetSuccess() (v *EchoResponse) {
	if !p.IsSetSuccess() {
		return EchoServiceEchoUnaryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EchoServiceEchoUnaryResult) SetSuccess(x interface{}) {
	p.Success = x.(*EchoResponse)
}

func (p *EchoServiceEchoUnaryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EchoServiceEchoUnaryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoServiceEchoUnaryResult(%+v)", *p)
}

func (p *EchoServiceEchoUnaryResult) DeepEqual(ano *EchoServiceEchoUnaryResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *EchoServiceEchoUnaryResult) Field0DeepEqual(src *EchoResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

var fieldIDToName_EchoServiceEchoUnaryResult = map[int16]string{
	0: "success",
}

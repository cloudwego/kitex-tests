// Code generated by Kitex v0.12.3. DO NOT EDIT.

package echoservice

import (
	"context"
	"errors"
	"fmt"
	echo "github.com/cloudwego/kitex-tests/thrift_streaming/exitserver/kitex_gen/echo"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"EchoBidirectional": kitex.NewMethodInfo(
		echoBidirectionalHandler,
		newEchoServiceEchoBidirectionalArgs,
		newEchoServiceEchoBidirectionalResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingBidirectional),
	),
	"EchoClient": kitex.NewMethodInfo(
		echoClientHandler,
		newEchoServiceEchoClientArgs,
		newEchoServiceEchoClientResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingClient),
	),
	"EchoServer": kitex.NewMethodInfo(
		echoServerHandler,
		newEchoServiceEchoServerArgs,
		newEchoServiceEchoServerResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingServer),
	),
	"EchoUnary": kitex.NewMethodInfo(
		echoUnaryHandler,
		newEchoServiceEchoUnaryArgs,
		newEchoServiceEchoUnaryResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	echoServiceServiceInfo                = NewServiceInfo()
	echoServiceServiceInfoForClient       = NewServiceInfoForClient()
	echoServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return echoServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return echoServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return echoServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(true, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "EchoService"
	handlerType := (*echo.EchoService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "echo",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.12.3",
		Extra:           extra,
	}
	return svcInfo
}

func echoBidirectionalHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	st, ok := arg.(*streaming.Args)
	if !ok {
		return errors.New("EchoService.EchoBidirectional is a thrift streaming method, please call with Kitex StreamClient")
	}
	stream := &echoServiceEchoBidirectionalServer{st.Stream}
	return handler.(echo.EchoService).EchoBidirectional(stream)
}

type echoServiceEchoBidirectionalClient struct {
	streaming.Stream
}

func (x *echoServiceEchoBidirectionalClient) DoFinish(err error) {
	if finisher, ok := x.Stream.(streaming.WithDoFinish); ok {
		finisher.DoFinish(err)
	} else {
		panic(fmt.Sprintf("streaming.WithDoFinish is not implemented by %T", x.Stream))
	}
}
func (x *echoServiceEchoBidirectionalClient) Send(m *echo.EchoRequest) error {
	return x.Stream.SendMsg(m)
}
func (x *echoServiceEchoBidirectionalClient) Recv() (*echo.EchoResponse, error) {
	m := new(echo.EchoResponse)
	return m, x.Stream.RecvMsg(m)
}

type echoServiceEchoBidirectionalServer struct {
	streaming.Stream
}

func (x *echoServiceEchoBidirectionalServer) Send(m *echo.EchoResponse) error {
	return x.Stream.SendMsg(m)
}

func (x *echoServiceEchoBidirectionalServer) Recv() (*echo.EchoRequest, error) {
	m := new(echo.EchoRequest)
	return m, x.Stream.RecvMsg(m)
}

func newEchoServiceEchoBidirectionalArgs() interface{} {
	return echo.NewEchoServiceEchoBidirectionalArgs()
}

func newEchoServiceEchoBidirectionalResult() interface{} {
	return echo.NewEchoServiceEchoBidirectionalResult()
}

func echoClientHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	st, ok := arg.(*streaming.Args)
	if !ok {
		return errors.New("EchoService.EchoClient is a thrift streaming method, please call with Kitex StreamClient")
	}
	stream := &echoServiceEchoClientServer{st.Stream}
	return handler.(echo.EchoService).EchoClient(stream)
}

type echoServiceEchoClientClient struct {
	streaming.Stream
}

func (x *echoServiceEchoClientClient) DoFinish(err error) {
	if finisher, ok := x.Stream.(streaming.WithDoFinish); ok {
		finisher.DoFinish(err)
	} else {
		panic(fmt.Sprintf("streaming.WithDoFinish is not implemented by %T", x.Stream))
	}
}
func (x *echoServiceEchoClientClient) Send(m *echo.EchoRequest) error {
	return x.Stream.SendMsg(m)
}
func (x *echoServiceEchoClientClient) CloseAndRecv() (*echo.EchoResponse, error) {
	if err := x.Stream.Close(); err != nil {
		return nil, err
	}
	m := new(echo.EchoResponse)
	return m, x.Stream.RecvMsg(m)
}

type echoServiceEchoClientServer struct {
	streaming.Stream
}

func (x *echoServiceEchoClientServer) SendAndClose(m *echo.EchoResponse) error {
	return x.Stream.SendMsg(m)
}

func (x *echoServiceEchoClientServer) Recv() (*echo.EchoRequest, error) {
	m := new(echo.EchoRequest)
	return m, x.Stream.RecvMsg(m)
}

func newEchoServiceEchoClientArgs() interface{} {
	return echo.NewEchoServiceEchoClientArgs()
}

func newEchoServiceEchoClientResult() interface{} {
	return echo.NewEchoServiceEchoClientResult()
}

func echoServerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	st, ok := arg.(*streaming.Args)
	if !ok {
		return errors.New("EchoService.EchoServer is a thrift streaming method, please call with Kitex StreamClient")
	}
	stream := &echoServiceEchoServerServer{st.Stream}
	req := new(echo.EchoRequest)
	if err := st.Stream.RecvMsg(req); err != nil {
		return err
	}
	return handler.(echo.EchoService).EchoServer(req, stream)
}

type echoServiceEchoServerClient struct {
	streaming.Stream
}

func (x *echoServiceEchoServerClient) DoFinish(err error) {
	if finisher, ok := x.Stream.(streaming.WithDoFinish); ok {
		finisher.DoFinish(err)
	} else {
		panic(fmt.Sprintf("streaming.WithDoFinish is not implemented by %T", x.Stream))
	}
}
func (x *echoServiceEchoServerClient) Recv() (*echo.EchoResponse, error) {
	m := new(echo.EchoResponse)
	return m, x.Stream.RecvMsg(m)
}

type echoServiceEchoServerServer struct {
	streaming.Stream
}

func (x *echoServiceEchoServerServer) Send(m *echo.EchoResponse) error {
	return x.Stream.SendMsg(m)
}

func newEchoServiceEchoServerArgs() interface{} {
	return echo.NewEchoServiceEchoServerArgs()
}

func newEchoServiceEchoServerResult() interface{} {
	return echo.NewEchoServiceEchoServerResult()
}

func echoUnaryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	if streaming.GetStream(ctx) == nil {
		return errors.New("EchoService.EchoUnary is a thrift streaming unary method, please call with Kitex StreamClient or remove the annotation streaming.mode")
	}
	realArg := arg.(*echo.EchoServiceEchoUnaryArgs)
	realResult := result.(*echo.EchoServiceEchoUnaryResult)
	success, err := handler.(echo.EchoService).EchoUnary(ctx, realArg.Req1)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEchoServiceEchoUnaryArgs() interface{} {
	return echo.NewEchoServiceEchoUnaryArgs()
}

func newEchoServiceEchoUnaryResult() interface{} {
	return echo.NewEchoServiceEchoUnaryResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) EchoBidirectional(ctx context.Context) (EchoService_EchoBidirectionalClient, error) {
	streamClient, ok := p.c.(client.Streaming)
	if !ok {
		return nil, fmt.Errorf("client not support streaming")
	}
	res := new(streaming.Result)
	err := streamClient.Stream(ctx, "EchoBidirectional", nil, res)
	if err != nil {
		return nil, err
	}
	stream := &echoServiceEchoBidirectionalClient{res.Stream}
	return stream, nil
}

func (p *kClient) EchoClient(ctx context.Context) (EchoService_EchoClientClient, error) {
	streamClient, ok := p.c.(client.Streaming)
	if !ok {
		return nil, fmt.Errorf("client not support streaming")
	}
	res := new(streaming.Result)
	err := streamClient.Stream(ctx, "EchoClient", nil, res)
	if err != nil {
		return nil, err
	}
	stream := &echoServiceEchoClientClient{res.Stream}
	return stream, nil
}

func (p *kClient) EchoServer(ctx context.Context, req1 *echo.EchoRequest) (EchoService_EchoServerClient, error) {
	streamClient, ok := p.c.(client.Streaming)
	if !ok {
		return nil, fmt.Errorf("client not support streaming")
	}
	res := new(streaming.Result)
	err := streamClient.Stream(ctx, "EchoServer", nil, res)
	if err != nil {
		return nil, err
	}
	stream := &echoServiceEchoServerClient{res.Stream}

	if err := stream.Stream.SendMsg(req1); err != nil {
		return nil, err
	}
	if err := stream.Stream.Close(); err != nil {
		return nil, err
	}
	return stream, nil
}

func (p *kClient) EchoUnary(ctx context.Context, req1 *echo.EchoRequest) (r *echo.EchoResponse, err error) {
	var _args echo.EchoServiceEchoUnaryArgs
	_args.Req1 = req1
	var _result echo.EchoServiceEchoUnaryResult
	if err = p.c.Call(ctx, "EchoUnary", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

// Code generated by thriftgo (0.3.20). DO NOT EDIT.

package combine

import (
	"context"
	"fmt"
	"github.com/cloudwego/kitex/pkg/streaming"
)

type Req struct {
	Message string `thrift:"message,1,required" frugal:"1,required,string" json:"message"`
}

func NewReq() *Req {
	return &Req{}
}

func (p *Req) InitDefault() {
}

func (p *Req) GetMessage() (v string) {
	return p.Message
}
func (p *Req) SetMessage(val string) {
	p.Message = val
}

func (p *Req) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Req(%+v)", *p)
}

var fieldIDToName_Req = map[int16]string{
	1: "message",
}

type Rsp struct {
	Message string `thrift:"message,1,required" frugal:"1,required,string" json:"message"`
}

func NewRsp() *Rsp {
	return &Rsp{}
}

func (p *Rsp) InitDefault() {
}

func (p *Rsp) GetMessage() (v string) {
	return p.Message
}
func (p *Rsp) SetMessage(val string) {
	p.Message = val
}

func (p *Rsp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Rsp(%+v)", *p)
}

var fieldIDToName_Rsp = map[int16]string{
	1: "message",
}

type A interface {
	Foo(ctx context.Context, req *Req) (r *Rsp, err error)
}

type AFooArgs struct {
	Req *Req `thrift:"req,1" frugal:"1,default,Req" json:"req"`
}

func NewAFooArgs() *AFooArgs {
	return &AFooArgs{}
}

func (p *AFooArgs) InitDefault() {
}

var AFooArgs_Req_DEFAULT *Req

func (p *AFooArgs) GetReq() (v *Req) {
	if !p.IsSetReq() {
		return AFooArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AFooArgs) SetReq(val *Req) {
	p.Req = val
}

func (p *AFooArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AFooArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AFooArgs(%+v)", *p)
}

var fieldIDToName_AFooArgs = map[int16]string{
	1: "req",
}

type AFooResult struct {
	Success *Rsp `thrift:"success,0,optional" frugal:"0,optional,Rsp" json:"success,omitempty"`
}

func NewAFooResult() *AFooResult {
	return &AFooResult{}
}

func (p *AFooResult) InitDefault() {
}

var AFooResult_Success_DEFAULT *Rsp

func (p *AFooResult) GetSuccess() (v *Rsp) {
	if !p.IsSetSuccess() {
		return AFooResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AFooResult) SetSuccess(x interface{}) {
	p.Success = x.(*Rsp)
}

func (p *AFooResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AFooResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AFooResult(%+v)", *p)
}

var fieldIDToName_AFooResult = map[int16]string{
	0: "success",
}

type B interface {
	Bar(stream B_BarServer) (err error)
}

type BBarArgs struct {
	Req *Req `thrift:"req,1" frugal:"1,default,Req" json:"req"`
}

func NewBBarArgs() *BBarArgs {
	return &BBarArgs{}
}

func (p *BBarArgs) InitDefault() {
}

var BBarArgs_Req_DEFAULT *Req

func (p *BBarArgs) GetReq() (v *Req) {
	if !p.IsSetReq() {
		return BBarArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BBarArgs) SetReq(val *Req) {
	p.Req = val
}

func (p *BBarArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BBarArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BBarArgs(%+v)", *p)
}

var fieldIDToName_BBarArgs = map[int16]string{
	1: "req",
}

type BBarResult struct {
	Success *Rsp `thrift:"success,0,optional" frugal:"0,optional,Rsp" json:"success,omitempty"`
}

func NewBBarResult() *BBarResult {
	return &BBarResult{}
}

func (p *BBarResult) InitDefault() {
}

var BBarResult_Success_DEFAULT *Rsp

func (p *BBarResult) GetSuccess() (v *Rsp) {
	if !p.IsSetSuccess() {
		return BBarResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BBarResult) SetSuccess(x interface{}) {
	p.Success = x.(*Rsp)
}

func (p *BBarResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BBarResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BBarResult(%+v)", *p)
}

var fieldIDToName_BBarResult = map[int16]string{
	0: "success",
}

type B_BarServer interface {
	streaming.Stream

	Recv() (*Req, error)

	Send(*Rsp) error
}

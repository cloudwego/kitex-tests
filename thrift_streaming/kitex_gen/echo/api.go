// Code generated by thriftgo (0.3.20). DO NOT EDIT.

package echo

import (
	"context"
	"fmt"
	"github.com/cloudwego/kitex-tests/thrift_streaming/kitex_gen/a/b/c"
	"github.com/cloudwego/kitex/pkg/streaming"
)

type EchoRequest struct {
	Message string `thrift:"message,1,required" frugal:"1,required,string" json:"message"`
}

func NewEchoRequest() *EchoRequest {
	return &EchoRequest{}
}

func (p *EchoRequest) InitDefault() {
}

func (p *EchoRequest) GetMessage() (v string) {
	return p.Message
}
func (p *EchoRequest) SetMessage(val string) {
	p.Message = val
}

func (p *EchoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoRequest(%+v)", *p)
}

var fieldIDToName_EchoRequest = map[int16]string{
	1: "message",
}

type EchoResponse struct {
	Message string `thrift:"message,1,required" frugal:"1,required,string" json:"message"`
}

func NewEchoResponse() *EchoResponse {
	return &EchoResponse{}
}

func (p *EchoResponse) InitDefault() {
}

func (p *EchoResponse) GetMessage() (v string) {
	return p.Message
}
func (p *EchoResponse) SetMessage(val string) {
	p.Message = val
}

func (p *EchoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoResponse(%+v)", *p)
}

var fieldIDToName_EchoResponse = map[int16]string{
	1: "message",
}

type LowerRequest struct {
	Message string `thrift:"message,1,required" frugal:"1,required,string" json:"message"`
}

func NewLowerRequest() *LowerRequest {
	return &LowerRequest{}
}

func (p *LowerRequest) InitDefault() {
}

func (p *LowerRequest) GetMessage() (v string) {
	return p.Message
}
func (p *LowerRequest) SetMessage(val string) {
	p.Message = val
}

func (p *LowerRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LowerRequest(%+v)", *p)
}

var fieldIDToName_LowerRequest = map[int16]string{
	1: "message",
}

type LowerResponse struct {
	Message string `thrift:"message,1,required" frugal:"1,required,string" json:"message"`
}

func NewLowerResponse() *LowerResponse {
	return &LowerResponse{}
}

func (p *LowerResponse) InitDefault() {
}

func (p *LowerResponse) GetMessage() (v string) {
	return p.Message
}
func (p *LowerResponse) SetMessage(val string) {
	p.Message = val
}

func (p *LowerResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LowerResponse(%+v)", *p)
}

var fieldIDToName_LowerResponse = map[int16]string{
	1: "message",
}

type EchoException struct {
	Message string `thrift:"message,1" frugal:"1,default,string" json:"message"`
}

func NewEchoException() *EchoException {
	return &EchoException{}
}

func (p *EchoException) InitDefault() {
}

func (p *EchoException) GetMessage() (v string) {
	return p.Message
}
func (p *EchoException) SetMessage(val string) {
	p.Message = val
}

func (p *EchoException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoException(%+v)", *p)
}
func (p *EchoException) Error() string {
	return p.String()
}

var fieldIDToName_EchoException = map[int16]string{
	1: "message",
}

type EchoService interface {
	EchoBidirectional(stream EchoService_EchoBidirectionalServer) (err error)

	EchoClient(stream EchoService_EchoClientServer) (err error)

	EchoServer(req *EchoRequest, stream EchoService_EchoServerServer) (err error)

	EchoUnary(ctx context.Context, req1 *EchoRequest) (r *EchoResponse, err error)

	EchoPingPong(ctx context.Context, req1 *EchoRequest, req2 *EchoRequest) (r *EchoResponse, err error)

	EchoOneway(ctx context.Context, req1 *EchoRequest) (err error)

	Ping(ctx context.Context) (err error)
}

type EchoServiceEchoBidirectionalArgs struct {
	Req1 *EchoRequest `thrift:"req1,1" frugal:"1,default,EchoRequest" json:"req1"`
}

func NewEchoServiceEchoBidirectionalArgs() *EchoServiceEchoBidirectionalArgs {
	return &EchoServiceEchoBidirectionalArgs{}
}

func (p *EchoServiceEchoBidirectionalArgs) InitDefault() {
}

var EchoServiceEchoBidirectionalArgs_Req1_DEFAULT *EchoRequest

func (p *EchoServiceEchoBidirectionalArgs) GetReq1() (v *EchoRequest) {
	if !p.IsSetReq1() {
		return EchoServiceEchoBidirectionalArgs_Req1_DEFAULT
	}
	return p.Req1
}
func (p *EchoServiceEchoBidirectionalArgs) SetReq1(val *EchoRequest) {
	p.Req1 = val
}

func (p *EchoServiceEchoBidirectionalArgs) IsSetReq1() bool {
	return p.Req1 != nil
}

func (p *EchoServiceEchoBidirectionalArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoServiceEchoBidirectionalArgs(%+v)", *p)
}

var fieldIDToName_EchoServiceEchoBidirectionalArgs = map[int16]string{
	1: "req1",
}

type EchoServiceEchoBidirectionalResult struct {
	Success *EchoResponse `thrift:"success,0,optional" frugal:"0,optional,EchoResponse" json:"success,omitempty"`
}

func NewEchoServiceEchoBidirectionalResult() *EchoServiceEchoBidirectionalResult {
	return &EchoServiceEchoBidirectionalResult{}
}

func (p *EchoServiceEchoBidirectionalResult) InitDefault() {
}

var EchoServiceEchoBidirectionalResult_Success_DEFAULT *EchoResponse

func (p *EchoServiceEchoBidirectionalResult) GetSuccess() (v *EchoResponse) {
	if !p.IsSetSuccess() {
		return EchoServiceEchoBidirectionalResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EchoServiceEchoBidirectionalResult) SetSuccess(x interface{}) {
	p.Success = x.(*EchoResponse)
}

func (p *EchoServiceEchoBidirectionalResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EchoServiceEchoBidirectionalResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoServiceEchoBidirectionalResult(%+v)", *p)
}

var fieldIDToName_EchoServiceEchoBidirectionalResult = map[int16]string{
	0: "success",
}

type EchoService_EchoBidirectionalServer interface {
	streaming.Stream

	Recv() (*EchoRequest, error)

	Send(*EchoResponse) error
}

type EchoServiceEchoClientArgs struct {
	Req1 *EchoRequest `thrift:"req1,1" frugal:"1,default,EchoRequest" json:"req1"`
}

func NewEchoServiceEchoClientArgs() *EchoServiceEchoClientArgs {
	return &EchoServiceEchoClientArgs{}
}

func (p *EchoServiceEchoClientArgs) InitDefault() {
}

var EchoServiceEchoClientArgs_Req1_DEFAULT *EchoRequest

func (p *EchoServiceEchoClientArgs) GetReq1() (v *EchoRequest) {
	if !p.IsSetReq1() {
		return EchoServiceEchoClientArgs_Req1_DEFAULT
	}
	return p.Req1
}
func (p *EchoServiceEchoClientArgs) SetReq1(val *EchoRequest) {
	p.Req1 = val
}

func (p *EchoServiceEchoClientArgs) IsSetReq1() bool {
	return p.Req1 != nil
}

func (p *EchoServiceEchoClientArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoServiceEchoClientArgs(%+v)", *p)
}

var fieldIDToName_EchoServiceEchoClientArgs = map[int16]string{
	1: "req1",
}

type EchoServiceEchoClientResult struct {
	Success *EchoResponse `thrift:"success,0,optional" frugal:"0,optional,EchoResponse" json:"success,omitempty"`
}

func NewEchoServiceEchoClientResult() *EchoServiceEchoClientResult {
	return &EchoServiceEchoClientResult{}
}

func (p *EchoServiceEchoClientResult) InitDefault() {
}

var EchoServiceEchoClientResult_Success_DEFAULT *EchoResponse

func (p *EchoServiceEchoClientResult) GetSuccess() (v *EchoResponse) {
	if !p.IsSetSuccess() {
		return EchoServiceEchoClientResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EchoServiceEchoClientResult) SetSuccess(x interface{}) {
	p.Success = x.(*EchoResponse)
}

func (p *EchoServiceEchoClientResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EchoServiceEchoClientResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoServiceEchoClientResult(%+v)", *p)
}

var fieldIDToName_EchoServiceEchoClientResult = map[int16]string{
	0: "success",
}

type EchoService_EchoClientServer interface {
	streaming.Stream

	Recv() (*EchoRequest, error)

	SendAndClose(*EchoResponse) error
}

type EchoServiceEchoServerArgs struct {
	Req1 *EchoRequest `thrift:"req1,1" frugal:"1,default,EchoRequest" json:"req1"`
}

func NewEchoServiceEchoServerArgs() *EchoServiceEchoServerArgs {
	return &EchoServiceEchoServerArgs{}
}

func (p *EchoServiceEchoServerArgs) InitDefault() {
}

var EchoServiceEchoServerArgs_Req1_DEFAULT *EchoRequest

func (p *EchoServiceEchoServerArgs) GetReq1() (v *EchoRequest) {
	if !p.IsSetReq1() {
		return EchoServiceEchoServerArgs_Req1_DEFAULT
	}
	return p.Req1
}
func (p *EchoServiceEchoServerArgs) SetReq1(val *EchoRequest) {
	p.Req1 = val
}

func (p *EchoServiceEchoServerArgs) IsSetReq1() bool {
	return p.Req1 != nil
}

func (p *EchoServiceEchoServerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoServiceEchoServerArgs(%+v)", *p)
}

var fieldIDToName_EchoServiceEchoServerArgs = map[int16]string{
	1: "req1",
}

type EchoServiceEchoServerResult struct {
	Success *EchoResponse `thrift:"success,0,optional" frugal:"0,optional,EchoResponse" json:"success,omitempty"`
}

func NewEchoServiceEchoServerResult() *EchoServiceEchoServerResult {
	return &EchoServiceEchoServerResult{}
}

func (p *EchoServiceEchoServerResult) InitDefault() {
}

var EchoServiceEchoServerResult_Success_DEFAULT *EchoResponse

func (p *EchoServiceEchoServerResult) GetSuccess() (v *EchoResponse) {
	if !p.IsSetSuccess() {
		return EchoServiceEchoServerResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EchoServiceEchoServerResult) SetSuccess(x interface{}) {
	p.Success = x.(*EchoResponse)
}

func (p *EchoServiceEchoServerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EchoServiceEchoServerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoServiceEchoServerResult(%+v)", *p)
}

var fieldIDToName_EchoServiceEchoServerResult = map[int16]string{
	0: "success",
}

type EchoService_EchoServerServer interface {
	streaming.Stream

	Send(*EchoResponse) error
}

type EchoServiceEchoUnaryArgs struct {
	Req1 *EchoRequest `thrift:"req1,1" frugal:"1,default,EchoRequest" json:"req1"`
}

func NewEchoServiceEchoUnaryArgs() *EchoServiceEchoUnaryArgs {
	return &EchoServiceEchoUnaryArgs{}
}

func (p *EchoServiceEchoUnaryArgs) InitDefault() {
}

var EchoServiceEchoUnaryArgs_Req1_DEFAULT *EchoRequest

func (p *EchoServiceEchoUnaryArgs) GetReq1() (v *EchoRequest) {
	if !p.IsSetReq1() {
		return EchoServiceEchoUnaryArgs_Req1_DEFAULT
	}
	return p.Req1
}
func (p *EchoServiceEchoUnaryArgs) SetReq1(val *EchoRequest) {
	p.Req1 = val
}

func (p *EchoServiceEchoUnaryArgs) IsSetReq1() bool {
	return p.Req1 != nil
}

func (p *EchoServiceEchoUnaryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoServiceEchoUnaryArgs(%+v)", *p)
}

var fieldIDToName_EchoServiceEchoUnaryArgs = map[int16]string{
	1: "req1",
}

type EchoServiceEchoUnaryResult struct {
	Success *EchoResponse `thrift:"success,0,optional" frugal:"0,optional,EchoResponse" json:"success,omitempty"`
}

func NewEchoServiceEchoUnaryResult() *EchoServiceEchoUnaryResult {
	return &EchoServiceEchoUnaryResult{}
}

func (p *EchoServiceEchoUnaryResult) InitDefault() {
}

var EchoServiceEchoUnaryResult_Success_DEFAULT *EchoResponse

func (p *EchoServiceEchoUnaryResult) GetSuccess() (v *EchoResponse) {
	if !p.IsSetSuccess() {
		return EchoServiceEchoUnaryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EchoServiceEchoUnaryResult) SetSuccess(x interface{}) {
	p.Success = x.(*EchoResponse)
}

func (p *EchoServiceEchoUnaryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EchoServiceEchoUnaryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoServiceEchoUnaryResult(%+v)", *p)
}

var fieldIDToName_EchoServiceEchoUnaryResult = map[int16]string{
	0: "success",
}

type EchoServiceEchoPingPongArgs struct {
	Req1 *EchoRequest `thrift:"req1,1" frugal:"1,default,EchoRequest" json:"req1"`
	Req2 *EchoRequest `thrift:"req2,2" frugal:"2,default,EchoRequest" json:"req2"`
}

func NewEchoServiceEchoPingPongArgs() *EchoServiceEchoPingPongArgs {
	return &EchoServiceEchoPingPongArgs{}
}

func (p *EchoServiceEchoPingPongArgs) InitDefault() {
}

var EchoServiceEchoPingPongArgs_Req1_DEFAULT *EchoRequest

func (p *EchoServiceEchoPingPongArgs) GetReq1() (v *EchoRequest) {
	if !p.IsSetReq1() {
		return EchoServiceEchoPingPongArgs_Req1_DEFAULT
	}
	return p.Req1
}

var EchoServiceEchoPingPongArgs_Req2_DEFAULT *EchoRequest

func (p *EchoServiceEchoPingPongArgs) GetReq2() (v *EchoRequest) {
	if !p.IsSetReq2() {
		return EchoServiceEchoPingPongArgs_Req2_DEFAULT
	}
	return p.Req2
}
func (p *EchoServiceEchoPingPongArgs) SetReq1(val *EchoRequest) {
	p.Req1 = val
}
func (p *EchoServiceEchoPingPongArgs) SetReq2(val *EchoRequest) {
	p.Req2 = val
}

func (p *EchoServiceEchoPingPongArgs) IsSetReq1() bool {
	return p.Req1 != nil
}

func (p *EchoServiceEchoPingPongArgs) IsSetReq2() bool {
	return p.Req2 != nil
}

func (p *EchoServiceEchoPingPongArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoServiceEchoPingPongArgs(%+v)", *p)
}

var fieldIDToName_EchoServiceEchoPingPongArgs = map[int16]string{
	1: "req1",
	2: "req2",
}

type EchoServiceEchoPingPongResult struct {
	Success *EchoResponse  `thrift:"success,0,optional" frugal:"0,optional,EchoResponse" json:"success,omitempty"`
	E       *EchoException `thrift:"e,1,optional" frugal:"1,optional,EchoException" json:"e,omitempty"`
}

func NewEchoServiceEchoPingPongResult() *EchoServiceEchoPingPongResult {
	return &EchoServiceEchoPingPongResult{}
}

func (p *EchoServiceEchoPingPongResult) InitDefault() {
}

var EchoServiceEchoPingPongResult_Success_DEFAULT *EchoResponse

func (p *EchoServiceEchoPingPongResult) GetSuccess() (v *EchoResponse) {
	if !p.IsSetSuccess() {
		return EchoServiceEchoPingPongResult_Success_DEFAULT
	}
	return p.Success
}

var EchoServiceEchoPingPongResult_E_DEFAULT *EchoException

func (p *EchoServiceEchoPingPongResult) GetE() (v *EchoException) {
	if !p.IsSetE() {
		return EchoServiceEchoPingPongResult_E_DEFAULT
	}
	return p.E
}
func (p *EchoServiceEchoPingPongResult) SetSuccess(x interface{}) {
	p.Success = x.(*EchoResponse)
}
func (p *EchoServiceEchoPingPongResult) SetE(val *EchoException) {
	p.E = val
}

func (p *EchoServiceEchoPingPongResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EchoServiceEchoPingPongResult) IsSetE() bool {
	return p.E != nil
}

func (p *EchoServiceEchoPingPongResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoServiceEchoPingPongResult(%+v)", *p)
}

var fieldIDToName_EchoServiceEchoPingPongResult = map[int16]string{
	0: "success",
	1: "e",
}

type EchoServiceEchoOnewayArgs struct {
	Req1 *EchoRequest `thrift:"req1,1" frugal:"1,default,EchoRequest" json:"req1"`
}

func NewEchoServiceEchoOnewayArgs() *EchoServiceEchoOnewayArgs {
	return &EchoServiceEchoOnewayArgs{}
}

func (p *EchoServiceEchoOnewayArgs) InitDefault() {
}

var EchoServiceEchoOnewayArgs_Req1_DEFAULT *EchoRequest

func (p *EchoServiceEchoOnewayArgs) GetReq1() (v *EchoRequest) {
	if !p.IsSetReq1() {
		return EchoServiceEchoOnewayArgs_Req1_DEFAULT
	}
	return p.Req1
}
func (p *EchoServiceEchoOnewayArgs) SetReq1(val *EchoRequest) {
	p.Req1 = val
}

func (p *EchoServiceEchoOnewayArgs) IsSetReq1() bool {
	return p.Req1 != nil
}

func (p *EchoServiceEchoOnewayArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoServiceEchoOnewayArgs(%+v)", *p)
}

var fieldIDToName_EchoServiceEchoOnewayArgs = map[int16]string{
	1: "req1",
}

type EchoServiceEchoOnewayResult struct {
}

func NewEchoServiceEchoOnewayResult() *EchoServiceEchoOnewayResult {
	return &EchoServiceEchoOnewayResult{}
}

func (p *EchoServiceEchoOnewayResult) InitDefault() {
}

func (p *EchoServiceEchoOnewayResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoServiceEchoOnewayResult(%+v)", *p)
}

var fieldIDToName_EchoServiceEchoOnewayResult = map[int16]string{}

type EchoServicePingArgs struct {
}

func NewEchoServicePingArgs() *EchoServicePingArgs {
	return &EchoServicePingArgs{}
}

func (p *EchoServicePingArgs) InitDefault() {
}

func (p *EchoServicePingArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoServicePingArgs(%+v)", *p)
}

var fieldIDToName_EchoServicePingArgs = map[int16]string{}

type EchoServicePingResult struct {
}

func NewEchoServicePingResult() *EchoServicePingResult {
	return &EchoServicePingResult{}
}

func (p *EchoServicePingResult) InitDefault() {
}

func (p *EchoServicePingResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoServicePingResult(%+v)", *p)
}

var fieldIDToName_EchoServicePingResult = map[int16]string{}

type PingPongOnlyService interface {
	EchoPingPongNew(ctx context.Context, req1 *EchoRequest) (r *EchoResponse, err error)
}

type PingPongOnlyServiceEchoPingPongNewArgs struct {
	Req1 *EchoRequest `thrift:"req1,1" frugal:"1,default,EchoRequest" json:"req1"`
}

func NewPingPongOnlyServiceEchoPingPongNewArgs() *PingPongOnlyServiceEchoPingPongNewArgs {
	return &PingPongOnlyServiceEchoPingPongNewArgs{}
}

func (p *PingPongOnlyServiceEchoPingPongNewArgs) InitDefault() {
}

var PingPongOnlyServiceEchoPingPongNewArgs_Req1_DEFAULT *EchoRequest

func (p *PingPongOnlyServiceEchoPingPongNewArgs) GetReq1() (v *EchoRequest) {
	if !p.IsSetReq1() {
		return PingPongOnlyServiceEchoPingPongNewArgs_Req1_DEFAULT
	}
	return p.Req1
}
func (p *PingPongOnlyServiceEchoPingPongNewArgs) SetReq1(val *EchoRequest) {
	p.Req1 = val
}

func (p *PingPongOnlyServiceEchoPingPongNewArgs) IsSetReq1() bool {
	return p.Req1 != nil
}

func (p *PingPongOnlyServiceEchoPingPongNewArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PingPongOnlyServiceEchoPingPongNewArgs(%+v)", *p)
}

var fieldIDToName_PingPongOnlyServiceEchoPingPongNewArgs = map[int16]string{
	1: "req1",
}

type PingPongOnlyServiceEchoPingPongNewResult struct {
	Success *EchoResponse `thrift:"success,0,optional" frugal:"0,optional,EchoResponse" json:"success,omitempty"`
}

func NewPingPongOnlyServiceEchoPingPongNewResult() *PingPongOnlyServiceEchoPingPongNewResult {
	return &PingPongOnlyServiceEchoPingPongNewResult{}
}

func (p *PingPongOnlyServiceEchoPingPongNewResult) InitDefault() {
}

var PingPongOnlyServiceEchoPingPongNewResult_Success_DEFAULT *EchoResponse

func (p *PingPongOnlyServiceEchoPingPongNewResult) GetSuccess() (v *EchoResponse) {
	if !p.IsSetSuccess() {
		return PingPongOnlyServiceEchoPingPongNewResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PingPongOnlyServiceEchoPingPongNewResult) SetSuccess(x interface{}) {
	p.Success = x.(*EchoResponse)
}

func (p *PingPongOnlyServiceEchoPingPongNewResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PingPongOnlyServiceEchoPingPongNewResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PingPongOnlyServiceEchoPingPongNewResult(%+v)", *p)
}

var fieldIDToName_PingPongOnlyServiceEchoPingPongNewResult = map[int16]string{
	0: "success",
}

type PingPongOnlyServiceChild interface {
	PingPongOnlyService

	EchoBidirectionalExtended(stream PingPongOnlyServiceChild_EchoBidirectionalExtendedServer) (err error)
}

type PingPongOnlyServiceChildEchoBidirectionalExtendedArgs struct {
	Req1 *EchoRequest `thrift:"req1,1" frugal:"1,default,EchoRequest" json:"req1"`
}

func NewPingPongOnlyServiceChildEchoBidirectionalExtendedArgs() *PingPongOnlyServiceChildEchoBidirectionalExtendedArgs {
	return &PingPongOnlyServiceChildEchoBidirectionalExtendedArgs{}
}

func (p *PingPongOnlyServiceChildEchoBidirectionalExtendedArgs) InitDefault() {
}

var PingPongOnlyServiceChildEchoBidirectionalExtendedArgs_Req1_DEFAULT *EchoRequest

func (p *PingPongOnlyServiceChildEchoBidirectionalExtendedArgs) GetReq1() (v *EchoRequest) {
	if !p.IsSetReq1() {
		return PingPongOnlyServiceChildEchoBidirectionalExtendedArgs_Req1_DEFAULT
	}
	return p.Req1
}
func (p *PingPongOnlyServiceChildEchoBidirectionalExtendedArgs) SetReq1(val *EchoRequest) {
	p.Req1 = val
}

func (p *PingPongOnlyServiceChildEchoBidirectionalExtendedArgs) IsSetReq1() bool {
	return p.Req1 != nil
}

func (p *PingPongOnlyServiceChildEchoBidirectionalExtendedArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PingPongOnlyServiceChildEchoBidirectionalExtendedArgs(%+v)", *p)
}

var fieldIDToName_PingPongOnlyServiceChildEchoBidirectionalExtendedArgs = map[int16]string{
	1: "req1",
}

type PingPongOnlyServiceChildEchoBidirectionalExtendedResult struct {
	Success *EchoResponse `thrift:"success,0,optional" frugal:"0,optional,EchoResponse" json:"success,omitempty"`
}

func NewPingPongOnlyServiceChildEchoBidirectionalExtendedResult() *PingPongOnlyServiceChildEchoBidirectionalExtendedResult {
	return &PingPongOnlyServiceChildEchoBidirectionalExtendedResult{}
}

func (p *PingPongOnlyServiceChildEchoBidirectionalExtendedResult) InitDefault() {
}

var PingPongOnlyServiceChildEchoBidirectionalExtendedResult_Success_DEFAULT *EchoResponse

func (p *PingPongOnlyServiceChildEchoBidirectionalExtendedResult) GetSuccess() (v *EchoResponse) {
	if !p.IsSetSuccess() {
		return PingPongOnlyServiceChildEchoBidirectionalExtendedResult_Success_DEFAULT
	}
	return p.Success
}
func (p *PingPongOnlyServiceChildEchoBidirectionalExtendedResult) SetSuccess(x interface{}) {
	p.Success = x.(*EchoResponse)
}

func (p *PingPongOnlyServiceChildEchoBidirectionalExtendedResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *PingPongOnlyServiceChildEchoBidirectionalExtendedResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("PingPongOnlyServiceChildEchoBidirectionalExtendedResult(%+v)", *p)
}

var fieldIDToName_PingPongOnlyServiceChildEchoBidirectionalExtendedResult = map[int16]string{
	0: "success",
}

type PingPongOnlyServiceChild_EchoBidirectionalExtendedServer interface {
	streaming.Stream

	Recv() (*EchoRequest, error)

	Send(*EchoResponse) error
}

type PingPongOnlyServiceChildChild interface {
	PingPongOnlyServiceChild
}

type StreamOnlyService interface {
	EchoBidirectionalNew(stream StreamOnlyService_EchoBidirectionalNewServer) (err error)
}

type StreamOnlyServiceEchoBidirectionalNewArgs struct {
	Req1 *EchoRequest `thrift:"req1,1" frugal:"1,default,EchoRequest" json:"req1"`
}

func NewStreamOnlyServiceEchoBidirectionalNewArgs() *StreamOnlyServiceEchoBidirectionalNewArgs {
	return &StreamOnlyServiceEchoBidirectionalNewArgs{}
}

func (p *StreamOnlyServiceEchoBidirectionalNewArgs) InitDefault() {
}

var StreamOnlyServiceEchoBidirectionalNewArgs_Req1_DEFAULT *EchoRequest

func (p *StreamOnlyServiceEchoBidirectionalNewArgs) GetReq1() (v *EchoRequest) {
	if !p.IsSetReq1() {
		return StreamOnlyServiceEchoBidirectionalNewArgs_Req1_DEFAULT
	}
	return p.Req1
}
func (p *StreamOnlyServiceEchoBidirectionalNewArgs) SetReq1(val *EchoRequest) {
	p.Req1 = val
}

func (p *StreamOnlyServiceEchoBidirectionalNewArgs) IsSetReq1() bool {
	return p.Req1 != nil
}

func (p *StreamOnlyServiceEchoBidirectionalNewArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StreamOnlyServiceEchoBidirectionalNewArgs(%+v)", *p)
}

var fieldIDToName_StreamOnlyServiceEchoBidirectionalNewArgs = map[int16]string{
	1: "req1",
}

type StreamOnlyServiceEchoBidirectionalNewResult struct {
	Success *EchoResponse `thrift:"success,0,optional" frugal:"0,optional,EchoResponse" json:"success,omitempty"`
}

func NewStreamOnlyServiceEchoBidirectionalNewResult() *StreamOnlyServiceEchoBidirectionalNewResult {
	return &StreamOnlyServiceEchoBidirectionalNewResult{}
}

func (p *StreamOnlyServiceEchoBidirectionalNewResult) InitDefault() {
}

var StreamOnlyServiceEchoBidirectionalNewResult_Success_DEFAULT *EchoResponse

func (p *StreamOnlyServiceEchoBidirectionalNewResult) GetSuccess() (v *EchoResponse) {
	if !p.IsSetSuccess() {
		return StreamOnlyServiceEchoBidirectionalNewResult_Success_DEFAULT
	}
	return p.Success
}
func (p *StreamOnlyServiceEchoBidirectionalNewResult) SetSuccess(x interface{}) {
	p.Success = x.(*EchoResponse)
}

func (p *StreamOnlyServiceEchoBidirectionalNewResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *StreamOnlyServiceEchoBidirectionalNewResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StreamOnlyServiceEchoBidirectionalNewResult(%+v)", *p)
}

var fieldIDToName_StreamOnlyServiceEchoBidirectionalNewResult = map[int16]string{
	0: "success",
}

type StreamOnlyService_EchoBidirectionalNewServer interface {
	streaming.Stream

	Recv() (*EchoRequest, error)

	Send(*EchoResponse) error
}

type StreamOnlyServiceChild interface {
	StreamOnlyService
}

type StreamOnlyServiceChildChild interface {
	StreamOnlyServiceChild
}

type ABCService interface {
	Echo(ctx context.Context, req1 *c.Request, req2 *c.Request) (r *c.Response, err error)

	EchoBidirectional(stream ABCService_EchoBidirectionalServer) (err error)

	EchoServer(req *c.Request, stream ABCService_EchoServerServer) (err error)

	EchoClient(stream ABCService_EchoClientServer) (err error)

	EchoUnary(ctx context.Context, req1 *c.Request) (r *c.Response, err error)
}

type ABCServiceEchoArgs struct {
	Req1 *c.Request `thrift:"req1,1" frugal:"1,default,c.Request" json:"req1"`
	Req2 *c.Request `thrift:"req2,2" frugal:"2,default,c.Request" json:"req2"`
}

func NewABCServiceEchoArgs() *ABCServiceEchoArgs {
	return &ABCServiceEchoArgs{}
}

func (p *ABCServiceEchoArgs) InitDefault() {
}

var ABCServiceEchoArgs_Req1_DEFAULT *c.Request

func (p *ABCServiceEchoArgs) GetReq1() (v *c.Request) {
	if !p.IsSetReq1() {
		return ABCServiceEchoArgs_Req1_DEFAULT
	}
	return p.Req1
}

var ABCServiceEchoArgs_Req2_DEFAULT *c.Request

func (p *ABCServiceEchoArgs) GetReq2() (v *c.Request) {
	if !p.IsSetReq2() {
		return ABCServiceEchoArgs_Req2_DEFAULT
	}
	return p.Req2
}
func (p *ABCServiceEchoArgs) SetReq1(val *c.Request) {
	p.Req1 = val
}
func (p *ABCServiceEchoArgs) SetReq2(val *c.Request) {
	p.Req2 = val
}

func (p *ABCServiceEchoArgs) IsSetReq1() bool {
	return p.Req1 != nil
}

func (p *ABCServiceEchoArgs) IsSetReq2() bool {
	return p.Req2 != nil
}

func (p *ABCServiceEchoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ABCServiceEchoArgs(%+v)", *p)
}

var fieldIDToName_ABCServiceEchoArgs = map[int16]string{
	1: "req1",
	2: "req2",
}

type ABCServiceEchoResult struct {
	Success *c.Response `thrift:"success,0,optional" frugal:"0,optional,c.Response" json:"success,omitempty"`
}

func NewABCServiceEchoResult() *ABCServiceEchoResult {
	return &ABCServiceEchoResult{}
}

func (p *ABCServiceEchoResult) InitDefault() {
}

var ABCServiceEchoResult_Success_DEFAULT *c.Response

func (p *ABCServiceEchoResult) GetSuccess() (v *c.Response) {
	if !p.IsSetSuccess() {
		return ABCServiceEchoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ABCServiceEchoResult) SetSuccess(x interface{}) {
	p.Success = x.(*c.Response)
}

func (p *ABCServiceEchoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ABCServiceEchoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ABCServiceEchoResult(%+v)", *p)
}

var fieldIDToName_ABCServiceEchoResult = map[int16]string{
	0: "success",
}

type ABCServiceEchoBidirectionalArgs struct {
	Req1 *c.Request `thrift:"req1,1" frugal:"1,default,c.Request" json:"req1"`
}

func NewABCServiceEchoBidirectionalArgs() *ABCServiceEchoBidirectionalArgs {
	return &ABCServiceEchoBidirectionalArgs{}
}

func (p *ABCServiceEchoBidirectionalArgs) InitDefault() {
}

var ABCServiceEchoBidirectionalArgs_Req1_DEFAULT *c.Request

func (p *ABCServiceEchoBidirectionalArgs) GetReq1() (v *c.Request) {
	if !p.IsSetReq1() {
		return ABCServiceEchoBidirectionalArgs_Req1_DEFAULT
	}
	return p.Req1
}
func (p *ABCServiceEchoBidirectionalArgs) SetReq1(val *c.Request) {
	p.Req1 = val
}

func (p *ABCServiceEchoBidirectionalArgs) IsSetReq1() bool {
	return p.Req1 != nil
}

func (p *ABCServiceEchoBidirectionalArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ABCServiceEchoBidirectionalArgs(%+v)", *p)
}

var fieldIDToName_ABCServiceEchoBidirectionalArgs = map[int16]string{
	1: "req1",
}

type ABCServiceEchoBidirectionalResult struct {
	Success *c.Response `thrift:"success,0,optional" frugal:"0,optional,c.Response" json:"success,omitempty"`
}

func NewABCServiceEchoBidirectionalResult() *ABCServiceEchoBidirectionalResult {
	return &ABCServiceEchoBidirectionalResult{}
}

func (p *ABCServiceEchoBidirectionalResult) InitDefault() {
}

var ABCServiceEchoBidirectionalResult_Success_DEFAULT *c.Response

func (p *ABCServiceEchoBidirectionalResult) GetSuccess() (v *c.Response) {
	if !p.IsSetSuccess() {
		return ABCServiceEchoBidirectionalResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ABCServiceEchoBidirectionalResult) SetSuccess(x interface{}) {
	p.Success = x.(*c.Response)
}

func (p *ABCServiceEchoBidirectionalResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ABCServiceEchoBidirectionalResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ABCServiceEchoBidirectionalResult(%+v)", *p)
}

var fieldIDToName_ABCServiceEchoBidirectionalResult = map[int16]string{
	0: "success",
}

type ABCService_EchoBidirectionalServer interface {
	streaming.Stream

	Recv() (*c.Request, error)

	Send(*c.Response) error
}

type ABCServiceEchoServerArgs struct {
	Req1 *c.Request `thrift:"req1,1" frugal:"1,default,c.Request" json:"req1"`
}

func NewABCServiceEchoServerArgs() *ABCServiceEchoServerArgs {
	return &ABCServiceEchoServerArgs{}
}

func (p *ABCServiceEchoServerArgs) InitDefault() {
}

var ABCServiceEchoServerArgs_Req1_DEFAULT *c.Request

func (p *ABCServiceEchoServerArgs) GetReq1() (v *c.Request) {
	if !p.IsSetReq1() {
		return ABCServiceEchoServerArgs_Req1_DEFAULT
	}
	return p.Req1
}
func (p *ABCServiceEchoServerArgs) SetReq1(val *c.Request) {
	p.Req1 = val
}

func (p *ABCServiceEchoServerArgs) IsSetReq1() bool {
	return p.Req1 != nil
}

func (p *ABCServiceEchoServerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ABCServiceEchoServerArgs(%+v)", *p)
}

var fieldIDToName_ABCServiceEchoServerArgs = map[int16]string{
	1: "req1",
}

type ABCServiceEchoServerResult struct {
	Success *c.Response `thrift:"success,0,optional" frugal:"0,optional,c.Response" json:"success,omitempty"`
}

func NewABCServiceEchoServerResult() *ABCServiceEchoServerResult {
	return &ABCServiceEchoServerResult{}
}

func (p *ABCServiceEchoServerResult) InitDefault() {
}

var ABCServiceEchoServerResult_Success_DEFAULT *c.Response

func (p *ABCServiceEchoServerResult) GetSuccess() (v *c.Response) {
	if !p.IsSetSuccess() {
		return ABCServiceEchoServerResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ABCServiceEchoServerResult) SetSuccess(x interface{}) {
	p.Success = x.(*c.Response)
}

func (p *ABCServiceEchoServerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ABCServiceEchoServerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ABCServiceEchoServerResult(%+v)", *p)
}

var fieldIDToName_ABCServiceEchoServerResult = map[int16]string{
	0: "success",
}

type ABCService_EchoServerServer interface {
	streaming.Stream

	Send(*c.Response) error
}

type ABCServiceEchoClientArgs struct {
	Req1 *c.Request `thrift:"req1,1" frugal:"1,default,c.Request" json:"req1"`
}

func NewABCServiceEchoClientArgs() *ABCServiceEchoClientArgs {
	return &ABCServiceEchoClientArgs{}
}

func (p *ABCServiceEchoClientArgs) InitDefault() {
}

var ABCServiceEchoClientArgs_Req1_DEFAULT *c.Request

func (p *ABCServiceEchoClientArgs) GetReq1() (v *c.Request) {
	if !p.IsSetReq1() {
		return ABCServiceEchoClientArgs_Req1_DEFAULT
	}
	return p.Req1
}
func (p *ABCServiceEchoClientArgs) SetReq1(val *c.Request) {
	p.Req1 = val
}

func (p *ABCServiceEchoClientArgs) IsSetReq1() bool {
	return p.Req1 != nil
}

func (p *ABCServiceEchoClientArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ABCServiceEchoClientArgs(%+v)", *p)
}

var fieldIDToName_ABCServiceEchoClientArgs = map[int16]string{
	1: "req1",
}

type ABCServiceEchoClientResult struct {
	Success *c.Response `thrift:"success,0,optional" frugal:"0,optional,c.Response" json:"success,omitempty"`
}

func NewABCServiceEchoClientResult() *ABCServiceEchoClientResult {
	return &ABCServiceEchoClientResult{}
}

func (p *ABCServiceEchoClientResult) InitDefault() {
}

var ABCServiceEchoClientResult_Success_DEFAULT *c.Response

func (p *ABCServiceEchoClientResult) GetSuccess() (v *c.Response) {
	if !p.IsSetSuccess() {
		return ABCServiceEchoClientResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ABCServiceEchoClientResult) SetSuccess(x interface{}) {
	p.Success = x.(*c.Response)
}

func (p *ABCServiceEchoClientResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ABCServiceEchoClientResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ABCServiceEchoClientResult(%+v)", *p)
}

var fieldIDToName_ABCServiceEchoClientResult = map[int16]string{
	0: "success",
}

type ABCService_EchoClientServer interface {
	streaming.Stream

	Recv() (*c.Request, error)

	SendAndClose(*c.Response) error
}

type ABCServiceEchoUnaryArgs struct {
	Req1 *c.Request `thrift:"req1,1" frugal:"1,default,c.Request" json:"req1"`
}

func NewABCServiceEchoUnaryArgs() *ABCServiceEchoUnaryArgs {
	return &ABCServiceEchoUnaryArgs{}
}

func (p *ABCServiceEchoUnaryArgs) InitDefault() {
}

var ABCServiceEchoUnaryArgs_Req1_DEFAULT *c.Request

func (p *ABCServiceEchoUnaryArgs) GetReq1() (v *c.Request) {
	if !p.IsSetReq1() {
		return ABCServiceEchoUnaryArgs_Req1_DEFAULT
	}
	return p.Req1
}
func (p *ABCServiceEchoUnaryArgs) SetReq1(val *c.Request) {
	p.Req1 = val
}

func (p *ABCServiceEchoUnaryArgs) IsSetReq1() bool {
	return p.Req1 != nil
}

func (p *ABCServiceEchoUnaryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ABCServiceEchoUnaryArgs(%+v)", *p)
}

var fieldIDToName_ABCServiceEchoUnaryArgs = map[int16]string{
	1: "req1",
}

type ABCServiceEchoUnaryResult struct {
	Success *c.Response `thrift:"success,0,optional" frugal:"0,optional,c.Response" json:"success,omitempty"`
}

func NewABCServiceEchoUnaryResult() *ABCServiceEchoUnaryResult {
	return &ABCServiceEchoUnaryResult{}
}

func (p *ABCServiceEchoUnaryResult) InitDefault() {
}

var ABCServiceEchoUnaryResult_Success_DEFAULT *c.Response

func (p *ABCServiceEchoUnaryResult) GetSuccess() (v *c.Response) {
	if !p.IsSetSuccess() {
		return ABCServiceEchoUnaryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *ABCServiceEchoUnaryResult) SetSuccess(x interface{}) {
	p.Success = x.(*c.Response)
}

func (p *ABCServiceEchoUnaryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ABCServiceEchoUnaryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ABCServiceEchoUnaryResult(%+v)", *p)
}

var fieldIDToName_ABCServiceEchoUnaryResult = map[int16]string{
	0: "success",
}

type LowerService interface {
	EchoBidirectional(stream LowerService_echo_bidirectionalServer) (err error)

	EchoClient(stream LowerService_echo_clientServer) (err error)

	EchoServer(req *LowerRequest, stream LowerService_echo_serverServer) (err error)

	EchoUnary(ctx context.Context, req1 *LowerRequest) (r *LowerResponse, err error)

	EchoPingPong(ctx context.Context, req1 *LowerRequest) (r *LowerResponse, err error)
}

type LowerServiceEchoBidirectionalArgs struct {
	Req1 *LowerRequest `thrift:"req1,1" frugal:"1,default,LowerRequest" json:"req1"`
}

func NewLowerServiceEchoBidirectionalArgs() *LowerServiceEchoBidirectionalArgs {
	return &LowerServiceEchoBidirectionalArgs{}
}

func (p *LowerServiceEchoBidirectionalArgs) InitDefault() {
}

var LowerServiceEchoBidirectionalArgs_Req1_DEFAULT *LowerRequest

func (p *LowerServiceEchoBidirectionalArgs) GetReq1() (v *LowerRequest) {
	if !p.IsSetReq1() {
		return LowerServiceEchoBidirectionalArgs_Req1_DEFAULT
	}
	return p.Req1
}
func (p *LowerServiceEchoBidirectionalArgs) SetReq1(val *LowerRequest) {
	p.Req1 = val
}

func (p *LowerServiceEchoBidirectionalArgs) IsSetReq1() bool {
	return p.Req1 != nil
}

func (p *LowerServiceEchoBidirectionalArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LowerServiceEchoBidirectionalArgs(%+v)", *p)
}

var fieldIDToName_LowerServiceEchoBidirectionalArgs = map[int16]string{
	1: "req1",
}

type LowerServiceEchoBidirectionalResult struct {
	Success *LowerResponse `thrift:"success,0,optional" frugal:"0,optional,LowerResponse" json:"success,omitempty"`
}

func NewLowerServiceEchoBidirectionalResult() *LowerServiceEchoBidirectionalResult {
	return &LowerServiceEchoBidirectionalResult{}
}

func (p *LowerServiceEchoBidirectionalResult) InitDefault() {
}

var LowerServiceEchoBidirectionalResult_Success_DEFAULT *LowerResponse

func (p *LowerServiceEchoBidirectionalResult) GetSuccess() (v *LowerResponse) {
	if !p.IsSetSuccess() {
		return LowerServiceEchoBidirectionalResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LowerServiceEchoBidirectionalResult) SetSuccess(x interface{}) {
	p.Success = x.(*LowerResponse)
}

func (p *LowerServiceEchoBidirectionalResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LowerServiceEchoBidirectionalResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LowerServiceEchoBidirectionalResult(%+v)", *p)
}

var fieldIDToName_LowerServiceEchoBidirectionalResult = map[int16]string{
	0: "success",
}

type LowerService_echo_bidirectionalServer interface {
	streaming.Stream

	Recv() (*LowerRequest, error)

	Send(*LowerResponse) error
}

type LowerServiceEchoClientArgs struct {
	Req1 *LowerRequest `thrift:"req1,1" frugal:"1,default,LowerRequest" json:"req1"`
}

func NewLowerServiceEchoClientArgs() *LowerServiceEchoClientArgs {
	return &LowerServiceEchoClientArgs{}
}

func (p *LowerServiceEchoClientArgs) InitDefault() {
}

var LowerServiceEchoClientArgs_Req1_DEFAULT *LowerRequest

func (p *LowerServiceEchoClientArgs) GetReq1() (v *LowerRequest) {
	if !p.IsSetReq1() {
		return LowerServiceEchoClientArgs_Req1_DEFAULT
	}
	return p.Req1
}
func (p *LowerServiceEchoClientArgs) SetReq1(val *LowerRequest) {
	p.Req1 = val
}

func (p *LowerServiceEchoClientArgs) IsSetReq1() bool {
	return p.Req1 != nil
}

func (p *LowerServiceEchoClientArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LowerServiceEchoClientArgs(%+v)", *p)
}

var fieldIDToName_LowerServiceEchoClientArgs = map[int16]string{
	1: "req1",
}

type LowerServiceEchoClientResult struct {
	Success *LowerResponse `thrift:"success,0,optional" frugal:"0,optional,LowerResponse" json:"success,omitempty"`
}

func NewLowerServiceEchoClientResult() *LowerServiceEchoClientResult {
	return &LowerServiceEchoClientResult{}
}

func (p *LowerServiceEchoClientResult) InitDefault() {
}

var LowerServiceEchoClientResult_Success_DEFAULT *LowerResponse

func (p *LowerServiceEchoClientResult) GetSuccess() (v *LowerResponse) {
	if !p.IsSetSuccess() {
		return LowerServiceEchoClientResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LowerServiceEchoClientResult) SetSuccess(x interface{}) {
	p.Success = x.(*LowerResponse)
}

func (p *LowerServiceEchoClientResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LowerServiceEchoClientResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LowerServiceEchoClientResult(%+v)", *p)
}

var fieldIDToName_LowerServiceEchoClientResult = map[int16]string{
	0: "success",
}

type LowerService_echo_clientServer interface {
	streaming.Stream

	Recv() (*LowerRequest, error)

	SendAndClose(*LowerResponse) error
}

type LowerServiceEchoServerArgs struct {
	Req1 *LowerRequest `thrift:"req1,1" frugal:"1,default,LowerRequest" json:"req1"`
}

func NewLowerServiceEchoServerArgs() *LowerServiceEchoServerArgs {
	return &LowerServiceEchoServerArgs{}
}

func (p *LowerServiceEchoServerArgs) InitDefault() {
}

var LowerServiceEchoServerArgs_Req1_DEFAULT *LowerRequest

func (p *LowerServiceEchoServerArgs) GetReq1() (v *LowerRequest) {
	if !p.IsSetReq1() {
		return LowerServiceEchoServerArgs_Req1_DEFAULT
	}
	return p.Req1
}
func (p *LowerServiceEchoServerArgs) SetReq1(val *LowerRequest) {
	p.Req1 = val
}

func (p *LowerServiceEchoServerArgs) IsSetReq1() bool {
	return p.Req1 != nil
}

func (p *LowerServiceEchoServerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LowerServiceEchoServerArgs(%+v)", *p)
}

var fieldIDToName_LowerServiceEchoServerArgs = map[int16]string{
	1: "req1",
}

type LowerServiceEchoServerResult struct {
	Success *LowerResponse `thrift:"success,0,optional" frugal:"0,optional,LowerResponse" json:"success,omitempty"`
}

func NewLowerServiceEchoServerResult() *LowerServiceEchoServerResult {
	return &LowerServiceEchoServerResult{}
}

func (p *LowerServiceEchoServerResult) InitDefault() {
}

var LowerServiceEchoServerResult_Success_DEFAULT *LowerResponse

func (p *LowerServiceEchoServerResult) GetSuccess() (v *LowerResponse) {
	if !p.IsSetSuccess() {
		return LowerServiceEchoServerResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LowerServiceEchoServerResult) SetSuccess(x interface{}) {
	p.Success = x.(*LowerResponse)
}

func (p *LowerServiceEchoServerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LowerServiceEchoServerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LowerServiceEchoServerResult(%+v)", *p)
}

var fieldIDToName_LowerServiceEchoServerResult = map[int16]string{
	0: "success",
}

type LowerService_echo_serverServer interface {
	streaming.Stream

	Send(*LowerResponse) error
}

type LowerServiceEchoUnaryArgs struct {
	Req1 *LowerRequest `thrift:"req1,1" frugal:"1,default,LowerRequest" json:"req1"`
}

func NewLowerServiceEchoUnaryArgs() *LowerServiceEchoUnaryArgs {
	return &LowerServiceEchoUnaryArgs{}
}

func (p *LowerServiceEchoUnaryArgs) InitDefault() {
}

var LowerServiceEchoUnaryArgs_Req1_DEFAULT *LowerRequest

func (p *LowerServiceEchoUnaryArgs) GetReq1() (v *LowerRequest) {
	if !p.IsSetReq1() {
		return LowerServiceEchoUnaryArgs_Req1_DEFAULT
	}
	return p.Req1
}
func (p *LowerServiceEchoUnaryArgs) SetReq1(val *LowerRequest) {
	p.Req1 = val
}

func (p *LowerServiceEchoUnaryArgs) IsSetReq1() bool {
	return p.Req1 != nil
}

func (p *LowerServiceEchoUnaryArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LowerServiceEchoUnaryArgs(%+v)", *p)
}

var fieldIDToName_LowerServiceEchoUnaryArgs = map[int16]string{
	1: "req1",
}

type LowerServiceEchoUnaryResult struct {
	Success *LowerResponse `thrift:"success,0,optional" frugal:"0,optional,LowerResponse" json:"success,omitempty"`
}

func NewLowerServiceEchoUnaryResult() *LowerServiceEchoUnaryResult {
	return &LowerServiceEchoUnaryResult{}
}

func (p *LowerServiceEchoUnaryResult) InitDefault() {
}

var LowerServiceEchoUnaryResult_Success_DEFAULT *LowerResponse

func (p *LowerServiceEchoUnaryResult) GetSuccess() (v *LowerResponse) {
	if !p.IsSetSuccess() {
		return LowerServiceEchoUnaryResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LowerServiceEchoUnaryResult) SetSuccess(x interface{}) {
	p.Success = x.(*LowerResponse)
}

func (p *LowerServiceEchoUnaryResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LowerServiceEchoUnaryResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LowerServiceEchoUnaryResult(%+v)", *p)
}

var fieldIDToName_LowerServiceEchoUnaryResult = map[int16]string{
	0: "success",
}

type LowerServiceEchoPingPongArgs struct {
	Req1 *LowerRequest `thrift:"req1,1" frugal:"1,default,LowerRequest" json:"req1"`
}

func NewLowerServiceEchoPingPongArgs() *LowerServiceEchoPingPongArgs {
	return &LowerServiceEchoPingPongArgs{}
}

func (p *LowerServiceEchoPingPongArgs) InitDefault() {
}

var LowerServiceEchoPingPongArgs_Req1_DEFAULT *LowerRequest

func (p *LowerServiceEchoPingPongArgs) GetReq1() (v *LowerRequest) {
	if !p.IsSetReq1() {
		return LowerServiceEchoPingPongArgs_Req1_DEFAULT
	}
	return p.Req1
}
func (p *LowerServiceEchoPingPongArgs) SetReq1(val *LowerRequest) {
	p.Req1 = val
}

func (p *LowerServiceEchoPingPongArgs) IsSetReq1() bool {
	return p.Req1 != nil
}

func (p *LowerServiceEchoPingPongArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LowerServiceEchoPingPongArgs(%+v)", *p)
}

var fieldIDToName_LowerServiceEchoPingPongArgs = map[int16]string{
	1: "req1",
}

type LowerServiceEchoPingPongResult struct {
	Success *LowerResponse `thrift:"success,0,optional" frugal:"0,optional,LowerResponse" json:"success,omitempty"`
}

func NewLowerServiceEchoPingPongResult() *LowerServiceEchoPingPongResult {
	return &LowerServiceEchoPingPongResult{}
}

func (p *LowerServiceEchoPingPongResult) InitDefault() {
}

var LowerServiceEchoPingPongResult_Success_DEFAULT *LowerResponse

func (p *LowerServiceEchoPingPongResult) GetSuccess() (v *LowerResponse) {
	if !p.IsSetSuccess() {
		return LowerServiceEchoPingPongResult_Success_DEFAULT
	}
	return p.Success
}
func (p *LowerServiceEchoPingPongResult) SetSuccess(x interface{}) {
	p.Success = x.(*LowerResponse)
}

func (p *LowerServiceEchoPingPongResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *LowerServiceEchoPingPongResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("LowerServiceEchoPingPongResult(%+v)", *p)
}

var fieldIDToName_LowerServiceEchoPingPongResult = map[int16]string{
	0: "success",
}

// exceptions of methods in EchoService.
var (
	_ error = (*EchoException)(nil)
)

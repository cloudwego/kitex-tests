// Code generated by Kitex v0.8.0. DO NOT EDIT.

package pbservice

import (
	"context"
	grpc_pb "github.com/cloudwego/kitex-tests/thrift_streaming/kitex_gen/grpc_pb"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	transport "github.com/cloudwego/kitex/transport"
	"github.com/cloudwego/kitex/client/streamclient"
	"github.com/cloudwego/kitex/client/callopt/streamcall"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	Echo(ctx context.Context, callOptions ...callopt.Option) (stream PBService_EchoClient, err error)
	EchoClient(ctx context.Context, callOptions ...callopt.Option) (stream PBService_EchoClientClient, err error)
	EchoServer(ctx context.Context, Req *grpc_pb.Request, callOptions ...callopt.Option) (stream PBService_EchoServerClient, err error)
	EchoPingPong(ctx context.Context, Req *grpc_pb.Request, callOptions ...callopt.Option) (r *grpc_pb.Response, err error)
}

// StreamClient is designed to provide Interface for Streaming APIs.
type StreamClient interface {
	Echo(ctx context.Context, callOptions ...streamcall.Option) (stream PBService_EchoClient, err error)
	EchoClient(ctx context.Context, callOptions ...streamcall.Option) (stream PBService_EchoClientClient, err error)
	EchoServer(ctx context.Context, Req *grpc_pb.Request, callOptions ...streamcall.Option) (stream PBService_EchoServerClient, err error)
}

type PBService_EchoClient interface {
	streaming.Stream
	Send(*grpc_pb.Request) error
	Recv() (*grpc_pb.Response, error)
}

type PBService_EchoClientClient interface {
	streaming.Stream
	Send(*grpc_pb.Request) error
	CloseAndRecv() (*grpc_pb.Response, error)
}

type PBService_EchoServerClient interface {
	streaming.Stream
	Recv() (*grpc_pb.Response, error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, client.WithTransportProtocol(transport.GRPC))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kPBServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kPBServiceClient struct {
	*kClient
}

func (p *kPBServiceClient) Echo(ctx context.Context, callOptions ...callopt.Option) (stream PBService_EchoClient, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.Echo(ctx)
}

func (p *kPBServiceClient) EchoClient(ctx context.Context, callOptions ...callopt.Option) (stream PBService_EchoClientClient, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.EchoClient(ctx)
}

func (p *kPBServiceClient) EchoServer(ctx context.Context, Req *grpc_pb.Request, callOptions ...callopt.Option) (stream PBService_EchoServerClient, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.EchoServer(ctx, Req)
}

func (p *kPBServiceClient) EchoPingPong(ctx context.Context, Req *grpc_pb.Request, callOptions ...callopt.Option) (r *grpc_pb.Response, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.EchoPingPong(ctx, Req)
}

// NewStreamClient creates a stream client for the service's streaming APIs defined in IDL.
func NewStreamClient(destService string, opts ...streamclient.Option) (StreamClient, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))
	options = append(options, client.WithTransportProtocol(transport.GRPC))
	options = append(options, streamclient.GetClientOptions(opts)...)

	kc, err := client.NewClient(serviceInfoForStreamClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kPBServiceStreamClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewStreamClient creates a stream client for the service's streaming APIs defined in IDL.
// It panics if any error occurs.
func MustNewStreamClient(destService string, opts ...streamclient.Option) StreamClient {
	kc, err := NewStreamClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kPBServiceStreamClient struct {
	*kClient
}

func (p *kPBServiceStreamClient) Echo(ctx context.Context, callOptions ...streamcall.Option) (stream PBService_EchoClient, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, streamcall.GetCallOptions(callOptions))
	return p.kClient.Echo(ctx)
}

func (p *kPBServiceStreamClient) EchoClient(ctx context.Context, callOptions ...streamcall.Option) (stream PBService_EchoClientClient, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, streamcall.GetCallOptions(callOptions))
	return p.kClient.EchoClient(ctx)
}

func (p *kPBServiceStreamClient) EchoServer(ctx context.Context, Req *grpc_pb.Request, callOptions ...streamcall.Option) (stream PBService_EchoServerClient, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, streamcall.GetCallOptions(callOptions))
	return p.kClient.EchoServer(ctx, Req)
}

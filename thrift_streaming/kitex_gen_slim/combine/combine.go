// Code generated by thriftgo (0.3.10). DO NOT EDIT.

package combine

import (
	"context"
	"fmt"
	"github.com/cloudwego/kitex/pkg/streaming"
	"strings"
)

type Req struct {
	Message string `thrift:"message,1,required" frugal:"1,required,string" json:"message"`
}

func NewReq() *Req {
	return &Req{}
}

func (p *Req) InitDefault() {
	*p = Req{}
}

func (p *Req) GetMessage() (v string) {
	return p.Message
}
func (p *Req) SetMessage(val string) {
	p.Message = val
}

func (p *Req) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Req(%+v)", *p)
}

func (p *Req) DeepEqual(ano *Req) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Message) {
		return false
	}
	return true
}

func (p *Req) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}

type Rsp struct {
	Message string `thrift:"message,1,required" frugal:"1,required,string" json:"message"`
}

func NewRsp() *Rsp {
	return &Rsp{}
}

func (p *Rsp) InitDefault() {
	*p = Rsp{}
}

func (p *Rsp) GetMessage() (v string) {
	return p.Message
}
func (p *Rsp) SetMessage(val string) {
	p.Message = val
}

func (p *Rsp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Rsp(%+v)", *p)
}

func (p *Rsp) DeepEqual(ano *Rsp) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Message) {
		return false
	}
	return true
}

func (p *Rsp) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}

type A interface {
	Foo(ctx context.Context, req *Req) (r *Rsp, err error)
}

type B interface {
	Bar(stream B_BarServer) (err error)
}

type B_BarServer interface {
	streaming.Stream

	Recv() (*Req, error)

	Send(*Rsp) error
}

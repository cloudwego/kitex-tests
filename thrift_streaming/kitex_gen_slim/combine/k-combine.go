// Code generated by Kitex v0.8.0. DO NOT EDIT.

package combine

import (
	"bytes"
	"fmt"
	"reflect"
	"strings"

	"github.com/apache/thrift/lib/go/thrift"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
	_ = (*bytes.Buffer)(nil)
	_ = (*strings.Builder)(nil)
	_ = reflect.Type(nil)
	_ = thrift.TProtocol(nil)
)

type AFooArgs struct {
	Req *Req `thrift:"req,1" frugal:"1,default,Req" json:"req"`
}

func NewAFooArgs() *AFooArgs {
	return &AFooArgs{}
}

func (p *AFooArgs) InitDefault() {
	*p = AFooArgs{}
}

var AFooArgs_Req_DEFAULT *Req

func (p *AFooArgs) GetReq() (v *Req) {
	if !p.IsSetReq() {
		return AFooArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *AFooArgs) SetReq(val *Req) {
	p.Req = val
}

func (p *AFooArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *AFooArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AFooArgs(%+v)", *p)
}
func (p *AFooArgs) GetFirstArgument() interface{} {
	return p.Req
}

type AFooResult struct {
	Success *Rsp `thrift:"success,0,optional" frugal:"0,optional,Rsp" json:"success,omitempty"`
}

func NewAFooResult() *AFooResult {
	return &AFooResult{}
}

func (p *AFooResult) InitDefault() {
	*p = AFooResult{}
}

var AFooResult_Success_DEFAULT *Rsp

func (p *AFooResult) GetSuccess() (v *Rsp) {
	if !p.IsSetSuccess() {
		return AFooResult_Success_DEFAULT
	}
	return p.Success
}
func (p *AFooResult) SetSuccess(x interface{}) {
	p.Success = x.(*Rsp)
}

func (p *AFooResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *AFooResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AFooResult(%+v)", *p)
}
func (p *AFooResult) GetResult() interface{} {
	return p.Success
}

type BBarArgs struct {
	Req *Req `thrift:"req,1" frugal:"1,default,Req" json:"req"`
}

func NewBBarArgs() *BBarArgs {
	return &BBarArgs{}
}

func (p *BBarArgs) InitDefault() {
	*p = BBarArgs{}
}

var BBarArgs_Req_DEFAULT *Req

func (p *BBarArgs) GetReq() (v *Req) {
	if !p.IsSetReq() {
		return BBarArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BBarArgs) SetReq(val *Req) {
	p.Req = val
}

func (p *BBarArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BBarArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BBarArgs(%+v)", *p)
}
func (p *BBarArgs) GetFirstArgument() interface{} {
	return p.Req
}

type BBarResult struct {
	Success *Rsp `thrift:"success,0,optional" frugal:"0,optional,Rsp" json:"success,omitempty"`
}

func NewBBarResult() *BBarResult {
	return &BBarResult{}
}

func (p *BBarResult) InitDefault() {
	*p = BBarResult{}
}

var BBarResult_Success_DEFAULT *Rsp

func (p *BBarResult) GetSuccess() (v *Rsp) {
	if !p.IsSetSuccess() {
		return BBarResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BBarResult) SetSuccess(x interface{}) {
	p.Success = x.(*Rsp)
}

func (p *BBarResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BBarResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BBarResult(%+v)", *p)
}
func (p *BBarResult) GetResult() interface{} {
	return p.Success
}

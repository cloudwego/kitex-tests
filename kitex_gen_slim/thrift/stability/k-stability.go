// Code generated by Kitex v0.12.3. DO NOT EDIT.

package stability

import (
	"bytes"
	"fmt"
	"reflect"
	"strings"

	"github.com/cloudwego/gopkg/protocol/thrift"

	"github.com/cloudwego/kitex-tests/kitex_gen_slim/base"
	"github.com/cloudwego/kitex-tests/kitex_gen_slim/thrift/instparam"
)

var (
	_ = base.KitexUnusedProtection
	_ = instparam.KitexUnusedProtection
)

// unused protection
var (
	_ = fmt.Formatter(nil)
	_ = (*bytes.Buffer)(nil)
	_ = (*strings.Builder)(nil)
	_ = reflect.Type(nil)
	_ = thrift.STOP
)

type OnewayServiceVisitOnewayArgs struct {
	Req *STRequest `thrift:"req,1" frugal:"1,default,STRequest" json:"req"`
}

func NewOnewayServiceVisitOnewayArgs() *OnewayServiceVisitOnewayArgs {
	return &OnewayServiceVisitOnewayArgs{}
}

func (p *OnewayServiceVisitOnewayArgs) InitDefault() {
}

var OnewayServiceVisitOnewayArgs_Req_DEFAULT *STRequest

func (p *OnewayServiceVisitOnewayArgs) GetReq() (v *STRequest) {
	if !p.IsSetReq() {
		return OnewayServiceVisitOnewayArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *OnewayServiceVisitOnewayArgs) SetReq(val *STRequest) {
	p.Req = val
}

func (p *OnewayServiceVisitOnewayArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OnewayServiceVisitOnewayArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OnewayServiceVisitOnewayArgs(%+v)", *p)
}

func (p *OnewayServiceVisitOnewayArgs) GetFirstArgument() interface{} {
	return p.Req
}

type STServiceTestSTReqArgs struct {
	Req *STRequest `thrift:"req,1" frugal:"1,default,STRequest" json:"req"`
}

func NewSTServiceTestSTReqArgs() *STServiceTestSTReqArgs {
	return &STServiceTestSTReqArgs{}
}

func (p *STServiceTestSTReqArgs) InitDefault() {
}

var STServiceTestSTReqArgs_Req_DEFAULT *STRequest

func (p *STServiceTestSTReqArgs) GetReq() (v *STRequest) {
	if !p.IsSetReq() {
		return STServiceTestSTReqArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *STServiceTestSTReqArgs) SetReq(val *STRequest) {
	p.Req = val
}

func (p *STServiceTestSTReqArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *STServiceTestSTReqArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("STServiceTestSTReqArgs(%+v)", *p)
}

func (p *STServiceTestSTReqArgs) GetFirstArgument() interface{} {
	return p.Req
}

type STServiceTestSTReqResult struct {
	Success *STResponse `thrift:"success,0,optional" frugal:"0,optional,STResponse" json:"success,omitempty"`
}

func NewSTServiceTestSTReqResult() *STServiceTestSTReqResult {
	return &STServiceTestSTReqResult{}
}

func (p *STServiceTestSTReqResult) InitDefault() {
}

var STServiceTestSTReqResult_Success_DEFAULT *STResponse

func (p *STServiceTestSTReqResult) GetSuccess() (v *STResponse) {
	if !p.IsSetSuccess() {
		return STServiceTestSTReqResult_Success_DEFAULT
	}
	return p.Success
}
func (p *STServiceTestSTReqResult) SetSuccess(x interface{}) {
	p.Success = x.(*STResponse)
}

func (p *STServiceTestSTReqResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *STServiceTestSTReqResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("STServiceTestSTReqResult(%+v)", *p)
}

func (p *STServiceTestSTReqResult) GetResult() interface{} {
	return p.Success
}

type STServiceTestObjReqArgs struct {
	Req *instparam.ObjReq `thrift:"req,1" frugal:"1,default,instparam.ObjReq" json:"req"`
}

func NewSTServiceTestObjReqArgs() *STServiceTestObjReqArgs {
	return &STServiceTestObjReqArgs{}
}

func (p *STServiceTestObjReqArgs) InitDefault() {
}

var STServiceTestObjReqArgs_Req_DEFAULT *instparam.ObjReq

func (p *STServiceTestObjReqArgs) GetReq() (v *instparam.ObjReq) {
	if !p.IsSetReq() {
		return STServiceTestObjReqArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *STServiceTestObjReqArgs) SetReq(val *instparam.ObjReq) {
	p.Req = val
}

func (p *STServiceTestObjReqArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *STServiceTestObjReqArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("STServiceTestObjReqArgs(%+v)", *p)
}

func (p *STServiceTestObjReqArgs) GetFirstArgument() interface{} {
	return p.Req
}

type STServiceTestObjReqResult struct {
	Success *instparam.ObjResp `thrift:"success,0,optional" frugal:"0,optional,instparam.ObjResp" json:"success,omitempty"`
}

func NewSTServiceTestObjReqResult() *STServiceTestObjReqResult {
	return &STServiceTestObjReqResult{}
}

func (p *STServiceTestObjReqResult) InitDefault() {
}

var STServiceTestObjReqResult_Success_DEFAULT *instparam.ObjResp

func (p *STServiceTestObjReqResult) GetSuccess() (v *instparam.ObjResp) {
	if !p.IsSetSuccess() {
		return STServiceTestObjReqResult_Success_DEFAULT
	}
	return p.Success
}
func (p *STServiceTestObjReqResult) SetSuccess(x interface{}) {
	p.Success = x.(*instparam.ObjResp)
}

func (p *STServiceTestObjReqResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *STServiceTestObjReqResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("STServiceTestObjReqResult(%+v)", *p)
}

func (p *STServiceTestObjReqResult) GetResult() interface{} {
	return p.Success
}

type STServiceTestExceptionArgs struct {
	Req *STRequest `thrift:"req,1" frugal:"1,default,STRequest" json:"req"`
}

func NewSTServiceTestExceptionArgs() *STServiceTestExceptionArgs {
	return &STServiceTestExceptionArgs{}
}

func (p *STServiceTestExceptionArgs) InitDefault() {
}

var STServiceTestExceptionArgs_Req_DEFAULT *STRequest

func (p *STServiceTestExceptionArgs) GetReq() (v *STRequest) {
	if !p.IsSetReq() {
		return STServiceTestExceptionArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *STServiceTestExceptionArgs) SetReq(val *STRequest) {
	p.Req = val
}

func (p *STServiceTestExceptionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *STServiceTestExceptionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("STServiceTestExceptionArgs(%+v)", *p)
}

func (p *STServiceTestExceptionArgs) GetFirstArgument() interface{} {
	return p.Req
}

type STServiceTestExceptionResult struct {
	Success     *STResponse  `thrift:"success,0,optional" frugal:"0,optional,STResponse" json:"success,omitempty"`
	StException *STException `thrift:"stException,1,optional" frugal:"1,optional,STException" json:"stException,omitempty"`
}

func NewSTServiceTestExceptionResult() *STServiceTestExceptionResult {
	return &STServiceTestExceptionResult{}
}

func (p *STServiceTestExceptionResult) InitDefault() {
}

var STServiceTestExceptionResult_Success_DEFAULT *STResponse

func (p *STServiceTestExceptionResult) GetSuccess() (v *STResponse) {
	if !p.IsSetSuccess() {
		return STServiceTestExceptionResult_Success_DEFAULT
	}
	return p.Success
}

var STServiceTestExceptionResult_StException_DEFAULT *STException

func (p *STServiceTestExceptionResult) GetStException() (v *STException) {
	if !p.IsSetStException() {
		return STServiceTestExceptionResult_StException_DEFAULT
	}
	return p.StException
}
func (p *STServiceTestExceptionResult) SetSuccess(x interface{}) {
	p.Success = x.(*STResponse)
}
func (p *STServiceTestExceptionResult) SetStException(val *STException) {
	p.StException = val
}

func (p *STServiceTestExceptionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *STServiceTestExceptionResult) IsSetStException() bool {
	return p.StException != nil
}

func (p *STServiceTestExceptionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("STServiceTestExceptionResult(%+v)", *p)
}

func (p *STServiceTestExceptionResult) GetResult() interface{} {
	return p.Success
}

type STServiceCircuitBreakTestArgs struct {
	Req *STRequest `thrift:"req,1" frugal:"1,default,STRequest" json:"req"`
}

func NewSTServiceCircuitBreakTestArgs() *STServiceCircuitBreakTestArgs {
	return &STServiceCircuitBreakTestArgs{}
}

func (p *STServiceCircuitBreakTestArgs) InitDefault() {
}

var STServiceCircuitBreakTestArgs_Req_DEFAULT *STRequest

func (p *STServiceCircuitBreakTestArgs) GetReq() (v *STRequest) {
	if !p.IsSetReq() {
		return STServiceCircuitBreakTestArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *STServiceCircuitBreakTestArgs) SetReq(val *STRequest) {
	p.Req = val
}

func (p *STServiceCircuitBreakTestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *STServiceCircuitBreakTestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("STServiceCircuitBreakTestArgs(%+v)", *p)
}

func (p *STServiceCircuitBreakTestArgs) GetFirstArgument() interface{} {
	return p.Req
}

type STServiceCircuitBreakTestResult struct {
	Success *STResponse `thrift:"success,0,optional" frugal:"0,optional,STResponse" json:"success,omitempty"`
}

func NewSTServiceCircuitBreakTestResult() *STServiceCircuitBreakTestResult {
	return &STServiceCircuitBreakTestResult{}
}

func (p *STServiceCircuitBreakTestResult) InitDefault() {
}

var STServiceCircuitBreakTestResult_Success_DEFAULT *STResponse

func (p *STServiceCircuitBreakTestResult) GetSuccess() (v *STResponse) {
	if !p.IsSetSuccess() {
		return STServiceCircuitBreakTestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *STServiceCircuitBreakTestResult) SetSuccess(x interface{}) {
	p.Success = x.(*STResponse)
}

func (p *STServiceCircuitBreakTestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *STServiceCircuitBreakTestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("STServiceCircuitBreakTestResult(%+v)", *p)
}

func (p *STServiceCircuitBreakTestResult) GetResult() interface{} {
	return p.Success
}

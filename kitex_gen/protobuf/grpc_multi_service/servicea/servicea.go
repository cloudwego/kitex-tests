// Code generated by Kitex v0.12.3. DO NOT EDIT.

package servicea

import (
	"context"
	"errors"
	"fmt"
	grpc_multi_service "github.com/cloudwego/kitex-tests/kitex_gen/protobuf/grpc_multi_service"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"EchoA": kitex.NewMethodInfo(
		echoAHandler,
		newEchoAArgs,
		newEchoAResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingBidirectional),
	),
}

var (
	serviceAServiceInfo                = NewServiceInfo()
	serviceAServiceInfoForClient       = NewServiceInfoForClient()
	serviceAServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return serviceAServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return serviceAServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return serviceAServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(true, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "ServiceA"
	handlerType := (*grpc_multi_service.ServiceA)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "multi_service",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.12.3",
		Extra:           extra,
	}
	return svcInfo
}

func echoAHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	streamingArgs, ok := arg.(*streaming.Args)
	if !ok {
		return errInvalidMessageType
	}
	st := streamingArgs.Stream
	stream := &serviceAEchoAServer{st}
	return handler.(grpc_multi_service.ServiceA).EchoA(stream)
}

type serviceAEchoAClient struct {
	streaming.Stream
}

func (x *serviceAEchoAClient) DoFinish(err error) {
	if finisher, ok := x.Stream.(streaming.WithDoFinish); ok {
		finisher.DoFinish(err)
	} else {
		panic(fmt.Sprintf("streaming.WithDoFinish is not implemented by %T", x.Stream))
	}
}
func (x *serviceAEchoAClient) Send(m *grpc_multi_service.RequestA) error {
	return x.Stream.SendMsg(m)
}
func (x *serviceAEchoAClient) Recv() (*grpc_multi_service.ReplyA, error) {
	m := new(grpc_multi_service.ReplyA)
	return m, x.Stream.RecvMsg(m)
}

type serviceAEchoAServer struct {
	streaming.Stream
}

func (x *serviceAEchoAServer) Send(m *grpc_multi_service.ReplyA) error {
	return x.Stream.SendMsg(m)
}

func (x *serviceAEchoAServer) Recv() (*grpc_multi_service.RequestA, error) {
	m := new(grpc_multi_service.RequestA)
	return m, x.Stream.RecvMsg(m)
}

func newEchoAArgs() interface{} {
	return &EchoAArgs{}
}

func newEchoAResult() interface{} {
	return &EchoAResult{}
}

type EchoAArgs struct {
	Req *grpc_multi_service.RequestA
}

func (p *EchoAArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(grpc_multi_service.RequestA)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *EchoAArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *EchoAArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *EchoAArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *EchoAArgs) Unmarshal(in []byte) error {
	msg := new(grpc_multi_service.RequestA)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var EchoAArgs_Req_DEFAULT *grpc_multi_service.RequestA

func (p *EchoAArgs) GetReq() *grpc_multi_service.RequestA {
	if !p.IsSetReq() {
		return EchoAArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *EchoAArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *EchoAArgs) GetFirstArgument() interface{} {
	return p.Req
}

type EchoAResult struct {
	Success *grpc_multi_service.ReplyA
}

var EchoAResult_Success_DEFAULT *grpc_multi_service.ReplyA

func (p *EchoAResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(grpc_multi_service.ReplyA)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *EchoAResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *EchoAResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *EchoAResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *EchoAResult) Unmarshal(in []byte) error {
	msg := new(grpc_multi_service.ReplyA)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *EchoAResult) GetSuccess() *grpc_multi_service.ReplyA {
	if !p.IsSetSuccess() {
		return EchoAResult_Success_DEFAULT
	}
	return p.Success
}

func (p *EchoAResult) SetSuccess(x interface{}) {
	p.Success = x.(*grpc_multi_service.ReplyA)
}

func (p *EchoAResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EchoAResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) EchoA(ctx context.Context) (ServiceA_EchoAClient, error) {
	streamClient, ok := p.c.(client.Streaming)
	if !ok {
		return nil, fmt.Errorf("client not support streaming")
	}
	res := new(streaming.Result)
	err := streamClient.Stream(ctx, "EchoA", nil, res)
	if err != nil {
		return nil, err
	}
	stream := &serviceAEchoAClient{res.Stream}
	return stream, nil
}

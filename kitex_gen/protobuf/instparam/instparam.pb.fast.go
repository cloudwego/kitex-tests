// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package instparam

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *SubMessage) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SubMessage[number], err)
}

func (x *SubMessage) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SubMessage) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Value, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Message) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Message[number], err)
}

func (x *Message) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Message) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Value, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Message) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v SubMessage
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.SubMessages = append(x.SubMessages, &v)
	return offset, nil
}

func (x *ObjReq) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ObjReq[number], err)
}

func (x *ObjReq) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Message
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Msg = &v
	return offset, nil
}

func (x *ObjReq) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	if x.MsgMap == nil {
		x.MsgMap = make(map[string]*SubMessage)
	}
	var key string
	var value *SubMessage
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			var v SubMessage
			offset, err = fastpb.ReadMessage(buf, _type, &v)
			if err != nil {
				return offset, err
			}
			value = &v
			return offset, nil
		})
	if err != nil {
		return offset, err
	}
	x.MsgMap[key] = value
	return offset, nil
}

func (x *ObjReq) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v SubMessage
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.SubMsgs = append(x.SubMsgs, &v)
	return offset, nil
}

func (x *ObjReq) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v Message
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Msgs = append(x.Msgs, &v)
	return offset, nil
}

func (x *ObjReq) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.FlagMsg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ObjReq) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.MockCost, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *ObjResp) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ObjResp[number], err)
}

func (x *ObjResp) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Message
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Msg = &v
	return offset, nil
}

func (x *ObjResp) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	if x.MsgMap == nil {
		x.MsgMap = make(map[string]*SubMessage)
	}
	var key string
	var value *SubMessage
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			var v SubMessage
			offset, err = fastpb.ReadMessage(buf, _type, &v)
			if err != nil {
				return offset, err
			}
			value = &v
			return offset, nil
		})
	if err != nil {
		return offset, err
	}
	x.MsgMap[key] = value
	return offset, nil
}

func (x *ObjResp) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v SubMessage
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.SubMsgs = append(x.SubMsgs, &v)
	return offset, nil
}

func (x *ObjResp) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	var v Message
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Msgs = append(x.Msgs, &v)
	return offset, nil
}

func (x *ObjResp) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.FlagMsg, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *SubMessage) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *SubMessage) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *SubMessage) fastWriteField2(buf []byte) (offset int) {
	if x.Value == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetValue())
	return offset
}

func (x *Message) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *Message) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *Message) fastWriteField2(buf []byte) (offset int) {
	if x.Value == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetValue())
	return offset
}

func (x *Message) fastWriteField3(buf []byte) (offset int) {
	if x.SubMessages == nil {
		return offset
	}
	for i := range x.GetSubMessages() {
		offset += fastpb.WriteMessage(buf[offset:], 3, x.GetSubMessages()[i])
	}
	return offset
}

func (x *ObjReq) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	return offset
}

func (x *ObjReq) fastWriteField1(buf []byte) (offset int) {
	if x.Msg == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetMsg())
	return offset
}

func (x *ObjReq) fastWriteField2(buf []byte) (offset int) {
	if x.MsgMap == nil {
		return offset
	}
	for k, v := range x.GetMsgMap() {
		offset += fastpb.WriteMapEntry(buf[offset:], 2,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteString(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteMessage(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *ObjReq) fastWriteField3(buf []byte) (offset int) {
	if x.SubMsgs == nil {
		return offset
	}
	for i := range x.GetSubMsgs() {
		offset += fastpb.WriteMessage(buf[offset:], 3, x.GetSubMsgs()[i])
	}
	return offset
}

func (x *ObjReq) fastWriteField4(buf []byte) (offset int) {
	if x.Msgs == nil {
		return offset
	}
	for i := range x.GetMsgs() {
		offset += fastpb.WriteMessage(buf[offset:], 4, x.GetMsgs()[i])
	}
	return offset
}

func (x *ObjReq) fastWriteField5(buf []byte) (offset int) {
	if x.FlagMsg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetFlagMsg())
	return offset
}

func (x *ObjReq) fastWriteField6(buf []byte) (offset int) {
	if x.MockCost == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetMockCost())
	return offset
}

func (x *ObjResp) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *ObjResp) fastWriteField1(buf []byte) (offset int) {
	if x.Msg == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetMsg())
	return offset
}

func (x *ObjResp) fastWriteField2(buf []byte) (offset int) {
	if x.MsgMap == nil {
		return offset
	}
	for k, v := range x.GetMsgMap() {
		offset += fastpb.WriteMapEntry(buf[offset:], 2,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteString(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteMessage(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *ObjResp) fastWriteField3(buf []byte) (offset int) {
	if x.SubMsgs == nil {
		return offset
	}
	for i := range x.GetSubMsgs() {
		offset += fastpb.WriteMessage(buf[offset:], 3, x.GetSubMsgs()[i])
	}
	return offset
}

func (x *ObjResp) fastWriteField4(buf []byte) (offset int) {
	if x.Msgs == nil {
		return offset
	}
	for i := range x.GetMsgs() {
		offset += fastpb.WriteMessage(buf[offset:], 4, x.GetMsgs()[i])
	}
	return offset
}

func (x *ObjResp) fastWriteField5(buf []byte) (offset int) {
	if x.FlagMsg == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetFlagMsg())
	return offset
}

func (x *SubMessage) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *SubMessage) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *SubMessage) sizeField2() (n int) {
	if x.Value == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetValue())
	return n
}

func (x *Message) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *Message) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *Message) sizeField2() (n int) {
	if x.Value == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetValue())
	return n
}

func (x *Message) sizeField3() (n int) {
	if x.SubMessages == nil {
		return n
	}
	for i := range x.GetSubMessages() {
		n += fastpb.SizeMessage(3, x.GetSubMessages()[i])
	}
	return n
}

func (x *ObjReq) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	return n
}

func (x *ObjReq) sizeField1() (n int) {
	if x.Msg == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetMsg())
	return n
}

func (x *ObjReq) sizeField2() (n int) {
	if x.MsgMap == nil {
		return n
	}
	for k, v := range x.GetMsgMap() {
		n += fastpb.SizeMapEntry(2,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeString(numTagOrKey, k)
				n += fastpb.SizeMessage(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *ObjReq) sizeField3() (n int) {
	if x.SubMsgs == nil {
		return n
	}
	for i := range x.GetSubMsgs() {
		n += fastpb.SizeMessage(3, x.GetSubMsgs()[i])
	}
	return n
}

func (x *ObjReq) sizeField4() (n int) {
	if x.Msgs == nil {
		return n
	}
	for i := range x.GetMsgs() {
		n += fastpb.SizeMessage(4, x.GetMsgs()[i])
	}
	return n
}

func (x *ObjReq) sizeField5() (n int) {
	if x.FlagMsg == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetFlagMsg())
	return n
}

func (x *ObjReq) sizeField6() (n int) {
	if x.MockCost == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetMockCost())
	return n
}

func (x *ObjResp) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *ObjResp) sizeField1() (n int) {
	if x.Msg == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetMsg())
	return n
}

func (x *ObjResp) sizeField2() (n int) {
	if x.MsgMap == nil {
		return n
	}
	for k, v := range x.GetMsgMap() {
		n += fastpb.SizeMapEntry(2,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeString(numTagOrKey, k)
				n += fastpb.SizeMessage(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *ObjResp) sizeField3() (n int) {
	if x.SubMsgs == nil {
		return n
	}
	for i := range x.GetSubMsgs() {
		n += fastpb.SizeMessage(3, x.GetSubMsgs()[i])
	}
	return n
}

func (x *ObjResp) sizeField4() (n int) {
	if x.Msgs == nil {
		return n
	}
	for i := range x.GetMsgs() {
		n += fastpb.SizeMessage(4, x.GetMsgs()[i])
	}
	return n
}

func (x *ObjResp) sizeField5() (n int) {
	if x.FlagMsg == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetFlagMsg())
	return n
}

var fieldIDToName_SubMessage = map[int32]string{
	1: "Id",
	2: "Value",
}

var fieldIDToName_Message = map[int32]string{
	1: "Id",
	2: "Value",
	3: "SubMessages",
}

var fieldIDToName_ObjReq = map[int32]string{
	1: "Msg",
	2: "MsgMap",
	3: "SubMsgs",
	4: "Msgs",
	5: "FlagMsg",
	6: "MockCost",
}

var fieldIDToName_ObjResp = map[int32]string{
	1: "Msg",
	2: "MsgMap",
	3: "SubMsgs",
	4: "Msgs",
	5: "FlagMsg",
}

// Code generated by Kitex v0.5.2. DO NOT EDIT.

package stservice

import (
	"context"
	"fmt"
	instparam "github.com/cloudwego/kitex-tests/kitex_gen/protobuf/instparam"
	stability "github.com/cloudwego/kitex-tests/kitex_gen/protobuf/stability"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return sTServiceServiceInfo
}

var sTServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "STService"
	handlerType := (*stability.STService)(nil)
	methods := map[string]kitex.MethodInfo{
		"testSTReq":  kitex.NewMethodInfo(testSTReqHandler, newTestSTReqArgs, newTestSTReqResult, false),
		"testObjReq": kitex.NewMethodInfo(testObjReqHandler, newTestObjReqArgs, newTestObjReqResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "stability",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.5.2",
		Extra:           extra,
	}
	return svcInfo
}

func testSTReqHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(stability.STRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(stability.STService).TestSTReq(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *TestSTReqArgs:
		success, err := handler.(stability.STService).TestSTReq(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*TestSTReqResult)
		realResult.Success = success
	}
	return nil
}
func newTestSTReqArgs() interface{} {
	return &TestSTReqArgs{}
}

func newTestSTReqResult() interface{} {
	return &TestSTReqResult{}
}

type TestSTReqArgs struct {
	Req *stability.STRequest
}

func (p *TestSTReqArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(stability.STRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *TestSTReqArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *TestSTReqArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *TestSTReqArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in TestSTReqArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *TestSTReqArgs) Unmarshal(in []byte) error {
	msg := new(stability.STRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var TestSTReqArgs_Req_DEFAULT *stability.STRequest

func (p *TestSTReqArgs) GetReq() *stability.STRequest {
	if !p.IsSetReq() {
		return TestSTReqArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *TestSTReqArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TestSTReqArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestSTReqResult struct {
	Success *stability.STResponse
}

var TestSTReqResult_Success_DEFAULT *stability.STResponse

func (p *TestSTReqResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(stability.STResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *TestSTReqResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *TestSTReqResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *TestSTReqResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in TestSTReqResult")
	}
	return proto.Marshal(p.Success)
}

func (p *TestSTReqResult) Unmarshal(in []byte) error {
	msg := new(stability.STResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *TestSTReqResult) GetSuccess() *stability.STResponse {
	if !p.IsSetSuccess() {
		return TestSTReqResult_Success_DEFAULT
	}
	return p.Success
}

func (p *TestSTReqResult) SetSuccess(x interface{}) {
	p.Success = x.(*stability.STResponse)
}

func (p *TestSTReqResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestSTReqResult) GetResult() interface{} {
	return p.Success
}

func testObjReqHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(instparam.ObjReq)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(stability.STService).TestObjReq(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *TestObjReqArgs:
		success, err := handler.(stability.STService).TestObjReq(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*TestObjReqResult)
		realResult.Success = success
	}
	return nil
}
func newTestObjReqArgs() interface{} {
	return &TestObjReqArgs{}
}

func newTestObjReqResult() interface{} {
	return &TestObjReqResult{}
}

type TestObjReqArgs struct {
	Req *instparam.ObjReq
}

func (p *TestObjReqArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(instparam.ObjReq)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *TestObjReqArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *TestObjReqArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *TestObjReqArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in TestObjReqArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *TestObjReqArgs) Unmarshal(in []byte) error {
	msg := new(instparam.ObjReq)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var TestObjReqArgs_Req_DEFAULT *instparam.ObjReq

func (p *TestObjReqArgs) GetReq() *instparam.ObjReq {
	if !p.IsSetReq() {
		return TestObjReqArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *TestObjReqArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *TestObjReqArgs) GetFirstArgument() interface{} {
	return p.Req
}

type TestObjReqResult struct {
	Success *instparam.ObjResp
}

var TestObjReqResult_Success_DEFAULT *instparam.ObjResp

func (p *TestObjReqResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(instparam.ObjResp)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *TestObjReqResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *TestObjReqResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *TestObjReqResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in TestObjReqResult")
	}
	return proto.Marshal(p.Success)
}

func (p *TestObjReqResult) Unmarshal(in []byte) error {
	msg := new(instparam.ObjResp)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *TestObjReqResult) GetSuccess() *instparam.ObjResp {
	if !p.IsSetSuccess() {
		return TestObjReqResult_Success_DEFAULT
	}
	return p.Success
}

func (p *TestObjReqResult) SetSuccess(x interface{}) {
	p.Success = x.(*instparam.ObjResp)
}

func (p *TestObjReqResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *TestObjReqResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) TestSTReq(ctx context.Context, Req *stability.STRequest) (r *stability.STResponse, err error) {
	var _args TestSTReqArgs
	_args.Req = Req
	var _result TestSTReqResult
	if err = p.c.Call(ctx, "testSTReq", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) TestObjReq(ctx context.Context, Req *instparam.ObjReq) (r *instparam.ObjResp, err error) {
	var _args TestObjReqArgs
	_args.Req = Req
	var _result TestObjReqResult
	if err = p.c.Call(ctx, "testObjReq", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

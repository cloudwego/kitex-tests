// Code generated by thriftgo (0.2.9). DO NOT EDIT.

package stability

import (
	"bytes"
	"context"
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"github.com/cloudwego/kitex-tests/kitex_gen/thrift/instparam"
	"strings"
)

type TestEnum int64

const (
	TestEnum_FIRST  TestEnum = 1
	TestEnum_SECOND TestEnum = 2
	TestEnum_THIRD  TestEnum = 3
	TestEnum_FOURTH TestEnum = 4
)

func (p TestEnum) String() string {
	switch p {
	case TestEnum_FIRST:
		return "FIRST"
	case TestEnum_SECOND:
		return "SECOND"
	case TestEnum_THIRD:
		return "THIRD"
	case TestEnum_FOURTH:
		return "FOURTH"
	}
	return "<UNSET>"
}

func TestEnumFromString(s string) (TestEnum, error) {
	switch s {
	case "FIRST":
		return TestEnum_FIRST, nil
	case "SECOND":
		return TestEnum_SECOND, nil
	case "THIRD":
		return TestEnum_THIRD, nil
	case "FOURTH":
		return TestEnum_FOURTH, nil
	}
	return TestEnum(0), fmt.Errorf("not a valid TestEnum string")
}

func TestEnumPtr(v TestEnum) *TestEnum { return &v }
func (p *TestEnum) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TestEnum(result.Int64)
	return
}

func (p *TestEnum) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type STRequest struct {
	Name       string                          `thrift:"Name,1,required" frugal:"1,required,string" json:"Name"`
	On         *bool                           `thrift:"on,2,optional" frugal:"2,optional,bool" json:"on,omitempty"`
	B          int8                            `thrift:"b,3" frugal:"3,default,byte" json:"b"`
	Int16      int16                           `thrift:"int16,4,optional" frugal:"4,optional,i16" json:"int16,omitempty"`
	Int32      int32                           `thrift:"int32,5" frugal:"5,default,i32" json:"int32"`
	Int64      int64                           `thrift:"int64,6" frugal:"6,default,i64" json:"int64"`
	D          float64                         `thrift:"d,7" frugal:"7,default,double" json:"d"`
	Str        string                          `thrift:"str,8" frugal:"8,default,string" json:"str"`
	Bin        []byte                          `thrift:"bin,9" frugal:"9,default,binary" json:"bin"`
	StringMap  map[string]string               `thrift:"stringMap,10" frugal:"10,default,map<string:string>" json:"stringMap"`
	StringList []string                        `thrift:"stringList,11" frugal:"11,default,list<string>" json:"stringList"`
	StringSet  []string                        `thrift:"stringSet,12" frugal:"12,default,set<string>" json:"stringSet"`
	E          TestEnum                        `thrift:"e,13" frugal:"13,default,TestEnum" json:"e"`
	FlagMsg    string                          `thrift:"flagMsg,14,required" frugal:"14,required,string" json:"flagMsg"`
	Framework  string                          `thrift:"framework,15,required" frugal:"15,required,string" json:"framework"`
	MockCost   *string                         `thrift:"mockCost,16,optional" frugal:"16,optional,string" json:"mockCost,omitempty"`
	SubMsgs    map[int32]*instparam.SubMessage `thrift:"subMsgs,17" frugal:"17,default,map<i32:instparam.SubMessage>" json:"subMsgs"`
}

func NewSTRequest() *STRequest {
	return &STRequest{

		Int16:     42,
		Framework: "kitex",
	}
}

func (p *STRequest) InitDefault() {
	*p = STRequest{

		Int16:     42,
		Framework: "kitex",
	}
}

func (p *STRequest) GetName() (v string) {
	return p.Name
}

var STRequest_On_DEFAULT bool

func (p *STRequest) GetOn() (v bool) {
	if !p.IsSetOn() {
		return STRequest_On_DEFAULT
	}
	return *p.On
}

func (p *STRequest) GetB() (v int8) {
	return p.B
}

var STRequest_Int16_DEFAULT int16 = 42

func (p *STRequest) GetInt16() (v int16) {
	if !p.IsSetInt16() {
		return STRequest_Int16_DEFAULT
	}
	return p.Int16
}

func (p *STRequest) GetInt32() (v int32) {
	return p.Int32
}

func (p *STRequest) GetInt64() (v int64) {
	return p.Int64
}

func (p *STRequest) GetD() (v float64) {
	return p.D
}

func (p *STRequest) GetStr() (v string) {
	return p.Str
}

func (p *STRequest) GetBin() (v []byte) {
	return p.Bin
}

func (p *STRequest) GetStringMap() (v map[string]string) {
	return p.StringMap
}

func (p *STRequest) GetStringList() (v []string) {
	return p.StringList
}

func (p *STRequest) GetStringSet() (v []string) {
	return p.StringSet
}

func (p *STRequest) GetE() (v TestEnum) {
	return p.E
}

func (p *STRequest) GetFlagMsg() (v string) {
	return p.FlagMsg
}

func (p *STRequest) GetFramework() (v string) {
	return p.Framework
}

var STRequest_MockCost_DEFAULT string

func (p *STRequest) GetMockCost() (v string) {
	if !p.IsSetMockCost() {
		return STRequest_MockCost_DEFAULT
	}
	return *p.MockCost
}

func (p *STRequest) GetSubMsgs() (v map[int32]*instparam.SubMessage) {
	return p.SubMsgs
}
func (p *STRequest) SetName(val string) {
	p.Name = val
}
func (p *STRequest) SetOn(val *bool) {
	p.On = val
}
func (p *STRequest) SetB(val int8) {
	p.B = val
}
func (p *STRequest) SetInt16(val int16) {
	p.Int16 = val
}
func (p *STRequest) SetInt32(val int32) {
	p.Int32 = val
}
func (p *STRequest) SetInt64(val int64) {
	p.Int64 = val
}
func (p *STRequest) SetD(val float64) {
	p.D = val
}
func (p *STRequest) SetStr(val string) {
	p.Str = val
}
func (p *STRequest) SetBin(val []byte) {
	p.Bin = val
}
func (p *STRequest) SetStringMap(val map[string]string) {
	p.StringMap = val
}
func (p *STRequest) SetStringList(val []string) {
	p.StringList = val
}
func (p *STRequest) SetStringSet(val []string) {
	p.StringSet = val
}
func (p *STRequest) SetE(val TestEnum) {
	p.E = val
}
func (p *STRequest) SetFlagMsg(val string) {
	p.FlagMsg = val
}
func (p *STRequest) SetFramework(val string) {
	p.Framework = val
}
func (p *STRequest) SetMockCost(val *string) {
	p.MockCost = val
}
func (p *STRequest) SetSubMsgs(val map[int32]*instparam.SubMessage) {
	p.SubMsgs = val
}

var fieldIDToName_STRequest = map[int16]string{
	1:  "Name",
	2:  "on",
	3:  "b",
	4:  "int16",
	5:  "int32",
	6:  "int64",
	7:  "d",
	8:  "str",
	9:  "bin",
	10: "stringMap",
	11: "stringList",
	12: "stringSet",
	13: "e",
	14: "flagMsg",
	15: "framework",
	16: "mockCost",
	17: "subMsgs",
}

func (p *STRequest) IsSetOn() bool {
	return p.On != nil
}

func (p *STRequest) IsSetInt16() bool {
	return p.Int16 != STRequest_Int16_DEFAULT
}

func (p *STRequest) IsSetMockCost() bool {
	return p.MockCost != nil
}

func (p *STRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetName bool = false
	var issetFlagMsg bool = false
	var issetFramework bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
				issetName = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.BOOL {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.BYTE {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.I16 {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.DOUBLE {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 11:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField11(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 12:
			if fieldTypeId == thrift.SET {
				if err = p.ReadField12(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 13:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField13(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 14:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField14(iprot); err != nil {
					goto ReadFieldError
				}
				issetFlagMsg = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 15:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField15(iprot); err != nil {
					goto ReadFieldError
				}
				issetFramework = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 16:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField16(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 17:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField17(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetName {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetFlagMsg {
		fieldId = 14
		goto RequiredFieldNotSetError
	}

	if !issetFramework {
		fieldId = 15
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_STRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_STRequest[fieldId]))
}

func (p *STRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Name = v
	}
	return nil
}

func (p *STRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return err
	} else {
		p.On = &v
	}
	return nil
}

func (p *STRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return err
	} else {
		p.B = v
	}
	return nil
}

func (p *STRequest) ReadField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return err
	} else {
		p.Int16 = v
	}
	return nil
}

func (p *STRequest) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Int32 = v
	}
	return nil
}

func (p *STRequest) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Int64 = v
	}
	return nil
}

func (p *STRequest) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadDouble(); err != nil {
		return err
	} else {
		p.D = v
	}
	return nil
}

func (p *STRequest) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Str = v
	}
	return nil
}

func (p *STRequest) ReadField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return err
	} else {
		p.Bin = []byte(v)
	}
	return nil
}

func (p *STRequest) ReadField10(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.StringMap = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		p.StringMap[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *STRequest) ReadField11(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.StringList = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.StringList = append(p.StringList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *STRequest) ReadField12(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadSetBegin()
	if err != nil {
		return err
	}
	p.StringSet = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.StringSet = append(p.StringSet, _elem)
	}
	if err := iprot.ReadSetEnd(); err != nil {
		return err
	}
	return nil
}

func (p *STRequest) ReadField13(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.E = TestEnum(v)
	}
	return nil
}

func (p *STRequest) ReadField14(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.FlagMsg = v
	}
	return nil
}

func (p *STRequest) ReadField15(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Framework = v
	}
	return nil
}

func (p *STRequest) ReadField16(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.MockCost = &v
	}
	return nil
}

func (p *STRequest) ReadField17(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.SubMsgs = make(map[int32]*instparam.SubMessage, size)
	for i := 0; i < size; i++ {
		var _key int32
		if v, err := iprot.ReadI32(); err != nil {
			return err
		} else {
			_key = v
		}
		_val := instparam.NewSubMessage()
		if err := _val.Read(iprot); err != nil {
			return err
		}

		p.SubMsgs[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *STRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("STRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}
		if err = p.writeField11(oprot); err != nil {
			fieldId = 11
			goto WriteFieldError
		}
		if err = p.writeField12(oprot); err != nil {
			fieldId = 12
			goto WriteFieldError
		}
		if err = p.writeField13(oprot); err != nil {
			fieldId = 13
			goto WriteFieldError
		}
		if err = p.writeField14(oprot); err != nil {
			fieldId = 14
			goto WriteFieldError
		}
		if err = p.writeField15(oprot); err != nil {
			fieldId = 15
			goto WriteFieldError
		}
		if err = p.writeField16(oprot); err != nil {
			fieldId = 16
			goto WriteFieldError
		}
		if err = p.writeField17(oprot); err != nil {
			fieldId = 17
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *STRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("Name", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Name); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *STRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetOn() {
		if err = oprot.WriteFieldBegin("on", thrift.BOOL, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteBool(*p.On); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *STRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("b", thrift.BYTE, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteByte(p.B); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *STRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetInt16() {
		if err = oprot.WriteFieldBegin("int16", thrift.I16, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI16(p.Int16); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *STRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("int32", thrift.I32, 5); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(p.Int32); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *STRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("int64", thrift.I64, 6); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI64(p.Int64); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *STRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("d", thrift.DOUBLE, 7); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteDouble(p.D); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *STRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("str", thrift.STRING, 8); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Str); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *STRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("bin", thrift.STRING, 9); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteBinary([]byte(p.Bin)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *STRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("stringMap", thrift.MAP, 10); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.StringMap)); err != nil {
		return err
	}
	for k, v := range p.StringMap {

		if err := oprot.WriteString(k); err != nil {
			return err
		}

		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *STRequest) writeField11(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("stringList", thrift.LIST, 11); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteListBegin(thrift.STRING, len(p.StringList)); err != nil {
		return err
	}
	for _, v := range p.StringList {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 11 end error: ", p), err)
}

func (p *STRequest) writeField12(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("stringSet", thrift.SET, 12); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteSetBegin(thrift.STRING, len(p.StringSet)); err != nil {
		return err
	}
	for i := 0; i < len(p.StringSet); i++ {
		for j := i + 1; j < len(p.StringSet); j++ {
			if func(tgt, src string) bool {
				if strings.Compare(tgt, src) != 0 {
					return false
				}
				return true
			}(p.StringSet[i], p.StringSet[j]) {
				return thrift.PrependError("", fmt.Errorf("%T error writing set field: slice is not unique", p.StringSet[i]))
			}
		}
	}
	for _, v := range p.StringSet {
		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteSetEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 12 end error: ", p), err)
}

func (p *STRequest) writeField13(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("e", thrift.I32, 13); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteI32(int32(p.E)); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 13 end error: ", p), err)
}

func (p *STRequest) writeField14(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("flagMsg", thrift.STRING, 14); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FlagMsg); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 14 end error: ", p), err)
}

func (p *STRequest) writeField15(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("framework", thrift.STRING, 15); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Framework); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 15 end error: ", p), err)
}

func (p *STRequest) writeField16(oprot thrift.TProtocol) (err error) {
	if p.IsSetMockCost() {
		if err = oprot.WriteFieldBegin("mockCost", thrift.STRING, 16); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.MockCost); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 16 end error: ", p), err)
}

func (p *STRequest) writeField17(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("subMsgs", thrift.MAP, 17); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.I32, thrift.STRUCT, len(p.SubMsgs)); err != nil {
		return err
	}
	for k, v := range p.SubMsgs {

		if err := oprot.WriteI32(k); err != nil {
			return err
		}

		if err := v.Write(oprot); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 17 end error: ", p), err)
}

func (p *STRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("STRequest(%+v)", *p)
}

func (p *STRequest) DeepEqual(ano *STRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Name) {
		return false
	}
	if !p.Field2DeepEqual(ano.On) {
		return false
	}
	if !p.Field3DeepEqual(ano.B) {
		return false
	}
	if !p.Field4DeepEqual(ano.Int16) {
		return false
	}
	if !p.Field5DeepEqual(ano.Int32) {
		return false
	}
	if !p.Field6DeepEqual(ano.Int64) {
		return false
	}
	if !p.Field7DeepEqual(ano.D) {
		return false
	}
	if !p.Field8DeepEqual(ano.Str) {
		return false
	}
	if !p.Field9DeepEqual(ano.Bin) {
		return false
	}
	if !p.Field10DeepEqual(ano.StringMap) {
		return false
	}
	if !p.Field11DeepEqual(ano.StringList) {
		return false
	}
	if !p.Field12DeepEqual(ano.StringSet) {
		return false
	}
	if !p.Field13DeepEqual(ano.E) {
		return false
	}
	if !p.Field14DeepEqual(ano.FlagMsg) {
		return false
	}
	if !p.Field15DeepEqual(ano.Framework) {
		return false
	}
	if !p.Field16DeepEqual(ano.MockCost) {
		return false
	}
	if !p.Field17DeepEqual(ano.SubMsgs) {
		return false
	}
	return true
}

func (p *STRequest) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Name, src) != 0 {
		return false
	}
	return true
}
func (p *STRequest) Field2DeepEqual(src *bool) bool {

	if p.On == src {
		return true
	} else if p.On == nil || src == nil {
		return false
	}
	if *p.On != *src {
		return false
	}
	return true
}
func (p *STRequest) Field3DeepEqual(src int8) bool {

	if p.B != src {
		return false
	}
	return true
}
func (p *STRequest) Field4DeepEqual(src int16) bool {

	if p.Int16 != src {
		return false
	}
	return true
}
func (p *STRequest) Field5DeepEqual(src int32) bool {

	if p.Int32 != src {
		return false
	}
	return true
}
func (p *STRequest) Field6DeepEqual(src int64) bool {

	if p.Int64 != src {
		return false
	}
	return true
}
func (p *STRequest) Field7DeepEqual(src float64) bool {

	if p.D != src {
		return false
	}
	return true
}
func (p *STRequest) Field8DeepEqual(src string) bool {

	if strings.Compare(p.Str, src) != 0 {
		return false
	}
	return true
}
func (p *STRequest) Field9DeepEqual(src []byte) bool {

	if bytes.Compare(p.Bin, src) != 0 {
		return false
	}
	return true
}
func (p *STRequest) Field10DeepEqual(src map[string]string) bool {

	if len(p.StringMap) != len(src) {
		return false
	}
	for k, v := range p.StringMap {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *STRequest) Field11DeepEqual(src []string) bool {

	if len(p.StringList) != len(src) {
		return false
	}
	for i, v := range p.StringList {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *STRequest) Field12DeepEqual(src []string) bool {

	if len(p.StringSet) != len(src) {
		return false
	}
	for i, v := range p.StringSet {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *STRequest) Field13DeepEqual(src TestEnum) bool {

	if p.E != src {
		return false
	}
	return true
}
func (p *STRequest) Field14DeepEqual(src string) bool {

	if strings.Compare(p.FlagMsg, src) != 0 {
		return false
	}
	return true
}
func (p *STRequest) Field15DeepEqual(src string) bool {

	if strings.Compare(p.Framework, src) != 0 {
		return false
	}
	return true
}
func (p *STRequest) Field16DeepEqual(src *string) bool {

	if p.MockCost == src {
		return true
	} else if p.MockCost == nil || src == nil {
		return false
	}
	if strings.Compare(*p.MockCost, *src) != 0 {
		return false
	}
	return true
}
func (p *STRequest) Field17DeepEqual(src map[int32]*instparam.SubMessage) bool {

	if len(p.SubMsgs) != len(src) {
		return false
	}
	for k, v := range p.SubMsgs {
		_src := src[k]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}

type STResponse struct {
	Str     string            `thrift:"str,1" frugal:"1,default,string" json:"str"`
	Mp      map[string]string `thrift:"mp,2" frugal:"2,default,map<string:string>" json:"mp"`
	FlagMsg string            `thrift:"flagMsg,3,required" frugal:"3,required,string" json:"flagMsg"`
}

func NewSTResponse() *STResponse {
	return &STResponse{}
}

func (p *STResponse) InitDefault() {
	*p = STResponse{}
}

func (p *STResponse) GetStr() (v string) {
	return p.Str
}

func (p *STResponse) GetMp() (v map[string]string) {
	return p.Mp
}

func (p *STResponse) GetFlagMsg() (v string) {
	return p.FlagMsg
}
func (p *STResponse) SetStr(val string) {
	p.Str = val
}
func (p *STResponse) SetMp(val map[string]string) {
	p.Mp = val
}
func (p *STResponse) SetFlagMsg(val string) {
	p.FlagMsg = val
}

var fieldIDToName_STResponse = map[int16]string{
	1: "str",
	2: "mp",
	3: "flagMsg",
}

func (p *STResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16
	var issetFlagMsg bool = false

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
				issetFlagMsg = true
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	if !issetFlagMsg {
		fieldId = 3
		goto RequiredFieldNotSetError
	}
	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_STResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_STResponse[fieldId]))
}

func (p *STResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Str = v
	}
	return nil
}

func (p *STResponse) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.Mp = make(map[string]string, size)
	for i := 0; i < size; i++ {
		var _key string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_key = v
		}

		var _val string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_val = v
		}

		p.Mp[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *STResponse) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.FlagMsg = v
	}
	return nil
}

func (p *STResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("STResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *STResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("str", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Str); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *STResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("mp", thrift.MAP, 2); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Mp)); err != nil {
		return err
	}
	for k, v := range p.Mp {

		if err := oprot.WriteString(k); err != nil {
			return err
		}

		if err := oprot.WriteString(v); err != nil {
			return err
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *STResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("flagMsg", thrift.STRING, 3); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.FlagMsg); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *STResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("STResponse(%+v)", *p)
}

func (p *STResponse) DeepEqual(ano *STResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Str) {
		return false
	}
	if !p.Field2DeepEqual(ano.Mp) {
		return false
	}
	if !p.Field3DeepEqual(ano.FlagMsg) {
		return false
	}
	return true
}

func (p *STResponse) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Str, src) != 0 {
		return false
	}
	return true
}
func (p *STResponse) Field2DeepEqual(src map[string]string) bool {

	if len(p.Mp) != len(src) {
		return false
	}
	for k, v := range p.Mp {
		_src := src[k]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *STResponse) Field3DeepEqual(src string) bool {

	if strings.Compare(p.FlagMsg, src) != 0 {
		return false
	}
	return true
}

type STException struct {
	Message string `thrift:"message,1" frugal:"1,default,string" json:"message"`
}

func NewSTException() *STException {
	return &STException{}
}

func (p *STException) InitDefault() {
	*p = STException{}
}

func (p *STException) GetMessage() (v string) {
	return p.Message
}
func (p *STException) SetMessage(val string) {
	p.Message = val
}

var fieldIDToName_STException = map[int16]string{
	1: "message",
}

func (p *STException) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_STException[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *STException) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Message = v
	}
	return nil
}

func (p *STException) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("STException"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *STException) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := oprot.WriteString(p.Message); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *STException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("STException(%+v)", *p)
}
func (p *STException) Error() string {
	return p.String()
}

func (p *STException) DeepEqual(ano *STException) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Message) {
		return false
	}
	return true
}

func (p *STException) Field1DeepEqual(src string) bool {

	if strings.Compare(p.Message, src) != 0 {
		return false
	}
	return true
}

type OnewayService interface {
	VisitOneway(ctx context.Context, req *STRequest) (err error)
}

type OnewayServiceClient struct {
	c thrift.TClient
}

func NewOnewayServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *OnewayServiceClient {
	return &OnewayServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewOnewayServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *OnewayServiceClient {
	return &OnewayServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewOnewayServiceClient(c thrift.TClient) *OnewayServiceClient {
	return &OnewayServiceClient{
		c: c,
	}
}

func (p *OnewayServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *OnewayServiceClient) VisitOneway(ctx context.Context, req *STRequest) (err error) {
	var _args OnewayServiceVisitOnewayArgs
	_args.Req = req
	if err = p.Client_().Call(ctx, "VisitOneway", &_args, nil); err != nil {
		return
	}
	return nil
}

type STService interface {
	OnewayService

	TestSTReq(ctx context.Context, req *STRequest) (r *STResponse, err error)

	TestObjReq(ctx context.Context, req *instparam.ObjReq) (r *instparam.ObjResp, err error)

	TestException(ctx context.Context, req *STRequest) (r *STResponse, err error)

	CircuitBreakTest(ctx context.Context, req *STRequest) (r *STResponse, err error)
}

type STServiceClient struct {
	*OnewayServiceClient
}

func NewSTServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *STServiceClient {
	return &STServiceClient{
		OnewayServiceClient: NewOnewayServiceClientFactory(t, f),
	}
}

func NewSTServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *STServiceClient {
	return &STServiceClient{
		OnewayServiceClient: NewOnewayServiceClientProtocol(t, iprot, oprot),
	}
}

func NewSTServiceClient(c thrift.TClient) *STServiceClient {
	return &STServiceClient{
		OnewayServiceClient: NewOnewayServiceClient(c),
	}
}

func (p *STServiceClient) TestSTReq(ctx context.Context, req *STRequest) (r *STResponse, err error) {
	var _args STServiceTestSTReqArgs
	_args.Req = req
	var _result STServiceTestSTReqResult
	if err = p.Client_().Call(ctx, "testSTReq", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *STServiceClient) TestObjReq(ctx context.Context, req *instparam.ObjReq) (r *instparam.ObjResp, err error) {
	var _args STServiceTestObjReqArgs
	_args.Req = req
	var _result STServiceTestObjReqResult
	if err = p.Client_().Call(ctx, "testObjReq", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *STServiceClient) TestException(ctx context.Context, req *STRequest) (r *STResponse, err error) {
	var _args STServiceTestExceptionArgs
	_args.Req = req
	var _result STServiceTestExceptionResult
	if err = p.Client_().Call(ctx, "testException", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.StException != nil:
		return r, _result.StException
	}
	return _result.GetSuccess(), nil
}
func (p *STServiceClient) CircuitBreakTest(ctx context.Context, req *STRequest) (r *STResponse, err error) {
	var _args STServiceCircuitBreakTestArgs
	_args.Req = req
	var _result STServiceCircuitBreakTestResult
	if err = p.Client_().Call(ctx, "circuitBreakTest", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type OnewayServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      OnewayService
}

func (p *OnewayServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *OnewayServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *OnewayServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewOnewayServiceProcessor(handler OnewayService) *OnewayServiceProcessor {
	self := &OnewayServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("VisitOneway", &onewayServiceProcessorVisitOneway{handler: handler})
	return self
}
func (p *OnewayServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type onewayServiceProcessorVisitOneway struct {
	handler OnewayService
}

func (p *onewayServiceProcessorVisitOneway) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := OnewayServiceVisitOnewayArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	if err2 = p.handler.VisitOneway(ctx, args.Req); err2 != nil {
		return true, err2
	}
	return true, nil
}

type OnewayServiceVisitOnewayArgs struct {
	Req *STRequest `thrift:"req,1" frugal:"1,default,STRequest" json:"req"`
}

func NewOnewayServiceVisitOnewayArgs() *OnewayServiceVisitOnewayArgs {
	return &OnewayServiceVisitOnewayArgs{}
}

func (p *OnewayServiceVisitOnewayArgs) InitDefault() {
	*p = OnewayServiceVisitOnewayArgs{}
}

var OnewayServiceVisitOnewayArgs_Req_DEFAULT *STRequest

func (p *OnewayServiceVisitOnewayArgs) GetReq() (v *STRequest) {
	if !p.IsSetReq() {
		return OnewayServiceVisitOnewayArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *OnewayServiceVisitOnewayArgs) SetReq(val *STRequest) {
	p.Req = val
}

var fieldIDToName_OnewayServiceVisitOnewayArgs = map[int16]string{
	1: "req",
}

func (p *OnewayServiceVisitOnewayArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OnewayServiceVisitOnewayArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_OnewayServiceVisitOnewayArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *OnewayServiceVisitOnewayArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewSTRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *OnewayServiceVisitOnewayArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("VisitOneway_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *OnewayServiceVisitOnewayArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *OnewayServiceVisitOnewayArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OnewayServiceVisitOnewayArgs(%+v)", *p)
}

func (p *OnewayServiceVisitOnewayArgs) DeepEqual(ano *OnewayServiceVisitOnewayArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *OnewayServiceVisitOnewayArgs) Field1DeepEqual(src *STRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type STServiceProcessor struct {
	*OnewayServiceProcessor
}

func NewSTServiceProcessor(handler STService) *STServiceProcessor {
	self := &STServiceProcessor{NewOnewayServiceProcessor(handler)}
	self.AddToProcessorMap("testSTReq", &sTServiceProcessorTestSTReq{handler: handler})
	self.AddToProcessorMap("testObjReq", &sTServiceProcessorTestObjReq{handler: handler})
	self.AddToProcessorMap("testException", &sTServiceProcessorTestException{handler: handler})
	self.AddToProcessorMap("circuitBreakTest", &sTServiceProcessorCircuitBreakTest{handler: handler})
	return self
}

type sTServiceProcessorTestSTReq struct {
	handler STService
}

func (p *sTServiceProcessorTestSTReq) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := STServiceTestSTReqArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("testSTReq", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := STServiceTestSTReqResult{}
	var retval *STResponse
	if retval, err2 = p.handler.TestSTReq(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testSTReq: "+err2.Error())
		oprot.WriteMessageBegin("testSTReq", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("testSTReq", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type sTServiceProcessorTestObjReq struct {
	handler STService
}

func (p *sTServiceProcessorTestObjReq) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := STServiceTestObjReqArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("testObjReq", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := STServiceTestObjReqResult{}
	var retval *instparam.ObjResp
	if retval, err2 = p.handler.TestObjReq(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testObjReq: "+err2.Error())
		oprot.WriteMessageBegin("testObjReq", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("testObjReq", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type sTServiceProcessorTestException struct {
	handler STService
}

func (p *sTServiceProcessorTestException) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := STServiceTestExceptionArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("testException", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := STServiceTestExceptionResult{}
	var retval *STResponse
	if retval, err2 = p.handler.TestException(ctx, args.Req); err2 != nil {
		switch v := err2.(type) {
		case *STException:
			result.StException = v
		default:
			x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing testException: "+err2.Error())
			oprot.WriteMessageBegin("testException", thrift.EXCEPTION, seqId)
			x.Write(oprot)
			oprot.WriteMessageEnd()
			oprot.Flush(ctx)
			return true, err2
		}
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("testException", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type sTServiceProcessorCircuitBreakTest struct {
	handler STService
}

func (p *sTServiceProcessorCircuitBreakTest) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := STServiceCircuitBreakTestArgs{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("circuitBreakTest", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := STServiceCircuitBreakTestResult{}
	var retval *STResponse
	if retval, err2 = p.handler.CircuitBreakTest(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing circuitBreakTest: "+err2.Error())
		oprot.WriteMessageBegin("circuitBreakTest", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("circuitBreakTest", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type STServiceTestSTReqArgs struct {
	Req *STRequest `thrift:"req,1" frugal:"1,default,STRequest" json:"req"`
}

func NewSTServiceTestSTReqArgs() *STServiceTestSTReqArgs {
	return &STServiceTestSTReqArgs{}
}

func (p *STServiceTestSTReqArgs) InitDefault() {
	*p = STServiceTestSTReqArgs{}
}

var STServiceTestSTReqArgs_Req_DEFAULT *STRequest

func (p *STServiceTestSTReqArgs) GetReq() (v *STRequest) {
	if !p.IsSetReq() {
		return STServiceTestSTReqArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *STServiceTestSTReqArgs) SetReq(val *STRequest) {
	p.Req = val
}

var fieldIDToName_STServiceTestSTReqArgs = map[int16]string{
	1: "req",
}

func (p *STServiceTestSTReqArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *STServiceTestSTReqArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_STServiceTestSTReqArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *STServiceTestSTReqArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewSTRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *STServiceTestSTReqArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("testSTReq_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *STServiceTestSTReqArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *STServiceTestSTReqArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("STServiceTestSTReqArgs(%+v)", *p)
}

func (p *STServiceTestSTReqArgs) DeepEqual(ano *STServiceTestSTReqArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *STServiceTestSTReqArgs) Field1DeepEqual(src *STRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type STServiceTestSTReqResult struct {
	Success *STResponse `thrift:"success,0,optional" frugal:"0,optional,STResponse" json:"success,omitempty"`
}

func NewSTServiceTestSTReqResult() *STServiceTestSTReqResult {
	return &STServiceTestSTReqResult{}
}

func (p *STServiceTestSTReqResult) InitDefault() {
	*p = STServiceTestSTReqResult{}
}

var STServiceTestSTReqResult_Success_DEFAULT *STResponse

func (p *STServiceTestSTReqResult) GetSuccess() (v *STResponse) {
	if !p.IsSetSuccess() {
		return STServiceTestSTReqResult_Success_DEFAULT
	}
	return p.Success
}
func (p *STServiceTestSTReqResult) SetSuccess(x interface{}) {
	p.Success = x.(*STResponse)
}

var fieldIDToName_STServiceTestSTReqResult = map[int16]string{
	0: "success",
}

func (p *STServiceTestSTReqResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *STServiceTestSTReqResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_STServiceTestSTReqResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *STServiceTestSTReqResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewSTResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *STServiceTestSTReqResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("testSTReq_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *STServiceTestSTReqResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *STServiceTestSTReqResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("STServiceTestSTReqResult(%+v)", *p)
}

func (p *STServiceTestSTReqResult) DeepEqual(ano *STServiceTestSTReqResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *STServiceTestSTReqResult) Field0DeepEqual(src *STResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type STServiceTestObjReqArgs struct {
	Req *instparam.ObjReq `thrift:"req,1" frugal:"1,default,instparam.ObjReq" json:"req"`
}

func NewSTServiceTestObjReqArgs() *STServiceTestObjReqArgs {
	return &STServiceTestObjReqArgs{}
}

func (p *STServiceTestObjReqArgs) InitDefault() {
	*p = STServiceTestObjReqArgs{}
}

var STServiceTestObjReqArgs_Req_DEFAULT *instparam.ObjReq

func (p *STServiceTestObjReqArgs) GetReq() (v *instparam.ObjReq) {
	if !p.IsSetReq() {
		return STServiceTestObjReqArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *STServiceTestObjReqArgs) SetReq(val *instparam.ObjReq) {
	p.Req = val
}

var fieldIDToName_STServiceTestObjReqArgs = map[int16]string{
	1: "req",
}

func (p *STServiceTestObjReqArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *STServiceTestObjReqArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_STServiceTestObjReqArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *STServiceTestObjReqArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = instparam.NewObjReq()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *STServiceTestObjReqArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("testObjReq_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *STServiceTestObjReqArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *STServiceTestObjReqArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("STServiceTestObjReqArgs(%+v)", *p)
}

func (p *STServiceTestObjReqArgs) DeepEqual(ano *STServiceTestObjReqArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *STServiceTestObjReqArgs) Field1DeepEqual(src *instparam.ObjReq) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type STServiceTestObjReqResult struct {
	Success *instparam.ObjResp `thrift:"success,0,optional" frugal:"0,optional,instparam.ObjResp" json:"success,omitempty"`
}

func NewSTServiceTestObjReqResult() *STServiceTestObjReqResult {
	return &STServiceTestObjReqResult{}
}

func (p *STServiceTestObjReqResult) InitDefault() {
	*p = STServiceTestObjReqResult{}
}

var STServiceTestObjReqResult_Success_DEFAULT *instparam.ObjResp

func (p *STServiceTestObjReqResult) GetSuccess() (v *instparam.ObjResp) {
	if !p.IsSetSuccess() {
		return STServiceTestObjReqResult_Success_DEFAULT
	}
	return p.Success
}
func (p *STServiceTestObjReqResult) SetSuccess(x interface{}) {
	p.Success = x.(*instparam.ObjResp)
}

var fieldIDToName_STServiceTestObjReqResult = map[int16]string{
	0: "success",
}

func (p *STServiceTestObjReqResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *STServiceTestObjReqResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_STServiceTestObjReqResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *STServiceTestObjReqResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = instparam.NewObjResp()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *STServiceTestObjReqResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("testObjReq_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *STServiceTestObjReqResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *STServiceTestObjReqResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("STServiceTestObjReqResult(%+v)", *p)
}

func (p *STServiceTestObjReqResult) DeepEqual(ano *STServiceTestObjReqResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *STServiceTestObjReqResult) Field0DeepEqual(src *instparam.ObjResp) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type STServiceTestExceptionArgs struct {
	Req *STRequest `thrift:"req,1" frugal:"1,default,STRequest" json:"req"`
}

func NewSTServiceTestExceptionArgs() *STServiceTestExceptionArgs {
	return &STServiceTestExceptionArgs{}
}

func (p *STServiceTestExceptionArgs) InitDefault() {
	*p = STServiceTestExceptionArgs{}
}

var STServiceTestExceptionArgs_Req_DEFAULT *STRequest

func (p *STServiceTestExceptionArgs) GetReq() (v *STRequest) {
	if !p.IsSetReq() {
		return STServiceTestExceptionArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *STServiceTestExceptionArgs) SetReq(val *STRequest) {
	p.Req = val
}

var fieldIDToName_STServiceTestExceptionArgs = map[int16]string{
	1: "req",
}

func (p *STServiceTestExceptionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *STServiceTestExceptionArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_STServiceTestExceptionArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *STServiceTestExceptionArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewSTRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *STServiceTestExceptionArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("testException_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *STServiceTestExceptionArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *STServiceTestExceptionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("STServiceTestExceptionArgs(%+v)", *p)
}

func (p *STServiceTestExceptionArgs) DeepEqual(ano *STServiceTestExceptionArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *STServiceTestExceptionArgs) Field1DeepEqual(src *STRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type STServiceTestExceptionResult struct {
	Success     *STResponse  `thrift:"success,0,optional" frugal:"0,optional,STResponse" json:"success,omitempty"`
	StException *STException `thrift:"stException,1,optional" frugal:"1,optional,STException" json:"stException,omitempty"`
}

func NewSTServiceTestExceptionResult() *STServiceTestExceptionResult {
	return &STServiceTestExceptionResult{}
}

func (p *STServiceTestExceptionResult) InitDefault() {
	*p = STServiceTestExceptionResult{}
}

var STServiceTestExceptionResult_Success_DEFAULT *STResponse

func (p *STServiceTestExceptionResult) GetSuccess() (v *STResponse) {
	if !p.IsSetSuccess() {
		return STServiceTestExceptionResult_Success_DEFAULT
	}
	return p.Success
}

var STServiceTestExceptionResult_StException_DEFAULT *STException

func (p *STServiceTestExceptionResult) GetStException() (v *STException) {
	if !p.IsSetStException() {
		return STServiceTestExceptionResult_StException_DEFAULT
	}
	return p.StException
}
func (p *STServiceTestExceptionResult) SetSuccess(x interface{}) {
	p.Success = x.(*STResponse)
}
func (p *STServiceTestExceptionResult) SetStException(val *STException) {
	p.StException = val
}

var fieldIDToName_STServiceTestExceptionResult = map[int16]string{
	0: "success",
	1: "stException",
}

func (p *STServiceTestExceptionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *STServiceTestExceptionResult) IsSetStException() bool {
	return p.StException != nil
}

func (p *STServiceTestExceptionResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_STServiceTestExceptionResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *STServiceTestExceptionResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewSTResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *STServiceTestExceptionResult) ReadField1(iprot thrift.TProtocol) error {
	p.StException = NewSTException()
	if err := p.StException.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *STServiceTestExceptionResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("testException_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *STServiceTestExceptionResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *STServiceTestExceptionResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetStException() {
		if err = oprot.WriteFieldBegin("stException", thrift.STRUCT, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.StException.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *STServiceTestExceptionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("STServiceTestExceptionResult(%+v)", *p)
}

func (p *STServiceTestExceptionResult) DeepEqual(ano *STServiceTestExceptionResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	if !p.Field1DeepEqual(ano.StException) {
		return false
	}
	return true
}

func (p *STServiceTestExceptionResult) Field0DeepEqual(src *STResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}
func (p *STServiceTestExceptionResult) Field1DeepEqual(src *STException) bool {

	if !p.StException.DeepEqual(src) {
		return false
	}
	return true
}

type STServiceCircuitBreakTestArgs struct {
	Req *STRequest `thrift:"req,1" frugal:"1,default,STRequest" json:"req"`
}

func NewSTServiceCircuitBreakTestArgs() *STServiceCircuitBreakTestArgs {
	return &STServiceCircuitBreakTestArgs{}
}

func (p *STServiceCircuitBreakTestArgs) InitDefault() {
	*p = STServiceCircuitBreakTestArgs{}
}

var STServiceCircuitBreakTestArgs_Req_DEFAULT *STRequest

func (p *STServiceCircuitBreakTestArgs) GetReq() (v *STRequest) {
	if !p.IsSetReq() {
		return STServiceCircuitBreakTestArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *STServiceCircuitBreakTestArgs) SetReq(val *STRequest) {
	p.Req = val
}

var fieldIDToName_STServiceCircuitBreakTestArgs = map[int16]string{
	1: "req",
}

func (p *STServiceCircuitBreakTestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *STServiceCircuitBreakTestArgs) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_STServiceCircuitBreakTestArgs[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *STServiceCircuitBreakTestArgs) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewSTRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *STServiceCircuitBreakTestArgs) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("circuitBreakTest_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *STServiceCircuitBreakTestArgs) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *STServiceCircuitBreakTestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("STServiceCircuitBreakTestArgs(%+v)", *p)
}

func (p *STServiceCircuitBreakTestArgs) DeepEqual(ano *STServiceCircuitBreakTestArgs) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *STServiceCircuitBreakTestArgs) Field1DeepEqual(src *STRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type STServiceCircuitBreakTestResult struct {
	Success *STResponse `thrift:"success,0,optional" frugal:"0,optional,STResponse" json:"success,omitempty"`
}

func NewSTServiceCircuitBreakTestResult() *STServiceCircuitBreakTestResult {
	return &STServiceCircuitBreakTestResult{}
}

func (p *STServiceCircuitBreakTestResult) InitDefault() {
	*p = STServiceCircuitBreakTestResult{}
}

var STServiceCircuitBreakTestResult_Success_DEFAULT *STResponse

func (p *STServiceCircuitBreakTestResult) GetSuccess() (v *STResponse) {
	if !p.IsSetSuccess() {
		return STServiceCircuitBreakTestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *STServiceCircuitBreakTestResult) SetSuccess(x interface{}) {
	p.Success = x.(*STResponse)
}

var fieldIDToName_STServiceCircuitBreakTestResult = map[int16]string{
	0: "success",
}

func (p *STServiceCircuitBreakTestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *STServiceCircuitBreakTestResult) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_STServiceCircuitBreakTestResult[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *STServiceCircuitBreakTestResult) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewSTResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *STServiceCircuitBreakTestResult) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("circuitBreakTest_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *STServiceCircuitBreakTestResult) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *STServiceCircuitBreakTestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("STServiceCircuitBreakTestResult(%+v)", *p)
}

func (p *STServiceCircuitBreakTestResult) DeepEqual(ano *STServiceCircuitBreakTestResult) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *STServiceCircuitBreakTestResult) Field0DeepEqual(src *STResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

// Code generated by thriftgo (0.3.20). DO NOT EDIT.

package stability

import (
	"context"
	"database/sql"
	"database/sql/driver"
	"fmt"
	"github.com/cloudwego/kitex-tests/kitex_gen/base"
	"github.com/cloudwego/kitex-tests/kitex_gen/thrift/instparam"
)

type TestEnum int64

const (
	TestEnum_FIRST  TestEnum = 1
	TestEnum_SECOND TestEnum = 2
	TestEnum_THIRD  TestEnum = 3
	TestEnum_FOURTH TestEnum = 4
)

func (p TestEnum) String() string {
	switch p {
	case TestEnum_FIRST:
		return "FIRST"
	case TestEnum_SECOND:
		return "SECOND"
	case TestEnum_THIRD:
		return "THIRD"
	case TestEnum_FOURTH:
		return "FOURTH"
	}
	return "<UNSET>"
}

func TestEnumFromString(s string) (TestEnum, error) {
	switch s {
	case "FIRST":
		return TestEnum_FIRST, nil
	case "SECOND":
		return TestEnum_SECOND, nil
	case "THIRD":
		return TestEnum_THIRD, nil
	case "FOURTH":
		return TestEnum_FOURTH, nil
	}
	return TestEnum(0), fmt.Errorf("not a valid TestEnum string")
}

func TestEnumPtr(v TestEnum) *TestEnum { return &v }
func (p *TestEnum) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = TestEnum(result.Int64)
	return
}

func (p *TestEnum) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type STRequest struct {
	Name         string            `thrift:"Name,1,required" frugal:"1,required,string" json:"Name"`
	On           *bool             `thrift:"on,2,optional" frugal:"2,optional,bool" json:"on,omitempty"`
	B            int8              `thrift:"b,3" frugal:"3,default,byte" json:"b"`
	Int16        int16             `thrift:"int16,4,optional" frugal:"4,optional,i16" json:"int16,omitempty"`
	Int32        int32             `thrift:"int32,5" frugal:"5,default,i32" json:"int32"`
	Int64        int64             `thrift:"int64,6" frugal:"6,default,i64" json:"int64"`
	D            float64           `thrift:"d,7" frugal:"7,default,double" json:"d"`
	Str          string            `thrift:"str,8" frugal:"8,default,string" json:"str"`
	Bin          []byte            `thrift:"bin,9" frugal:"9,default,binary" json:"bin"`
	StringMap    map[string]string `thrift:"stringMap,10" frugal:"10,default,map<string:string>" json:"stringMap"`
	StringList   []string          `thrift:"stringList,11" frugal:"11,default,list<string>" json:"stringList"`
	StringSet    []string          `thrift:"stringSet,12" frugal:"12,default,set<string>" json:"stringSet"`
	E            TestEnum          `thrift:"e,13" frugal:"13,default,TestEnum" json:"e"`
	FlagMsg      string            `thrift:"flagMsg,14,required" frugal:"14,required,string" json:"flagMsg"`
	Framework    string            `thrift:"framework,15,required" frugal:"15,required,string" json:"framework"`
	MockCost     *string           `thrift:"mockCost,16,optional" frugal:"16,optional,string" json:"mockCost,omitempty"`
	DefaultValue string            `thrift:"defaultValue,17,optional" frugal:"17,optional,string" json:"defaultValue,omitempty"`
	Base         *base.Base        `thrift:"Base,255,optional" frugal:"255,optional,base.Base" json:"Base,omitempty"`
}

func NewSTRequest() *STRequest {
	return &STRequest{

		Int16:        42,
		Framework:    "kitex",
		DefaultValue: "default",
	}
}

func (p *STRequest) InitDefault() {
	p.Int16 = 42
	p.Framework = "kitex"
	p.DefaultValue = "default"
}

func (p *STRequest) GetName() (v string) {
	return p.Name
}

var STRequest_On_DEFAULT bool

func (p *STRequest) GetOn() (v bool) {
	if !p.IsSetOn() {
		return STRequest_On_DEFAULT
	}
	return *p.On
}

func (p *STRequest) GetB() (v int8) {
	return p.B
}

var STRequest_Int16_DEFAULT int16 = 42

func (p *STRequest) GetInt16() (v int16) {
	if !p.IsSetInt16() {
		return STRequest_Int16_DEFAULT
	}
	return p.Int16
}

func (p *STRequest) GetInt32() (v int32) {
	return p.Int32
}

func (p *STRequest) GetInt64() (v int64) {
	return p.Int64
}

func (p *STRequest) GetD() (v float64) {
	return p.D
}

func (p *STRequest) GetStr() (v string) {
	return p.Str
}

func (p *STRequest) GetBin() (v []byte) {
	return p.Bin
}

func (p *STRequest) GetStringMap() (v map[string]string) {
	return p.StringMap
}

func (p *STRequest) GetStringList() (v []string) {
	return p.StringList
}

func (p *STRequest) GetStringSet() (v []string) {
	return p.StringSet
}

func (p *STRequest) GetE() (v TestEnum) {
	return p.E
}

func (p *STRequest) GetFlagMsg() (v string) {
	return p.FlagMsg
}

func (p *STRequest) GetFramework() (v string) {
	return p.Framework
}

var STRequest_MockCost_DEFAULT string

func (p *STRequest) GetMockCost() (v string) {
	if !p.IsSetMockCost() {
		return STRequest_MockCost_DEFAULT
	}
	return *p.MockCost
}

var STRequest_DefaultValue_DEFAULT string = "default"

func (p *STRequest) GetDefaultValue() (v string) {
	if !p.IsSetDefaultValue() {
		return STRequest_DefaultValue_DEFAULT
	}
	return p.DefaultValue
}

var STRequest_Base_DEFAULT *base.Base

func (p *STRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return STRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *STRequest) SetName(val string) {
	p.Name = val
}
func (p *STRequest) SetOn(val *bool) {
	p.On = val
}
func (p *STRequest) SetB(val int8) {
	p.B = val
}
func (p *STRequest) SetInt16(val int16) {
	p.Int16 = val
}
func (p *STRequest) SetInt32(val int32) {
	p.Int32 = val
}
func (p *STRequest) SetInt64(val int64) {
	p.Int64 = val
}
func (p *STRequest) SetD(val float64) {
	p.D = val
}
func (p *STRequest) SetStr(val string) {
	p.Str = val
}
func (p *STRequest) SetBin(val []byte) {
	p.Bin = val
}
func (p *STRequest) SetStringMap(val map[string]string) {
	p.StringMap = val
}
func (p *STRequest) SetStringList(val []string) {
	p.StringList = val
}
func (p *STRequest) SetStringSet(val []string) {
	p.StringSet = val
}
func (p *STRequest) SetE(val TestEnum) {
	p.E = val
}
func (p *STRequest) SetFlagMsg(val string) {
	p.FlagMsg = val
}
func (p *STRequest) SetFramework(val string) {
	p.Framework = val
}
func (p *STRequest) SetMockCost(val *string) {
	p.MockCost = val
}
func (p *STRequest) SetDefaultValue(val string) {
	p.DefaultValue = val
}
func (p *STRequest) SetBase(val *base.Base) {
	p.Base = val
}

func (p *STRequest) IsSetOn() bool {
	return p.On != nil
}

func (p *STRequest) IsSetInt16() bool {
	return p.Int16 != STRequest_Int16_DEFAULT
}

func (p *STRequest) IsSetMockCost() bool {
	return p.MockCost != nil
}

func (p *STRequest) IsSetDefaultValue() bool {
	return p.DefaultValue != STRequest_DefaultValue_DEFAULT
}

func (p *STRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *STRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("STRequest(%+v)", *p)
}

var fieldIDToName_STRequest = map[int16]string{
	1:   "Name",
	2:   "on",
	3:   "b",
	4:   "int16",
	5:   "int32",
	6:   "int64",
	7:   "d",
	8:   "str",
	9:   "bin",
	10:  "stringMap",
	11:  "stringList",
	12:  "stringSet",
	13:  "e",
	14:  "flagMsg",
	15:  "framework",
	16:  "mockCost",
	17:  "defaultValue",
	255: "Base",
}

type STResponse struct {
	Str          string            `thrift:"str,1" frugal:"1,default,string" json:"str"`
	Mp           map[string]string `thrift:"mp,2" frugal:"2,default,map<string:string>" json:"mp"`
	FlagMsg      string            `thrift:"flagMsg,3,required" frugal:"3,required,string" json:"flagMsg"`
	DefaultValue string            `thrift:"defaultValue,4,optional" frugal:"4,optional,string" json:"defaultValue,omitempty"`
	BaseResp     *base.BaseResp    `thrift:"BaseResp,255,optional" frugal:"255,optional,base.BaseResp" json:"BaseResp,omitempty"`
}

func NewSTResponse() *STResponse {
	return &STResponse{

		DefaultValue: "default",
	}
}

func (p *STResponse) InitDefault() {
	p.DefaultValue = "default"
}

func (p *STResponse) GetStr() (v string) {
	return p.Str
}

func (p *STResponse) GetMp() (v map[string]string) {
	return p.Mp
}

func (p *STResponse) GetFlagMsg() (v string) {
	return p.FlagMsg
}

var STResponse_DefaultValue_DEFAULT string = "default"

func (p *STResponse) GetDefaultValue() (v string) {
	if !p.IsSetDefaultValue() {
		return STResponse_DefaultValue_DEFAULT
	}
	return p.DefaultValue
}

var STResponse_BaseResp_DEFAULT *base.BaseResp

func (p *STResponse) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return STResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *STResponse) SetStr(val string) {
	p.Str = val
}
func (p *STResponse) SetMp(val map[string]string) {
	p.Mp = val
}
func (p *STResponse) SetFlagMsg(val string) {
	p.FlagMsg = val
}
func (p *STResponse) SetDefaultValue(val string) {
	p.DefaultValue = val
}
func (p *STResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *STResponse) IsSetDefaultValue() bool {
	return p.DefaultValue != STResponse_DefaultValue_DEFAULT
}

func (p *STResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *STResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("STResponse(%+v)", *p)
}

var fieldIDToName_STResponse = map[int16]string{
	1:   "str",
	2:   "mp",
	3:   "flagMsg",
	4:   "defaultValue",
	255: "BaseResp",
}

type STException struct {
	Message string `thrift:"message,1" frugal:"1,default,string" json:"message"`
}

func NewSTException() *STException {
	return &STException{}
}

func (p *STException) InitDefault() {
}

func (p *STException) GetMessage() (v string) {
	return p.Message
}
func (p *STException) SetMessage(val string) {
	p.Message = val
}

func (p *STException) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("STException(%+v)", *p)
}
func (p *STException) Error() string {
	return p.String()
}

var fieldIDToName_STException = map[int16]string{
	1: "message",
}

type OnewayService interface {
	VisitOneway(ctx context.Context, req *STRequest) (err error)
}

type OnewayServiceVisitOnewayArgs struct {
	Req *STRequest `thrift:"req,1" frugal:"1,default,STRequest" json:"req"`
}

func NewOnewayServiceVisitOnewayArgs() *OnewayServiceVisitOnewayArgs {
	return &OnewayServiceVisitOnewayArgs{}
}

func (p *OnewayServiceVisitOnewayArgs) InitDefault() {
}

var OnewayServiceVisitOnewayArgs_Req_DEFAULT *STRequest

func (p *OnewayServiceVisitOnewayArgs) GetReq() (v *STRequest) {
	if !p.IsSetReq() {
		return OnewayServiceVisitOnewayArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *OnewayServiceVisitOnewayArgs) SetReq(val *STRequest) {
	p.Req = val
}

func (p *OnewayServiceVisitOnewayArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *OnewayServiceVisitOnewayArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("OnewayServiceVisitOnewayArgs(%+v)", *p)
}

var fieldIDToName_OnewayServiceVisitOnewayArgs = map[int16]string{
	1: "req",
}

type STService interface {
	OnewayService

	TestSTReq(ctx context.Context, req *STRequest) (r *STResponse, err error)

	TestObjReq(ctx context.Context, req *instparam.ObjReq) (r *instparam.ObjResp, err error)

	TestException(ctx context.Context, req *STRequest) (r *STResponse, err error)

	CircuitBreakTest(ctx context.Context, req *STRequest) (r *STResponse, err error)
}

type STServiceTestSTReqArgs struct {
	Req *STRequest `thrift:"req,1" frugal:"1,default,STRequest" json:"req"`
}

func NewSTServiceTestSTReqArgs() *STServiceTestSTReqArgs {
	return &STServiceTestSTReqArgs{}
}

func (p *STServiceTestSTReqArgs) InitDefault() {
}

var STServiceTestSTReqArgs_Req_DEFAULT *STRequest

func (p *STServiceTestSTReqArgs) GetReq() (v *STRequest) {
	if !p.IsSetReq() {
		return STServiceTestSTReqArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *STServiceTestSTReqArgs) SetReq(val *STRequest) {
	p.Req = val
}

func (p *STServiceTestSTReqArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *STServiceTestSTReqArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("STServiceTestSTReqArgs(%+v)", *p)
}

var fieldIDToName_STServiceTestSTReqArgs = map[int16]string{
	1: "req",
}

type STServiceTestSTReqResult struct {
	Success *STResponse `thrift:"success,0,optional" frugal:"0,optional,STResponse" json:"success,omitempty"`
}

func NewSTServiceTestSTReqResult() *STServiceTestSTReqResult {
	return &STServiceTestSTReqResult{}
}

func (p *STServiceTestSTReqResult) InitDefault() {
}

var STServiceTestSTReqResult_Success_DEFAULT *STResponse

func (p *STServiceTestSTReqResult) GetSuccess() (v *STResponse) {
	if !p.IsSetSuccess() {
		return STServiceTestSTReqResult_Success_DEFAULT
	}
	return p.Success
}
func (p *STServiceTestSTReqResult) SetSuccess(x interface{}) {
	p.Success = x.(*STResponse)
}

func (p *STServiceTestSTReqResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *STServiceTestSTReqResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("STServiceTestSTReqResult(%+v)", *p)
}

var fieldIDToName_STServiceTestSTReqResult = map[int16]string{
	0: "success",
}

type STServiceTestObjReqArgs struct {
	Req *instparam.ObjReq `thrift:"req,1" frugal:"1,default,instparam.ObjReq" json:"req"`
}

func NewSTServiceTestObjReqArgs() *STServiceTestObjReqArgs {
	return &STServiceTestObjReqArgs{}
}

func (p *STServiceTestObjReqArgs) InitDefault() {
}

var STServiceTestObjReqArgs_Req_DEFAULT *instparam.ObjReq

func (p *STServiceTestObjReqArgs) GetReq() (v *instparam.ObjReq) {
	if !p.IsSetReq() {
		return STServiceTestObjReqArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *STServiceTestObjReqArgs) SetReq(val *instparam.ObjReq) {
	p.Req = val
}

func (p *STServiceTestObjReqArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *STServiceTestObjReqArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("STServiceTestObjReqArgs(%+v)", *p)
}

var fieldIDToName_STServiceTestObjReqArgs = map[int16]string{
	1: "req",
}

type STServiceTestObjReqResult struct {
	Success *instparam.ObjResp `thrift:"success,0,optional" frugal:"0,optional,instparam.ObjResp" json:"success,omitempty"`
}

func NewSTServiceTestObjReqResult() *STServiceTestObjReqResult {
	return &STServiceTestObjReqResult{}
}

func (p *STServiceTestObjReqResult) InitDefault() {
}

var STServiceTestObjReqResult_Success_DEFAULT *instparam.ObjResp

func (p *STServiceTestObjReqResult) GetSuccess() (v *instparam.ObjResp) {
	if !p.IsSetSuccess() {
		return STServiceTestObjReqResult_Success_DEFAULT
	}
	return p.Success
}
func (p *STServiceTestObjReqResult) SetSuccess(x interface{}) {
	p.Success = x.(*instparam.ObjResp)
}

func (p *STServiceTestObjReqResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *STServiceTestObjReqResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("STServiceTestObjReqResult(%+v)", *p)
}

var fieldIDToName_STServiceTestObjReqResult = map[int16]string{
	0: "success",
}

type STServiceTestExceptionArgs struct {
	Req *STRequest `thrift:"req,1" frugal:"1,default,STRequest" json:"req"`
}

func NewSTServiceTestExceptionArgs() *STServiceTestExceptionArgs {
	return &STServiceTestExceptionArgs{}
}

func (p *STServiceTestExceptionArgs) InitDefault() {
}

var STServiceTestExceptionArgs_Req_DEFAULT *STRequest

func (p *STServiceTestExceptionArgs) GetReq() (v *STRequest) {
	if !p.IsSetReq() {
		return STServiceTestExceptionArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *STServiceTestExceptionArgs) SetReq(val *STRequest) {
	p.Req = val
}

func (p *STServiceTestExceptionArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *STServiceTestExceptionArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("STServiceTestExceptionArgs(%+v)", *p)
}

var fieldIDToName_STServiceTestExceptionArgs = map[int16]string{
	1: "req",
}

type STServiceTestExceptionResult struct {
	Success     *STResponse  `thrift:"success,0,optional" frugal:"0,optional,STResponse" json:"success,omitempty"`
	StException *STException `thrift:"stException,1,optional" frugal:"1,optional,STException" json:"stException,omitempty"`
}

func NewSTServiceTestExceptionResult() *STServiceTestExceptionResult {
	return &STServiceTestExceptionResult{}
}

func (p *STServiceTestExceptionResult) InitDefault() {
}

var STServiceTestExceptionResult_Success_DEFAULT *STResponse

func (p *STServiceTestExceptionResult) GetSuccess() (v *STResponse) {
	if !p.IsSetSuccess() {
		return STServiceTestExceptionResult_Success_DEFAULT
	}
	return p.Success
}

var STServiceTestExceptionResult_StException_DEFAULT *STException

func (p *STServiceTestExceptionResult) GetStException() (v *STException) {
	if !p.IsSetStException() {
		return STServiceTestExceptionResult_StException_DEFAULT
	}
	return p.StException
}
func (p *STServiceTestExceptionResult) SetSuccess(x interface{}) {
	p.Success = x.(*STResponse)
}
func (p *STServiceTestExceptionResult) SetStException(val *STException) {
	p.StException = val
}

func (p *STServiceTestExceptionResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *STServiceTestExceptionResult) IsSetStException() bool {
	return p.StException != nil
}

func (p *STServiceTestExceptionResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("STServiceTestExceptionResult(%+v)", *p)
}

var fieldIDToName_STServiceTestExceptionResult = map[int16]string{
	0: "success",
	1: "stException",
}

type STServiceCircuitBreakTestArgs struct {
	Req *STRequest `thrift:"req,1" frugal:"1,default,STRequest" json:"req"`
}

func NewSTServiceCircuitBreakTestArgs() *STServiceCircuitBreakTestArgs {
	return &STServiceCircuitBreakTestArgs{}
}

func (p *STServiceCircuitBreakTestArgs) InitDefault() {
}

var STServiceCircuitBreakTestArgs_Req_DEFAULT *STRequest

func (p *STServiceCircuitBreakTestArgs) GetReq() (v *STRequest) {
	if !p.IsSetReq() {
		return STServiceCircuitBreakTestArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *STServiceCircuitBreakTestArgs) SetReq(val *STRequest) {
	p.Req = val
}

func (p *STServiceCircuitBreakTestArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *STServiceCircuitBreakTestArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("STServiceCircuitBreakTestArgs(%+v)", *p)
}

var fieldIDToName_STServiceCircuitBreakTestArgs = map[int16]string{
	1: "req",
}

type STServiceCircuitBreakTestResult struct {
	Success *STResponse `thrift:"success,0,optional" frugal:"0,optional,STResponse" json:"success,omitempty"`
}

func NewSTServiceCircuitBreakTestResult() *STServiceCircuitBreakTestResult {
	return &STServiceCircuitBreakTestResult{}
}

func (p *STServiceCircuitBreakTestResult) InitDefault() {
}

var STServiceCircuitBreakTestResult_Success_DEFAULT *STResponse

func (p *STServiceCircuitBreakTestResult) GetSuccess() (v *STResponse) {
	if !p.IsSetSuccess() {
		return STServiceCircuitBreakTestResult_Success_DEFAULT
	}
	return p.Success
}
func (p *STServiceCircuitBreakTestResult) SetSuccess(x interface{}) {
	p.Success = x.(*STResponse)
}

func (p *STServiceCircuitBreakTestResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *STServiceCircuitBreakTestResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("STServiceCircuitBreakTestResult(%+v)", *p)
}

var fieldIDToName_STServiceCircuitBreakTestResult = map[int16]string{
	0: "success",
}

// exceptions of methods in STService.
var (
	_ error = (*STException)(nil)
)

// Code generated by Kitex v0.5.2. DO NOT EDIT.

package stservice

import (
	"context"
	instparam "github.com/cloudwego/kitex-tests/kitex_gen/thrift/instparam"
	stability "github.com/cloudwego/kitex-tests/kitex_gen/thrift/stability"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return sTServiceServiceInfo
}

var sTServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "STService"
	handlerType := (*stability.STService)(nil)
	methods := map[string]kitex.MethodInfo{
		"VisitOneway":      kitex.NewMethodInfo(visitOnewayHandler, newOnewayServiceVisitOnewayArgs, nil, true),
		"testSTReq":        kitex.NewMethodInfo(testSTReqHandler, newSTServiceTestSTReqArgs, newSTServiceTestSTReqResult, false),
		"testObjReq":       kitex.NewMethodInfo(testObjReqHandler, newSTServiceTestObjReqArgs, newSTServiceTestObjReqResult, false),
		"testException":    kitex.NewMethodInfo(testExceptionHandler, newSTServiceTestExceptionArgs, newSTServiceTestExceptionResult, false),
		"circuitBreakTest": kitex.NewMethodInfo(circuitBreakTestHandler, newSTServiceCircuitBreakTestArgs, newSTServiceCircuitBreakTestResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "stability",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.5.2",
		Extra:           extra,
	}
	return svcInfo
}

func visitOnewayHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*stability.OnewayServiceVisitOnewayArgs)

	err := handler.(stability.OnewayService).VisitOneway(ctx, realArg.Req)
	if err != nil {
		return err
	}

	return nil
}
func newOnewayServiceVisitOnewayArgs() interface{} {
	return stability.NewOnewayServiceVisitOnewayArgs()
}

func testSTReqHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*stability.STServiceTestSTReqArgs)
	realResult := result.(*stability.STServiceTestSTReqResult)
	success, err := handler.(stability.STService).TestSTReq(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSTServiceTestSTReqArgs() interface{} {
	return stability.NewSTServiceTestSTReqArgs()
}

func newSTServiceTestSTReqResult() interface{} {
	return stability.NewSTServiceTestSTReqResult()
}

func testObjReqHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*stability.STServiceTestObjReqArgs)
	realResult := result.(*stability.STServiceTestObjReqResult)
	success, err := handler.(stability.STService).TestObjReq(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSTServiceTestObjReqArgs() interface{} {
	return stability.NewSTServiceTestObjReqArgs()
}

func newSTServiceTestObjReqResult() interface{} {
	return stability.NewSTServiceTestObjReqResult()
}

func testExceptionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*stability.STServiceTestExceptionArgs)
	realResult := result.(*stability.STServiceTestExceptionResult)
	success, err := handler.(stability.STService).TestException(ctx, realArg.Req)
	if err != nil {
		switch v := err.(type) {
		case *stability.STException:
			realResult.StException = v
		default:
			return err
		}
	} else {
		realResult.Success = success
	}
	return nil
}
func newSTServiceTestExceptionArgs() interface{} {
	return stability.NewSTServiceTestExceptionArgs()
}

func newSTServiceTestExceptionResult() interface{} {
	return stability.NewSTServiceTestExceptionResult()
}

func circuitBreakTestHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*stability.STServiceCircuitBreakTestArgs)
	realResult := result.(*stability.STServiceCircuitBreakTestResult)
	success, err := handler.(stability.STService).CircuitBreakTest(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSTServiceCircuitBreakTestArgs() interface{} {
	return stability.NewSTServiceCircuitBreakTestArgs()
}

func newSTServiceCircuitBreakTestResult() interface{} {
	return stability.NewSTServiceCircuitBreakTestResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) VisitOneway(ctx context.Context, req *stability.STRequest) (err error) {
	var _args stability.OnewayServiceVisitOnewayArgs
	_args.Req = req
	if err = p.c.Call(ctx, "VisitOneway", &_args, nil); err != nil {
		return
	}
	return nil
}

func (p *kClient) TestSTReq(ctx context.Context, req *stability.STRequest) (r *stability.STResponse, err error) {
	var _args stability.STServiceTestSTReqArgs
	_args.Req = req
	var _result stability.STServiceTestSTReqResult
	if err = p.c.Call(ctx, "testSTReq", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) TestObjReq(ctx context.Context, req *instparam.ObjReq) (r *instparam.ObjResp, err error) {
	var _args stability.STServiceTestObjReqArgs
	_args.Req = req
	var _result stability.STServiceTestObjReqResult
	if err = p.c.Call(ctx, "testObjReq", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) TestException(ctx context.Context, req *stability.STRequest) (r *stability.STResponse, err error) {
	var _args stability.STServiceTestExceptionArgs
	_args.Req = req
	var _result stability.STServiceTestExceptionResult
	if err = p.c.Call(ctx, "testException", &_args, &_result); err != nil {
		return
	}
	switch {
	case _result.StException != nil:
		return r, _result.StException
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CircuitBreakTest(ctx context.Context, req *stability.STRequest) (r *stability.STResponse, err error) {
	var _args stability.STServiceCircuitBreakTestArgs
	_args.Req = req
	var _result stability.STServiceCircuitBreakTestResult
	if err = p.c.Call(ctx, "circuitBreakTest", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

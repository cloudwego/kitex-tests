// Code generated by thriftgo (0.3.20). DO NOT EDIT.

package combine_service

import (
	"context"
	"fmt"
)

type Request struct {
	Message string `thrift:"message,1" frugal:"1,default,string" json:"message"`
}

func NewRequest() *Request {
	return &Request{}
}

func (p *Request) InitDefault() {
}

func (p *Request) GetMessage() (v string) {
	return p.Message
}
func (p *Request) SetMessage(val string) {
	p.Message = val
}

func (p *Request) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Request(%+v)", *p)
}

var fieldIDToName_Request = map[int16]string{
	1: "message",
}

type Response struct {
	Message string `thrift:"message,1" frugal:"1,default,string" json:"message"`
}

func NewResponse() *Response {
	return &Response{}
}

func (p *Response) InitDefault() {
}

func (p *Response) GetMessage() (v string) {
	return p.Message
}
func (p *Response) SetMessage(val string) {
	p.Message = val
}

func (p *Response) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Response(%+v)", *p)
}

var fieldIDToName_Response = map[int16]string{
	1: "message",
}

type ServiceA interface {
	Echo1(ctx context.Context, req *Request) (r *Response, err error)
}

type ServiceAEcho1Args struct {
	Req *Request `thrift:"req,1" frugal:"1,default,Request" json:"req"`
}

func NewServiceAEcho1Args() *ServiceAEcho1Args {
	return &ServiceAEcho1Args{}
}

func (p *ServiceAEcho1Args) InitDefault() {
}

var ServiceAEcho1Args_Req_DEFAULT *Request

func (p *ServiceAEcho1Args) GetReq() (v *Request) {
	if !p.IsSetReq() {
		return ServiceAEcho1Args_Req_DEFAULT
	}
	return p.Req
}
func (p *ServiceAEcho1Args) SetReq(val *Request) {
	p.Req = val
}

func (p *ServiceAEcho1Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *ServiceAEcho1Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ServiceAEcho1Args(%+v)", *p)
}

var fieldIDToName_ServiceAEcho1Args = map[int16]string{
	1: "req",
}

type ServiceAEcho1Result struct {
	Success *Response `thrift:"success,0,optional" frugal:"0,optional,Response" json:"success,omitempty"`
}

func NewServiceAEcho1Result() *ServiceAEcho1Result {
	return &ServiceAEcho1Result{}
}

func (p *ServiceAEcho1Result) InitDefault() {
}

var ServiceAEcho1Result_Success_DEFAULT *Response

func (p *ServiceAEcho1Result) GetSuccess() (v *Response) {
	if !p.IsSetSuccess() {
		return ServiceAEcho1Result_Success_DEFAULT
	}
	return p.Success
}
func (p *ServiceAEcho1Result) SetSuccess(x interface{}) {
	p.Success = x.(*Response)
}

func (p *ServiceAEcho1Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ServiceAEcho1Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ServiceAEcho1Result(%+v)", *p)
}

var fieldIDToName_ServiceAEcho1Result = map[int16]string{
	0: "success",
}

type ServiceB interface {
	Echo2(ctx context.Context, req *Request) (r *Response, err error)
}

type ServiceBEcho2Args struct {
	Req *Request `thrift:"req,1" frugal:"1,default,Request" json:"req"`
}

func NewServiceBEcho2Args() *ServiceBEcho2Args {
	return &ServiceBEcho2Args{}
}

func (p *ServiceBEcho2Args) InitDefault() {
}

var ServiceBEcho2Args_Req_DEFAULT *Request

func (p *ServiceBEcho2Args) GetReq() (v *Request) {
	if !p.IsSetReq() {
		return ServiceBEcho2Args_Req_DEFAULT
	}
	return p.Req
}
func (p *ServiceBEcho2Args) SetReq(val *Request) {
	p.Req = val
}

func (p *ServiceBEcho2Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *ServiceBEcho2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ServiceBEcho2Args(%+v)", *p)
}

var fieldIDToName_ServiceBEcho2Args = map[int16]string{
	1: "req",
}

type ServiceBEcho2Result struct {
	Success *Response `thrift:"success,0,optional" frugal:"0,optional,Response" json:"success,omitempty"`
}

func NewServiceBEcho2Result() *ServiceBEcho2Result {
	return &ServiceBEcho2Result{}
}

func (p *ServiceBEcho2Result) InitDefault() {
}

var ServiceBEcho2Result_Success_DEFAULT *Response

func (p *ServiceBEcho2Result) GetSuccess() (v *Response) {
	if !p.IsSetSuccess() {
		return ServiceBEcho2Result_Success_DEFAULT
	}
	return p.Success
}
func (p *ServiceBEcho2Result) SetSuccess(x interface{}) {
	p.Success = x.(*Response)
}

func (p *ServiceBEcho2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ServiceBEcho2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ServiceBEcho2Result(%+v)", *p)
}

var fieldIDToName_ServiceBEcho2Result = map[int16]string{
	0: "success",
}

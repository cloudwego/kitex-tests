// Code generated by Kitex v0.12.3. DO NOT EDIT.

package echoservice

import (
	"context"
	"errors"
	tenant "github.com/cloudwego/kitex-tests/kitex_gen/thrift/tenant"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"Echo": kitex.NewMethodInfo(
		echoHandler,
		newEchoServiceEchoArgs,
		newEchoServiceEchoResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"EchoOneway": kitex.NewMethodInfo(
		echoOnewayHandler,
		newEchoServiceEchoOnewayArgs,
		nil,
		true,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	echoServiceServiceInfo                = NewServiceInfo()
	echoServiceServiceInfoForClient       = NewServiceInfoForClient()
	echoServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return echoServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return echoServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return echoServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "EchoService"
	handlerType := (*tenant.EchoService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "tenant",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.12.3",
		Extra:           extra,
	}
	return svcInfo
}

func echoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*tenant.EchoServiceEchoArgs)
	realResult := result.(*tenant.EchoServiceEchoResult)
	success, err := handler.(tenant.EchoService).Echo(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newEchoServiceEchoArgs() interface{} {
	return tenant.NewEchoServiceEchoArgs()
}

func newEchoServiceEchoResult() interface{} {
	return tenant.NewEchoServiceEchoResult()
}

func echoOnewayHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*tenant.EchoServiceEchoOnewayArgs)

	err := handler.(tenant.EchoService).EchoOneway(ctx, realArg.Request)
	if err != nil {
		return err
	}

	return nil
}
func newEchoServiceEchoOnewayArgs() interface{} {
	return tenant.NewEchoServiceEchoOnewayArgs()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Echo(ctx context.Context, request *tenant.EchoRequest) (r *tenant.EchoResponse, err error) {
	var _args tenant.EchoServiceEchoArgs
	_args.Request = request
	var _result tenant.EchoServiceEchoResult
	if err = p.c.Call(ctx, "Echo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) EchoOneway(ctx context.Context, request *tenant.EchoRequest) (err error) {
	var _args tenant.EchoServiceEchoOnewayArgs
	_args.Request = request
	if err = p.c.Call(ctx, "EchoOneway", &_args, nil); err != nil {
		return
	}
	return nil
}

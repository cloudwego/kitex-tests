// Code generated by thriftgo (0.3.20). DO NOT EDIT.

package tenant

import (
	"context"
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type ErrorCode int64

const (
	ErrorCode_SUCCESS ErrorCode = 0
	ErrorCode_FAILURE ErrorCode = 1
)

func (p ErrorCode) String() string {
	switch p {
	case ErrorCode_SUCCESS:
		return "SUCCESS"
	case ErrorCode_FAILURE:
		return "FAILURE"
	}
	return "<UNSET>"
}

func ErrorCodeFromString(s string) (ErrorCode, error) {
	switch s {
	case "SUCCESS":
		return ErrorCode_SUCCESS, nil
	case "FAILURE":
		return ErrorCode_FAILURE, nil
	}
	return ErrorCode(0), fmt.Errorf("not a valid ErrorCode string")
}

func ErrorCodePtr(v ErrorCode) *ErrorCode { return &v }
func (p *ErrorCode) Scan(value interface{}) (err error) {
	var result sql.NullInt64
	err = result.Scan(value)
	*p = ErrorCode(result.Int64)
	return
}

func (p *ErrorCode) Value() (driver.Value, error) {
	if p == nil {
		return nil, nil
	}
	return int64(*p), nil
}

type Info struct {
	Map map[string]string `thrift:"Map,1" frugal:"1,default,map<string:string>" json:"Map"`
	ID  int64             `thrift:"ID,2" frugal:"2,default,i64" json:"ID"`
}

func NewInfo() *Info {
	return &Info{}
}

func (p *Info) InitDefault() {
}

func (p *Info) GetMap() (v map[string]string) {
	return p.Map
}

func (p *Info) GetID() (v int64) {
	return p.ID
}
func (p *Info) SetMap(val map[string]string) {
	p.Map = val
}
func (p *Info) SetID(val int64) {
	p.ID = val
}

func (p *Info) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Info(%+v)", *p)
}

var fieldIDToName_Info = map[int16]string{
	1: "Map",
	2: "ID",
}

type EchoRequest struct {
	Msg       string            `thrift:"Msg,1" frugal:"1,default,string" json:"Msg"`
	I8        int8              `thrift:"I8,2" frugal:"2,default,i8" json:"I8"`
	I16       int16             `thrift:"I16,3" frugal:"3,default,i16" json:"I16"`
	I32       int32             `thrift:"I32,4" frugal:"4,default,i32" json:"I32"`
	I64       int64             `thrift:"I64,5" frugal:"5,default,i64" json:"I64"`
	Binary    []byte            `thrift:"Binary,6" frugal:"6,default,binary" json:"Binary"`
	Map       map[string]string `thrift:"Map,7" frugal:"7,default,map<string:string>" json:"Map"`
	Set       []string          `thrift:"Set,8" frugal:"8,default,set<string>" json:"Set"`
	List      []string          `thrift:"List,9" frugal:"9,default,list<string>" json:"List"`
	ErrorCode ErrorCode         `thrift:"ErrorCode,10" frugal:"10,default,ErrorCode" json:"ErrorCode"`
	Info      *Info             `thrift:"Info,11" frugal:"11,default,Info" json:"Info"`
}

func NewEchoRequest() *EchoRequest {
	return &EchoRequest{}
}

func (p *EchoRequest) InitDefault() {
}

func (p *EchoRequest) GetMsg() (v string) {
	return p.Msg
}

func (p *EchoRequest) GetI8() (v int8) {
	return p.I8
}

func (p *EchoRequest) GetI16() (v int16) {
	return p.I16
}

func (p *EchoRequest) GetI32() (v int32) {
	return p.I32
}

func (p *EchoRequest) GetI64() (v int64) {
	return p.I64
}

func (p *EchoRequest) GetBinary() (v []byte) {
	return p.Binary
}

func (p *EchoRequest) GetMap() (v map[string]string) {
	return p.Map
}

func (p *EchoRequest) GetSet() (v []string) {
	return p.Set
}

func (p *EchoRequest) GetList() (v []string) {
	return p.List
}

func (p *EchoRequest) GetErrorCode() (v ErrorCode) {
	return p.ErrorCode
}

var EchoRequest_Info_DEFAULT *Info

func (p *EchoRequest) GetInfo() (v *Info) {
	if !p.IsSetInfo() {
		return EchoRequest_Info_DEFAULT
	}
	return p.Info
}
func (p *EchoRequest) SetMsg(val string) {
	p.Msg = val
}
func (p *EchoRequest) SetI8(val int8) {
	p.I8 = val
}
func (p *EchoRequest) SetI16(val int16) {
	p.I16 = val
}
func (p *EchoRequest) SetI32(val int32) {
	p.I32 = val
}
func (p *EchoRequest) SetI64(val int64) {
	p.I64 = val
}
func (p *EchoRequest) SetBinary(val []byte) {
	p.Binary = val
}
func (p *EchoRequest) SetMap(val map[string]string) {
	p.Map = val
}
func (p *EchoRequest) SetSet(val []string) {
	p.Set = val
}
func (p *EchoRequest) SetList(val []string) {
	p.List = val
}
func (p *EchoRequest) SetErrorCode(val ErrorCode) {
	p.ErrorCode = val
}
func (p *EchoRequest) SetInfo(val *Info) {
	p.Info = val
}

func (p *EchoRequest) IsSetInfo() bool {
	return p.Info != nil
}

func (p *EchoRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoRequest(%+v)", *p)
}

var fieldIDToName_EchoRequest = map[int16]string{
	1:  "Msg",
	2:  "I8",
	3:  "I16",
	4:  "I32",
	5:  "I64",
	6:  "Binary",
	7:  "Map",
	8:  "Set",
	9:  "List",
	10: "ErrorCode",
	11: "Info",
}

type EchoResponse struct {
	Msg       string            `thrift:"Msg,1" frugal:"1,default,string" json:"Msg"`
	I8        int8              `thrift:"I8,2" frugal:"2,default,i8" json:"I8"`
	I16       int16             `thrift:"I16,3" frugal:"3,default,i16" json:"I16"`
	I32       int32             `thrift:"I32,4" frugal:"4,default,i32" json:"I32"`
	I64       int64             `thrift:"I64,5" frugal:"5,default,i64" json:"I64"`
	Binary    []byte            `thrift:"Binary,6" frugal:"6,default,binary" json:"Binary"`
	Map       map[string]string `thrift:"Map,7" frugal:"7,default,map<string:string>" json:"Map"`
	Set       []string          `thrift:"Set,8" frugal:"8,default,set<string>" json:"Set"`
	List      []string          `thrift:"List,9" frugal:"9,default,list<string>" json:"List"`
	ErrorCode ErrorCode         `thrift:"ErrorCode,10" frugal:"10,default,ErrorCode" json:"ErrorCode"`
	Info      *Info             `thrift:"Info,11" frugal:"11,default,Info" json:"Info"`
}

func NewEchoResponse() *EchoResponse {
	return &EchoResponse{}
}

func (p *EchoResponse) InitDefault() {
}

func (p *EchoResponse) GetMsg() (v string) {
	return p.Msg
}

func (p *EchoResponse) GetI8() (v int8) {
	return p.I8
}

func (p *EchoResponse) GetI16() (v int16) {
	return p.I16
}

func (p *EchoResponse) GetI32() (v int32) {
	return p.I32
}

func (p *EchoResponse) GetI64() (v int64) {
	return p.I64
}

func (p *EchoResponse) GetBinary() (v []byte) {
	return p.Binary
}

func (p *EchoResponse) GetMap() (v map[string]string) {
	return p.Map
}

func (p *EchoResponse) GetSet() (v []string) {
	return p.Set
}

func (p *EchoResponse) GetList() (v []string) {
	return p.List
}

func (p *EchoResponse) GetErrorCode() (v ErrorCode) {
	return p.ErrorCode
}

var EchoResponse_Info_DEFAULT *Info

func (p *EchoResponse) GetInfo() (v *Info) {
	if !p.IsSetInfo() {
		return EchoResponse_Info_DEFAULT
	}
	return p.Info
}
func (p *EchoResponse) SetMsg(val string) {
	p.Msg = val
}
func (p *EchoResponse) SetI8(val int8) {
	p.I8 = val
}
func (p *EchoResponse) SetI16(val int16) {
	p.I16 = val
}
func (p *EchoResponse) SetI32(val int32) {
	p.I32 = val
}
func (p *EchoResponse) SetI64(val int64) {
	p.I64 = val
}
func (p *EchoResponse) SetBinary(val []byte) {
	p.Binary = val
}
func (p *EchoResponse) SetMap(val map[string]string) {
	p.Map = val
}
func (p *EchoResponse) SetSet(val []string) {
	p.Set = val
}
func (p *EchoResponse) SetList(val []string) {
	p.List = val
}
func (p *EchoResponse) SetErrorCode(val ErrorCode) {
	p.ErrorCode = val
}
func (p *EchoResponse) SetInfo(val *Info) {
	p.Info = val
}

func (p *EchoResponse) IsSetInfo() bool {
	return p.Info != nil
}

func (p *EchoResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoResponse(%+v)", *p)
}

var fieldIDToName_EchoResponse = map[int16]string{
	1:  "Msg",
	2:  "I8",
	3:  "I16",
	4:  "I32",
	5:  "I64",
	6:  "Binary",
	7:  "Map",
	8:  "Set",
	9:  "List",
	10: "ErrorCode",
	11: "Info",
}

type EchoService interface {
	Echo(ctx context.Context, request *EchoRequest) (r *EchoResponse, err error)

	EchoOneway(ctx context.Context, request *EchoRequest) (err error)
}

type EchoServiceEchoArgs struct {
	Request *EchoRequest `thrift:"request,1" frugal:"1,default,EchoRequest" json:"request"`
}

func NewEchoServiceEchoArgs() *EchoServiceEchoArgs {
	return &EchoServiceEchoArgs{}
}

func (p *EchoServiceEchoArgs) InitDefault() {
}

var EchoServiceEchoArgs_Request_DEFAULT *EchoRequest

func (p *EchoServiceEchoArgs) GetRequest() (v *EchoRequest) {
	if !p.IsSetRequest() {
		return EchoServiceEchoArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *EchoServiceEchoArgs) SetRequest(val *EchoRequest) {
	p.Request = val
}

func (p *EchoServiceEchoArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *EchoServiceEchoArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoServiceEchoArgs(%+v)", *p)
}

var fieldIDToName_EchoServiceEchoArgs = map[int16]string{
	1: "request",
}

type EchoServiceEchoResult struct {
	Success *EchoResponse `thrift:"success,0,optional" frugal:"0,optional,EchoResponse" json:"success,omitempty"`
}

func NewEchoServiceEchoResult() *EchoServiceEchoResult {
	return &EchoServiceEchoResult{}
}

func (p *EchoServiceEchoResult) InitDefault() {
}

var EchoServiceEchoResult_Success_DEFAULT *EchoResponse

func (p *EchoServiceEchoResult) GetSuccess() (v *EchoResponse) {
	if !p.IsSetSuccess() {
		return EchoServiceEchoResult_Success_DEFAULT
	}
	return p.Success
}
func (p *EchoServiceEchoResult) SetSuccess(x interface{}) {
	p.Success = x.(*EchoResponse)
}

func (p *EchoServiceEchoResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *EchoServiceEchoResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoServiceEchoResult(%+v)", *p)
}

var fieldIDToName_EchoServiceEchoResult = map[int16]string{
	0: "success",
}

type EchoServiceEchoOnewayArgs struct {
	Request *EchoRequest `thrift:"request,1" frugal:"1,default,EchoRequest" json:"request"`
}

func NewEchoServiceEchoOnewayArgs() *EchoServiceEchoOnewayArgs {
	return &EchoServiceEchoOnewayArgs{}
}

func (p *EchoServiceEchoOnewayArgs) InitDefault() {
}

var EchoServiceEchoOnewayArgs_Request_DEFAULT *EchoRequest

func (p *EchoServiceEchoOnewayArgs) GetRequest() (v *EchoRequest) {
	if !p.IsSetRequest() {
		return EchoServiceEchoOnewayArgs_Request_DEFAULT
	}
	return p.Request
}
func (p *EchoServiceEchoOnewayArgs) SetRequest(val *EchoRequest) {
	p.Request = val
}

func (p *EchoServiceEchoOnewayArgs) IsSetRequest() bool {
	return p.Request != nil
}

func (p *EchoServiceEchoOnewayArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("EchoServiceEchoOnewayArgs(%+v)", *p)
}

var fieldIDToName_EchoServiceEchoOnewayArgs = map[int16]string{
	1: "request",
}

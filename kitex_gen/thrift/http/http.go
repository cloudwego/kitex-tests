// Code generated by thriftgo (0.2.9). DO NOT EDIT.

package http

import (
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
	"strings"
)

type ReqItem struct {
	Id   *int64  `thrift:"id,1,optional" frugal:"1,optional,i64" json:"MyID"`
	Text *string `thrift:"text,2,optional" frugal:"2,optional,string" json:"text,omitempty"`
}

func NewReqItem() *ReqItem {
	return &ReqItem{}
}

func (p *ReqItem) InitDefault() {
	*p = ReqItem{}
}

var ReqItem_Id_DEFAULT int64

func (p *ReqItem) GetId() (v int64) {
	if !p.IsSetId() {
		return ReqItem_Id_DEFAULT
	}
	return *p.Id
}

var ReqItem_Text_DEFAULT string

func (p *ReqItem) GetText() (v string) {
	if !p.IsSetText() {
		return ReqItem_Text_DEFAULT
	}
	return *p.Text
}
func (p *ReqItem) SetId(val *int64) {
	p.Id = val
}
func (p *ReqItem) SetText(val *string) {
	p.Text = val
}

var fieldIDToName_ReqItem = map[int16]string{
	1: "id",
	2: "text",
}

func (p *ReqItem) IsSetId() bool {
	return p.Id != nil
}

func (p *ReqItem) IsSetText() bool {
	return p.Text != nil
}

func (p *ReqItem) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ReqItem[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *ReqItem) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Id = &v
	}
	return nil
}

func (p *ReqItem) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Text = &v
	}
	return nil
}

func (p *ReqItem) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("ReqItem"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *ReqItem) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetId() {
		if err = oprot.WriteFieldBegin("id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Id); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *ReqItem) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetText() {
		if err = oprot.WriteFieldBegin("text", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Text); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *ReqItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ReqItem(%+v)", *p)
}

func (p *ReqItem) DeepEqual(ano *ReqItem) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Id) {
		return false
	}
	if !p.Field2DeepEqual(ano.Text) {
		return false
	}
	return true
}

func (p *ReqItem) Field1DeepEqual(src *int64) bool {

	if p.Id == src {
		return true
	} else if p.Id == nil || src == nil {
		return false
	}
	if *p.Id != *src {
		return false
	}
	return true
}
func (p *ReqItem) Field2DeepEqual(src *string) bool {

	if p.Text == src {
		return true
	} else if p.Text == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Text, *src) != 0 {
		return false
	}
	return true
}

type BizCommonParam struct {
	ApiVersion *int64 `thrift:"api_version,1,optional" frugal:"1,optional,i64" json:"api_version,omitempty"`
	Token      *int32 `thrift:"token,2,optional" frugal:"2,optional,i32" json:"token,omitempty"`
}

func NewBizCommonParam() *BizCommonParam {
	return &BizCommonParam{}
}

func (p *BizCommonParam) InitDefault() {
	*p = BizCommonParam{}
}

var BizCommonParam_ApiVersion_DEFAULT int64

func (p *BizCommonParam) GetApiVersion() (v int64) {
	if !p.IsSetApiVersion() {
		return BizCommonParam_ApiVersion_DEFAULT
	}
	return *p.ApiVersion
}

var BizCommonParam_Token_DEFAULT int32

func (p *BizCommonParam) GetToken() (v int32) {
	if !p.IsSetToken() {
		return BizCommonParam_Token_DEFAULT
	}
	return *p.Token
}
func (p *BizCommonParam) SetApiVersion(val *int64) {
	p.ApiVersion = val
}
func (p *BizCommonParam) SetToken(val *int32) {
	p.Token = val
}

var fieldIDToName_BizCommonParam = map[int16]string{
	1: "api_version",
	2: "token",
}

func (p *BizCommonParam) IsSetApiVersion() bool {
	return p.ApiVersion != nil
}

func (p *BizCommonParam) IsSetToken() bool {
	return p.Token != nil
}

func (p *BizCommonParam) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BizCommonParam[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BizCommonParam) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ApiVersion = &v
	}
	return nil
}

func (p *BizCommonParam) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Token = &v
	}
	return nil
}

func (p *BizCommonParam) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BizCommonParam"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BizCommonParam) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetApiVersion() {
		if err = oprot.WriteFieldBegin("api_version", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ApiVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BizCommonParam) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetToken() {
		if err = oprot.WriteFieldBegin("token", thrift.I32, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Token); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BizCommonParam) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BizCommonParam(%+v)", *p)
}

func (p *BizCommonParam) DeepEqual(ano *BizCommonParam) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ApiVersion) {
		return false
	}
	if !p.Field2DeepEqual(ano.Token) {
		return false
	}
	return true
}

func (p *BizCommonParam) Field1DeepEqual(src *int64) bool {

	if p.ApiVersion == src {
		return true
	} else if p.ApiVersion == nil || src == nil {
		return false
	}
	if *p.ApiVersion != *src {
		return false
	}
	return true
}
func (p *BizCommonParam) Field2DeepEqual(src *int32) bool {

	if p.Token == src {
		return true
	} else if p.Token == nil || src == nil {
		return false
	}
	if *p.Token != *src {
		return false
	}
	return true
}

type BizRequest struct {
	VInt64      *int64             `thrift:"v_int64,1,optional" frugal:"1,optional,i64" json:"v_int64,omitempty"`
	Text        *string            `thrift:"text,2,optional" frugal:"2,optional,string" json:"text,omitempty"`
	Token       *int32             `thrift:"token,3,optional" frugal:"3,optional,i32" json:"token,omitempty"`
	ReqItemsMap map[int64]*ReqItem `thrift:"req_items_map,4,optional" frugal:"4,optional,map<i64:ReqItem>" json:"req_items_map,omitempty"`
	Some        *ReqItem           `thrift:"some,5,optional" frugal:"5,optional,ReqItem" json:"some,omitempty"`
	ReqItems    []string           `thrift:"req_items,6,optional" frugal:"6,optional,list<string>" json:"req_items,omitempty"`
	ApiVersion  *int32             `thrift:"api_version,7,optional" frugal:"7,optional,i32" json:"api_version,omitempty"`
	Uid         *int64             `thrift:"uid,8,optional" frugal:"8,optional,i64" json:"uid,omitempty"`
	Cids        []int64            `thrift:"cids,9,optional" frugal:"9,optional,list<i64>" json:"cids,omitempty"`
	Vids        []string           `thrift:"vids,10,optional" frugal:"10,optional,list<string>" json:"vids,omitempty"`
}

func NewBizRequest() *BizRequest {
	return &BizRequest{}
}

func (p *BizRequest) InitDefault() {
	*p = BizRequest{}
}

var BizRequest_VInt64_DEFAULT int64

func (p *BizRequest) GetVInt64() (v int64) {
	if !p.IsSetVInt64() {
		return BizRequest_VInt64_DEFAULT
	}
	return *p.VInt64
}

var BizRequest_Text_DEFAULT string

func (p *BizRequest) GetText() (v string) {
	if !p.IsSetText() {
		return BizRequest_Text_DEFAULT
	}
	return *p.Text
}

var BizRequest_Token_DEFAULT int32

func (p *BizRequest) GetToken() (v int32) {
	if !p.IsSetToken() {
		return BizRequest_Token_DEFAULT
	}
	return *p.Token
}

var BizRequest_ReqItemsMap_DEFAULT map[int64]*ReqItem

func (p *BizRequest) GetReqItemsMap() (v map[int64]*ReqItem) {
	if !p.IsSetReqItemsMap() {
		return BizRequest_ReqItemsMap_DEFAULT
	}
	return p.ReqItemsMap
}

var BizRequest_Some_DEFAULT *ReqItem

func (p *BizRequest) GetSome() (v *ReqItem) {
	if !p.IsSetSome() {
		return BizRequest_Some_DEFAULT
	}
	return p.Some
}

var BizRequest_ReqItems_DEFAULT []string

func (p *BizRequest) GetReqItems() (v []string) {
	if !p.IsSetReqItems() {
		return BizRequest_ReqItems_DEFAULT
	}
	return p.ReqItems
}

var BizRequest_ApiVersion_DEFAULT int32

func (p *BizRequest) GetApiVersion() (v int32) {
	if !p.IsSetApiVersion() {
		return BizRequest_ApiVersion_DEFAULT
	}
	return *p.ApiVersion
}

var BizRequest_Uid_DEFAULT int64

func (p *BizRequest) GetUid() (v int64) {
	if !p.IsSetUid() {
		return BizRequest_Uid_DEFAULT
	}
	return *p.Uid
}

var BizRequest_Cids_DEFAULT []int64

func (p *BizRequest) GetCids() (v []int64) {
	if !p.IsSetCids() {
		return BizRequest_Cids_DEFAULT
	}
	return p.Cids
}

var BizRequest_Vids_DEFAULT []string

func (p *BizRequest) GetVids() (v []string) {
	if !p.IsSetVids() {
		return BizRequest_Vids_DEFAULT
	}
	return p.Vids
}
func (p *BizRequest) SetVInt64(val *int64) {
	p.VInt64 = val
}
func (p *BizRequest) SetText(val *string) {
	p.Text = val
}
func (p *BizRequest) SetToken(val *int32) {
	p.Token = val
}
func (p *BizRequest) SetReqItemsMap(val map[int64]*ReqItem) {
	p.ReqItemsMap = val
}
func (p *BizRequest) SetSome(val *ReqItem) {
	p.Some = val
}
func (p *BizRequest) SetReqItems(val []string) {
	p.ReqItems = val
}
func (p *BizRequest) SetApiVersion(val *int32) {
	p.ApiVersion = val
}
func (p *BizRequest) SetUid(val *int64) {
	p.Uid = val
}
func (p *BizRequest) SetCids(val []int64) {
	p.Cids = val
}
func (p *BizRequest) SetVids(val []string) {
	p.Vids = val
}

var fieldIDToName_BizRequest = map[int16]string{
	1:  "v_int64",
	2:  "text",
	3:  "token",
	4:  "req_items_map",
	5:  "some",
	6:  "req_items",
	7:  "api_version",
	8:  "uid",
	9:  "cids",
	10: "vids",
}

func (p *BizRequest) IsSetVInt64() bool {
	return p.VInt64 != nil
}

func (p *BizRequest) IsSetText() bool {
	return p.Text != nil
}

func (p *BizRequest) IsSetToken() bool {
	return p.Token != nil
}

func (p *BizRequest) IsSetReqItemsMap() bool {
	return p.ReqItemsMap != nil
}

func (p *BizRequest) IsSetSome() bool {
	return p.Some != nil
}

func (p *BizRequest) IsSetReqItems() bool {
	return p.ReqItems != nil
}

func (p *BizRequest) IsSetApiVersion() bool {
	return p.ApiVersion != nil
}

func (p *BizRequest) IsSetUid() bool {
	return p.Uid != nil
}

func (p *BizRequest) IsSetCids() bool {
	return p.Cids != nil
}

func (p *BizRequest) IsSetVids() bool {
	return p.Vids != nil
}

func (p *BizRequest) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 7:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField7(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 8:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField8(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 9:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField9(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 10:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField10(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BizRequest[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BizRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.VInt64 = &v
	}
	return nil
}

func (p *BizRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Text = &v
	}
	return nil
}

func (p *BizRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.Token = &v
	}
	return nil
}

func (p *BizRequest) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.ReqItemsMap = make(map[int64]*ReqItem, size)
	for i := 0; i < size; i++ {
		var _key int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_key = v
		}
		_val := NewReqItem()
		if err := _val.Read(iprot); err != nil {
			return err
		}

		p.ReqItemsMap[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *BizRequest) ReadField5(iprot thrift.TProtocol) error {
	p.Some = NewReqItem()
	if err := p.Some.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BizRequest) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.ReqItems = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.ReqItems = append(p.ReqItems, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *BizRequest) ReadField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.ApiVersion = &v
	}
	return nil
}

func (p *BizRequest) ReadField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.Uid = &v
	}
	return nil
}

func (p *BizRequest) ReadField9(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Cids = make([]int64, 0, size)
	for i := 0; i < size; i++ {
		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Cids = append(p.Cids, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *BizRequest) ReadField10(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.Vids = make([]string, 0, size)
	for i := 0; i < size; i++ {
		var _elem string
		if v, err := iprot.ReadString(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.Vids = append(p.Vids, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *BizRequest) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BizRequest"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}
		if err = p.writeField7(oprot); err != nil {
			fieldId = 7
			goto WriteFieldError
		}
		if err = p.writeField8(oprot); err != nil {
			fieldId = 8
			goto WriteFieldError
		}
		if err = p.writeField9(oprot); err != nil {
			fieldId = 9
			goto WriteFieldError
		}
		if err = p.writeField10(oprot); err != nil {
			fieldId = 10
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BizRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetVInt64() {
		if err = oprot.WriteFieldBegin("v_int64", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.VInt64); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BizRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetText() {
		if err = oprot.WriteFieldBegin("text", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Text); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BizRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetToken() {
		if err = oprot.WriteFieldBegin("token", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.Token); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *BizRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetReqItemsMap() {
		if err = oprot.WriteFieldBegin("req_items_map", thrift.MAP, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I64, thrift.STRUCT, len(p.ReqItemsMap)); err != nil {
			return err
		}
		for k, v := range p.ReqItemsMap {

			if err := oprot.WriteI64(k); err != nil {
				return err
			}

			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *BizRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetSome() {
		if err = oprot.WriteFieldBegin("some", thrift.STRUCT, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Some.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *BizRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetReqItems() {
		if err = oprot.WriteFieldBegin("req_items", thrift.LIST, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.ReqItems)); err != nil {
			return err
		}
		for _, v := range p.ReqItems {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *BizRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetApiVersion() {
		if err = oprot.WriteFieldBegin("api_version", thrift.I32, 7); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.ApiVersion); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 7 end error: ", p), err)
}

func (p *BizRequest) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetUid() {
		if err = oprot.WriteFieldBegin("uid", thrift.I64, 8); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.Uid); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 8 end error: ", p), err)
}

func (p *BizRequest) writeField9(oprot thrift.TProtocol) (err error) {
	if p.IsSetCids() {
		if err = oprot.WriteFieldBegin("cids", thrift.LIST, 9); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.Cids)); err != nil {
			return err
		}
		for _, v := range p.Cids {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 9 end error: ", p), err)
}

func (p *BizRequest) writeField10(oprot thrift.TProtocol) (err error) {
	if p.IsSetVids() {
		if err = oprot.WriteFieldBegin("vids", thrift.LIST, 10); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRING, len(p.Vids)); err != nil {
			return err
		}
		for _, v := range p.Vids {
			if err := oprot.WriteString(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 10 end error: ", p), err)
}

func (p *BizRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BizRequest(%+v)", *p)
}

func (p *BizRequest) DeepEqual(ano *BizRequest) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.VInt64) {
		return false
	}
	if !p.Field2DeepEqual(ano.Text) {
		return false
	}
	if !p.Field3DeepEqual(ano.Token) {
		return false
	}
	if !p.Field4DeepEqual(ano.ReqItemsMap) {
		return false
	}
	if !p.Field5DeepEqual(ano.Some) {
		return false
	}
	if !p.Field6DeepEqual(ano.ReqItems) {
		return false
	}
	if !p.Field7DeepEqual(ano.ApiVersion) {
		return false
	}
	if !p.Field8DeepEqual(ano.Uid) {
		return false
	}
	if !p.Field9DeepEqual(ano.Cids) {
		return false
	}
	if !p.Field10DeepEqual(ano.Vids) {
		return false
	}
	return true
}

func (p *BizRequest) Field1DeepEqual(src *int64) bool {

	if p.VInt64 == src {
		return true
	} else if p.VInt64 == nil || src == nil {
		return false
	}
	if *p.VInt64 != *src {
		return false
	}
	return true
}
func (p *BizRequest) Field2DeepEqual(src *string) bool {

	if p.Text == src {
		return true
	} else if p.Text == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Text, *src) != 0 {
		return false
	}
	return true
}
func (p *BizRequest) Field3DeepEqual(src *int32) bool {

	if p.Token == src {
		return true
	} else if p.Token == nil || src == nil {
		return false
	}
	if *p.Token != *src {
		return false
	}
	return true
}
func (p *BizRequest) Field4DeepEqual(src map[int64]*ReqItem) bool {

	if len(p.ReqItemsMap) != len(src) {
		return false
	}
	for k, v := range p.ReqItemsMap {
		_src := src[k]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *BizRequest) Field5DeepEqual(src *ReqItem) bool {

	if !p.Some.DeepEqual(src) {
		return false
	}
	return true
}
func (p *BizRequest) Field6DeepEqual(src []string) bool {

	if len(p.ReqItems) != len(src) {
		return false
	}
	for i, v := range p.ReqItems {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}
func (p *BizRequest) Field7DeepEqual(src *int32) bool {

	if p.ApiVersion == src {
		return true
	} else if p.ApiVersion == nil || src == nil {
		return false
	}
	if *p.ApiVersion != *src {
		return false
	}
	return true
}
func (p *BizRequest) Field8DeepEqual(src *int64) bool {

	if p.Uid == src {
		return true
	} else if p.Uid == nil || src == nil {
		return false
	}
	if *p.Uid != *src {
		return false
	}
	return true
}
func (p *BizRequest) Field9DeepEqual(src []int64) bool {

	if len(p.Cids) != len(src) {
		return false
	}
	for i, v := range p.Cids {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}
func (p *BizRequest) Field10DeepEqual(src []string) bool {

	if len(p.Vids) != len(src) {
		return false
	}
	for i, v := range p.Vids {
		_src := src[i]
		if strings.Compare(v, _src) != 0 {
			return false
		}
	}
	return true
}

type RspItem struct {
	ItemId *int64  `thrift:"item_id,1,optional" frugal:"1,optional,i64" json:"item_id,omitempty"`
	Text   *string `thrift:"text,2,optional" frugal:"2,optional,string" json:"text,omitempty"`
}

func NewRspItem() *RspItem {
	return &RspItem{}
}

func (p *RspItem) InitDefault() {
	*p = RspItem{}
}

var RspItem_ItemId_DEFAULT int64

func (p *RspItem) GetItemId() (v int64) {
	if !p.IsSetItemId() {
		return RspItem_ItemId_DEFAULT
	}
	return *p.ItemId
}

var RspItem_Text_DEFAULT string

func (p *RspItem) GetText() (v string) {
	if !p.IsSetText() {
		return RspItem_Text_DEFAULT
	}
	return *p.Text
}
func (p *RspItem) SetItemId(val *int64) {
	p.ItemId = val
}
func (p *RspItem) SetText(val *string) {
	p.Text = val
}

var fieldIDToName_RspItem = map[int16]string{
	1: "item_id",
	2: "text",
}

func (p *RspItem) IsSetItemId() bool {
	return p.ItemId != nil
}

func (p *RspItem) IsSetText() bool {
	return p.Text != nil
}

func (p *RspItem) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_RspItem[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *RspItem) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return err
	} else {
		p.ItemId = &v
	}
	return nil
}

func (p *RspItem) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.Text = &v
	}
	return nil
}

func (p *RspItem) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("RspItem"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *RspItem) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetItemId() {
		if err = oprot.WriteFieldBegin("item_id", thrift.I64, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI64(*p.ItemId); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *RspItem) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetText() {
		if err = oprot.WriteFieldBegin("text", thrift.STRING, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.Text); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *RspItem) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("RspItem(%+v)", *p)
}

func (p *RspItem) DeepEqual(ano *RspItem) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.ItemId) {
		return false
	}
	if !p.Field2DeepEqual(ano.Text) {
		return false
	}
	return true
}

func (p *RspItem) Field1DeepEqual(src *int64) bool {

	if p.ItemId == src {
		return true
	} else if p.ItemId == nil || src == nil {
		return false
	}
	if *p.ItemId != *src {
		return false
	}
	return true
}
func (p *RspItem) Field2DeepEqual(src *string) bool {

	if p.Text == src {
		return true
	} else if p.Text == nil || src == nil {
		return false
	}
	if strings.Compare(*p.Text, *src) != 0 {
		return false
	}
	return true
}

type BizResponse struct {
	T           *string            `thrift:"T,1,optional" frugal:"1,optional,string" json:"T,omitempty"`
	RspItems    map[int64]*RspItem `thrift:"rsp_items,2,optional" frugal:"2,optional,map<i64:RspItem>" json:"rsp_items,omitempty"`
	VEnum       *int32             `thrift:"v_enum,3,optional" frugal:"3,optional,i32" json:"v_enum,omitempty"`
	RspItemList []*RspItem         `thrift:"rsp_item_list,4,optional" frugal:"4,optional,list<RspItem>" json:"rsp_item_list,omitempty"`
	HttpCode    *int32             `thrift:"http_code,5,optional" frugal:"5,optional,i32" json:"http_code,omitempty"`
	ItemCount   []int64            `thrift:"item_count,6,optional" frugal:"6,optional,list<i64>" json:"item_count,omitempty"`
}

func NewBizResponse() *BizResponse {
	return &BizResponse{}
}

func (p *BizResponse) InitDefault() {
	*p = BizResponse{}
}

var BizResponse_T_DEFAULT string

func (p *BizResponse) GetT() (v string) {
	if !p.IsSetT() {
		return BizResponse_T_DEFAULT
	}
	return *p.T
}

var BizResponse_RspItems_DEFAULT map[int64]*RspItem

func (p *BizResponse) GetRspItems() (v map[int64]*RspItem) {
	if !p.IsSetRspItems() {
		return BizResponse_RspItems_DEFAULT
	}
	return p.RspItems
}

var BizResponse_VEnum_DEFAULT int32

func (p *BizResponse) GetVEnum() (v int32) {
	if !p.IsSetVEnum() {
		return BizResponse_VEnum_DEFAULT
	}
	return *p.VEnum
}

var BizResponse_RspItemList_DEFAULT []*RspItem

func (p *BizResponse) GetRspItemList() (v []*RspItem) {
	if !p.IsSetRspItemList() {
		return BizResponse_RspItemList_DEFAULT
	}
	return p.RspItemList
}

var BizResponse_HttpCode_DEFAULT int32

func (p *BizResponse) GetHttpCode() (v int32) {
	if !p.IsSetHttpCode() {
		return BizResponse_HttpCode_DEFAULT
	}
	return *p.HttpCode
}

var BizResponse_ItemCount_DEFAULT []int64

func (p *BizResponse) GetItemCount() (v []int64) {
	if !p.IsSetItemCount() {
		return BizResponse_ItemCount_DEFAULT
	}
	return p.ItemCount
}
func (p *BizResponse) SetT(val *string) {
	p.T = val
}
func (p *BizResponse) SetRspItems(val map[int64]*RspItem) {
	p.RspItems = val
}
func (p *BizResponse) SetVEnum(val *int32) {
	p.VEnum = val
}
func (p *BizResponse) SetRspItemList(val []*RspItem) {
	p.RspItemList = val
}
func (p *BizResponse) SetHttpCode(val *int32) {
	p.HttpCode = val
}
func (p *BizResponse) SetItemCount(val []int64) {
	p.ItemCount = val
}

var fieldIDToName_BizResponse = map[int16]string{
	1: "T",
	2: "rsp_items",
	3: "v_enum",
	4: "rsp_item_list",
	5: "http_code",
	6: "item_count",
}

func (p *BizResponse) IsSetT() bool {
	return p.T != nil
}

func (p *BizResponse) IsSetRspItems() bool {
	return p.RspItems != nil
}

func (p *BizResponse) IsSetVEnum() bool {
	return p.VEnum != nil
}

func (p *BizResponse) IsSetRspItemList() bool {
	return p.RspItemList != nil
}

func (p *BizResponse) IsSetHttpCode() bool {
	return p.HttpCode != nil
}

func (p *BizResponse) IsSetItemCount() bool {
	return p.ItemCount != nil
}

func (p *BizResponse) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRING {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				if err = p.ReadField2(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField3(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField4(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.I32 {
				if err = p.ReadField5(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.LIST {
				if err = p.ReadField6(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BizResponse[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BizResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return err
	} else {
		p.T = &v
	}
	return nil
}

func (p *BizResponse) ReadField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return err
	}
	p.RspItems = make(map[int64]*RspItem, size)
	for i := 0; i < size; i++ {
		var _key int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_key = v
		}
		_val := NewRspItem()
		if err := _val.Read(iprot); err != nil {
			return err
		}

		p.RspItems[_key] = _val
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return err
	}
	return nil
}

func (p *BizResponse) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.VEnum = &v
	}
	return nil
}

func (p *BizResponse) ReadField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.RspItemList = make([]*RspItem, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewRspItem()
		if err := _elem.Read(iprot); err != nil {
			return err
		}

		p.RspItemList = append(p.RspItemList, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *BizResponse) ReadField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return err
	} else {
		p.HttpCode = &v
	}
	return nil
}

func (p *BizResponse) ReadField6(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return err
	}
	p.ItemCount = make([]int64, 0, size)
	for i := 0; i < size; i++ {
		var _elem int64
		if v, err := iprot.ReadI64(); err != nil {
			return err
		} else {
			_elem = v
		}

		p.ItemCount = append(p.ItemCount, _elem)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return err
	}
	return nil
}

func (p *BizResponse) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BizResponse"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}
		if err = p.writeField2(oprot); err != nil {
			fieldId = 2
			goto WriteFieldError
		}
		if err = p.writeField3(oprot); err != nil {
			fieldId = 3
			goto WriteFieldError
		}
		if err = p.writeField4(oprot); err != nil {
			fieldId = 4
			goto WriteFieldError
		}
		if err = p.writeField5(oprot); err != nil {
			fieldId = 5
			goto WriteFieldError
		}
		if err = p.writeField6(oprot); err != nil {
			fieldId = 6
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BizResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetT() {
		if err = oprot.WriteFieldBegin("T", thrift.STRING, 1); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteString(*p.T); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BizResponse) writeField2(oprot thrift.TProtocol) (err error) {
	if p.IsSetRspItems() {
		if err = oprot.WriteFieldBegin("rsp_items", thrift.MAP, 2); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteMapBegin(thrift.I64, thrift.STRUCT, len(p.RspItems)); err != nil {
			return err
		}
		for k, v := range p.RspItems {

			if err := oprot.WriteI64(k); err != nil {
				return err
			}

			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 2 end error: ", p), err)
}

func (p *BizResponse) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetVEnum() {
		if err = oprot.WriteFieldBegin("v_enum", thrift.I32, 3); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.VEnum); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 3 end error: ", p), err)
}

func (p *BizResponse) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetRspItemList() {
		if err = oprot.WriteFieldBegin("rsp_item_list", thrift.LIST, 4); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.RspItemList)); err != nil {
			return err
		}
		for _, v := range p.RspItemList {
			if err := v.Write(oprot); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 4 end error: ", p), err)
}

func (p *BizResponse) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetHttpCode() {
		if err = oprot.WriteFieldBegin("http_code", thrift.I32, 5); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteI32(*p.HttpCode); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 5 end error: ", p), err)
}

func (p *BizResponse) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetItemCount() {
		if err = oprot.WriteFieldBegin("item_count", thrift.LIST, 6); err != nil {
			goto WriteFieldBeginError
		}
		if err := oprot.WriteListBegin(thrift.I64, len(p.ItemCount)); err != nil {
			return err
		}
		for _, v := range p.ItemCount {
			if err := oprot.WriteI64(v); err != nil {
				return err
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 6 end error: ", p), err)
}

func (p *BizResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BizResponse(%+v)", *p)
}

func (p *BizResponse) DeepEqual(ano *BizResponse) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.T) {
		return false
	}
	if !p.Field2DeepEqual(ano.RspItems) {
		return false
	}
	if !p.Field3DeepEqual(ano.VEnum) {
		return false
	}
	if !p.Field4DeepEqual(ano.RspItemList) {
		return false
	}
	if !p.Field5DeepEqual(ano.HttpCode) {
		return false
	}
	if !p.Field6DeepEqual(ano.ItemCount) {
		return false
	}
	return true
}

func (p *BizResponse) Field1DeepEqual(src *string) bool {

	if p.T == src {
		return true
	} else if p.T == nil || src == nil {
		return false
	}
	if strings.Compare(*p.T, *src) != 0 {
		return false
	}
	return true
}
func (p *BizResponse) Field2DeepEqual(src map[int64]*RspItem) bool {

	if len(p.RspItems) != len(src) {
		return false
	}
	for k, v := range p.RspItems {
		_src := src[k]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *BizResponse) Field3DeepEqual(src *int32) bool {

	if p.VEnum == src {
		return true
	} else if p.VEnum == nil || src == nil {
		return false
	}
	if *p.VEnum != *src {
		return false
	}
	return true
}
func (p *BizResponse) Field4DeepEqual(src []*RspItem) bool {

	if len(p.RspItemList) != len(src) {
		return false
	}
	for i, v := range p.RspItemList {
		_src := src[i]
		if !v.DeepEqual(_src) {
			return false
		}
	}
	return true
}
func (p *BizResponse) Field5DeepEqual(src *int32) bool {

	if p.HttpCode == src {
		return true
	} else if p.HttpCode == nil || src == nil {
		return false
	}
	if *p.HttpCode != *src {
		return false
	}
	return true
}
func (p *BizResponse) Field6DeepEqual(src []int64) bool {

	if len(p.ItemCount) != len(src) {
		return false
	}
	for i, v := range p.ItemCount {
		_src := src[i]
		if v != _src {
			return false
		}
	}
	return true
}

type BizService interface {
	BizMethod1(ctx context.Context, req *BizRequest) (r *BizResponse, err error)

	BizMethod2(ctx context.Context, req *BizRequest) (r *BizResponse, err error)

	BizMethod3(ctx context.Context, req *BizRequest) (r *BizResponse, err error)
}

type BizServiceClient struct {
	c thrift.TClient
}

func NewBizServiceClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *BizServiceClient {
	return &BizServiceClient{
		c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
	}
}

func NewBizServiceClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *BizServiceClient {
	return &BizServiceClient{
		c: thrift.NewTStandardClient(iprot, oprot),
	}
}

func NewBizServiceClient(c thrift.TClient) *BizServiceClient {
	return &BizServiceClient{
		c: c,
	}
}

func (p *BizServiceClient) Client_() thrift.TClient {
	return p.c
}

func (p *BizServiceClient) BizMethod1(ctx context.Context, req *BizRequest) (r *BizResponse, err error) {
	var _args BizServiceBizMethod1Args
	_args.Req = req
	var _result BizServiceBizMethod1Result
	if err = p.Client_().Call(ctx, "BizMethod1", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BizServiceClient) BizMethod2(ctx context.Context, req *BizRequest) (r *BizResponse, err error) {
	var _args BizServiceBizMethod2Args
	_args.Req = req
	var _result BizServiceBizMethod2Result
	if err = p.Client_().Call(ctx, "BizMethod2", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
func (p *BizServiceClient) BizMethod3(ctx context.Context, req *BizRequest) (r *BizResponse, err error) {
	var _args BizServiceBizMethod3Args
	_args.Req = req
	var _result BizServiceBizMethod3Result
	if err = p.Client_().Call(ctx, "BizMethod3", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

type BizServiceProcessor struct {
	processorMap map[string]thrift.TProcessorFunction
	handler      BizService
}

func (p *BizServiceProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *BizServiceProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
	processor, ok = p.processorMap[key]
	return processor, ok
}

func (p *BizServiceProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewBizServiceProcessor(handler BizService) *BizServiceProcessor {
	self := &BizServiceProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self.AddToProcessorMap("BizMethod1", &bizServiceProcessorBizMethod1{handler: handler})
	self.AddToProcessorMap("BizMethod2", &bizServiceProcessorBizMethod2{handler: handler})
	self.AddToProcessorMap("BizMethod3", &bizServiceProcessorBizMethod3{handler: handler})
	return self
}
func (p *BizServiceProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return false, err
	}
	if processor, ok := p.GetProcessorFunction(name); ok {
		return processor.Process(ctx, seqId, iprot, oprot)
	}
	iprot.Skip(thrift.STRUCT)
	iprot.ReadMessageEnd()
	x := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
	oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
	x.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Flush(ctx)
	return false, x
}

type bizServiceProcessorBizMethod1 struct {
	handler BizService
}

func (p *bizServiceProcessorBizMethod1) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BizServiceBizMethod1Args{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BizMethod1", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BizServiceBizMethod1Result{}
	var retval *BizResponse
	if retval, err2 = p.handler.BizMethod1(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BizMethod1: "+err2.Error())
		oprot.WriteMessageBegin("BizMethod1", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BizMethod1", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bizServiceProcessorBizMethod2 struct {
	handler BizService
}

func (p *bizServiceProcessorBizMethod2) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BizServiceBizMethod2Args{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BizMethod2", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BizServiceBizMethod2Result{}
	var retval *BizResponse
	if retval, err2 = p.handler.BizMethod2(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BizMethod2: "+err2.Error())
		oprot.WriteMessageBegin("BizMethod2", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BizMethod2", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type bizServiceProcessorBizMethod3 struct {
	handler BizService
}

func (p *bizServiceProcessorBizMethod3) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := BizServiceBizMethod3Args{}
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("BizMethod3", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return false, err
	}

	iprot.ReadMessageEnd()
	var err2 error
	result := BizServiceBizMethod3Result{}
	var retval *BizResponse
	if retval, err2 = p.handler.BizMethod3(ctx, args.Req); err2 != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing BizMethod3: "+err2.Error())
		oprot.WriteMessageBegin("BizMethod3", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Flush(ctx)
		return true, err2
	} else {
		result.Success = retval
	}
	if err2 = oprot.WriteMessageBegin("BizMethod3", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 = result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 = oprot.Flush(ctx); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type BizServiceBizMethod1Args struct {
	Req *BizRequest `thrift:"req,1" frugal:"1,default,BizRequest" json:"req"`
}

func NewBizServiceBizMethod1Args() *BizServiceBizMethod1Args {
	return &BizServiceBizMethod1Args{}
}

func (p *BizServiceBizMethod1Args) InitDefault() {
	*p = BizServiceBizMethod1Args{}
}

var BizServiceBizMethod1Args_Req_DEFAULT *BizRequest

func (p *BizServiceBizMethod1Args) GetReq() (v *BizRequest) {
	if !p.IsSetReq() {
		return BizServiceBizMethod1Args_Req_DEFAULT
	}
	return p.Req
}
func (p *BizServiceBizMethod1Args) SetReq(val *BizRequest) {
	p.Req = val
}

var fieldIDToName_BizServiceBizMethod1Args = map[int16]string{
	1: "req",
}

func (p *BizServiceBizMethod1Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *BizServiceBizMethod1Args) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BizServiceBizMethod1Args[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BizServiceBizMethod1Args) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewBizRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BizServiceBizMethod1Args) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BizMethod1_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BizServiceBizMethod1Args) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BizServiceBizMethod1Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BizServiceBizMethod1Args(%+v)", *p)
}

func (p *BizServiceBizMethod1Args) DeepEqual(ano *BizServiceBizMethod1Args) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *BizServiceBizMethod1Args) Field1DeepEqual(src *BizRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type BizServiceBizMethod1Result struct {
	Success *BizResponse `thrift:"success,0,optional" frugal:"0,optional,BizResponse" json:"success,omitempty"`
}

func NewBizServiceBizMethod1Result() *BizServiceBizMethod1Result {
	return &BizServiceBizMethod1Result{}
}

func (p *BizServiceBizMethod1Result) InitDefault() {
	*p = BizServiceBizMethod1Result{}
}

var BizServiceBizMethod1Result_Success_DEFAULT *BizResponse

func (p *BizServiceBizMethod1Result) GetSuccess() (v *BizResponse) {
	if !p.IsSetSuccess() {
		return BizServiceBizMethod1Result_Success_DEFAULT
	}
	return p.Success
}
func (p *BizServiceBizMethod1Result) SetSuccess(x interface{}) {
	p.Success = x.(*BizResponse)
}

var fieldIDToName_BizServiceBizMethod1Result = map[int16]string{
	0: "success",
}

func (p *BizServiceBizMethod1Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BizServiceBizMethod1Result) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BizServiceBizMethod1Result[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BizServiceBizMethod1Result) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewBizResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BizServiceBizMethod1Result) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BizMethod1_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BizServiceBizMethod1Result) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BizServiceBizMethod1Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BizServiceBizMethod1Result(%+v)", *p)
}

func (p *BizServiceBizMethod1Result) DeepEqual(ano *BizServiceBizMethod1Result) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BizServiceBizMethod1Result) Field0DeepEqual(src *BizResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BizServiceBizMethod2Args struct {
	Req *BizRequest `thrift:"req,1" frugal:"1,default,BizRequest" json:"req"`
}

func NewBizServiceBizMethod2Args() *BizServiceBizMethod2Args {
	return &BizServiceBizMethod2Args{}
}

func (p *BizServiceBizMethod2Args) InitDefault() {
	*p = BizServiceBizMethod2Args{}
}

var BizServiceBizMethod2Args_Req_DEFAULT *BizRequest

func (p *BizServiceBizMethod2Args) GetReq() (v *BizRequest) {
	if !p.IsSetReq() {
		return BizServiceBizMethod2Args_Req_DEFAULT
	}
	return p.Req
}
func (p *BizServiceBizMethod2Args) SetReq(val *BizRequest) {
	p.Req = val
}

var fieldIDToName_BizServiceBizMethod2Args = map[int16]string{
	1: "req",
}

func (p *BizServiceBizMethod2Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *BizServiceBizMethod2Args) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BizServiceBizMethod2Args[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BizServiceBizMethod2Args) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewBizRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BizServiceBizMethod2Args) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BizMethod2_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BizServiceBizMethod2Args) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BizServiceBizMethod2Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BizServiceBizMethod2Args(%+v)", *p)
}

func (p *BizServiceBizMethod2Args) DeepEqual(ano *BizServiceBizMethod2Args) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *BizServiceBizMethod2Args) Field1DeepEqual(src *BizRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type BizServiceBizMethod2Result struct {
	Success *BizResponse `thrift:"success,0,optional" frugal:"0,optional,BizResponse" json:"success,omitempty"`
}

func NewBizServiceBizMethod2Result() *BizServiceBizMethod2Result {
	return &BizServiceBizMethod2Result{}
}

func (p *BizServiceBizMethod2Result) InitDefault() {
	*p = BizServiceBizMethod2Result{}
}

var BizServiceBizMethod2Result_Success_DEFAULT *BizResponse

func (p *BizServiceBizMethod2Result) GetSuccess() (v *BizResponse) {
	if !p.IsSetSuccess() {
		return BizServiceBizMethod2Result_Success_DEFAULT
	}
	return p.Success
}
func (p *BizServiceBizMethod2Result) SetSuccess(x interface{}) {
	p.Success = x.(*BizResponse)
}

var fieldIDToName_BizServiceBizMethod2Result = map[int16]string{
	0: "success",
}

func (p *BizServiceBizMethod2Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BizServiceBizMethod2Result) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BizServiceBizMethod2Result[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BizServiceBizMethod2Result) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewBizResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BizServiceBizMethod2Result) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BizMethod2_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BizServiceBizMethod2Result) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BizServiceBizMethod2Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BizServiceBizMethod2Result(%+v)", *p)
}

func (p *BizServiceBizMethod2Result) DeepEqual(ano *BizServiceBizMethod2Result) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BizServiceBizMethod2Result) Field0DeepEqual(src *BizResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

type BizServiceBizMethod3Args struct {
	Req *BizRequest `thrift:"req,1" frugal:"1,default,BizRequest" json:"req"`
}

func NewBizServiceBizMethod3Args() *BizServiceBizMethod3Args {
	return &BizServiceBizMethod3Args{}
}

func (p *BizServiceBizMethod3Args) InitDefault() {
	*p = BizServiceBizMethod3Args{}
}

var BizServiceBizMethod3Args_Req_DEFAULT *BizRequest

func (p *BizServiceBizMethod3Args) GetReq() (v *BizRequest) {
	if !p.IsSetReq() {
		return BizServiceBizMethod3Args_Req_DEFAULT
	}
	return p.Req
}
func (p *BizServiceBizMethod3Args) SetReq(val *BizRequest) {
	p.Req = val
}

var fieldIDToName_BizServiceBizMethod3Args = map[int16]string{
	1: "req",
}

func (p *BizServiceBizMethod3Args) IsSetReq() bool {
	return p.Req != nil
}

func (p *BizServiceBizMethod3Args) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField1(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BizServiceBizMethod3Args[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BizServiceBizMethod3Args) ReadField1(iprot thrift.TProtocol) error {
	p.Req = NewBizRequest()
	if err := p.Req.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BizServiceBizMethod3Args) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BizMethod3_args"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField1(oprot); err != nil {
			fieldId = 1
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BizServiceBizMethod3Args) writeField1(oprot thrift.TProtocol) (err error) {
	if err = oprot.WriteFieldBegin("req", thrift.STRUCT, 1); err != nil {
		goto WriteFieldBeginError
	}
	if err := p.Req.Write(oprot); err != nil {
		return err
	}
	if err = oprot.WriteFieldEnd(); err != nil {
		goto WriteFieldEndError
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 1 end error: ", p), err)
}

func (p *BizServiceBizMethod3Args) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BizServiceBizMethod3Args(%+v)", *p)
}

func (p *BizServiceBizMethod3Args) DeepEqual(ano *BizServiceBizMethod3Args) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field1DeepEqual(ano.Req) {
		return false
	}
	return true
}

func (p *BizServiceBizMethod3Args) Field1DeepEqual(src *BizRequest) bool {

	if !p.Req.DeepEqual(src) {
		return false
	}
	return true
}

type BizServiceBizMethod3Result struct {
	Success *BizResponse `thrift:"success,0,optional" frugal:"0,optional,BizResponse" json:"success,omitempty"`
}

func NewBizServiceBizMethod3Result() *BizServiceBizMethod3Result {
	return &BizServiceBizMethod3Result{}
}

func (p *BizServiceBizMethod3Result) InitDefault() {
	*p = BizServiceBizMethod3Result{}
}

var BizServiceBizMethod3Result_Success_DEFAULT *BizResponse

func (p *BizServiceBizMethod3Result) GetSuccess() (v *BizResponse) {
	if !p.IsSetSuccess() {
		return BizServiceBizMethod3Result_Success_DEFAULT
	}
	return p.Success
}
func (p *BizServiceBizMethod3Result) SetSuccess(x interface{}) {
	p.Success = x.(*BizResponse)
}

var fieldIDToName_BizServiceBizMethod3Result = map[int16]string{
	0: "success",
}

func (p *BizServiceBizMethod3Result) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BizServiceBizMethod3Result) Read(iprot thrift.TProtocol) (err error) {

	var fieldTypeId thrift.TType
	var fieldId int16

	if _, err = iprot.ReadStructBegin(); err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, err = iprot.ReadFieldBegin()
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}

		switch fieldId {
		case 0:
			if fieldTypeId == thrift.STRUCT {
				if err = p.ReadField0(iprot); err != nil {
					goto ReadFieldError
				}
			} else {
				if err = iprot.Skip(fieldTypeId); err != nil {
					goto SkipFieldError
				}
			}
		default:
			if err = iprot.Skip(fieldTypeId); err != nil {
				goto SkipFieldError
			}
		}

		if err = iprot.ReadFieldEnd(); err != nil {
			goto ReadFieldEndError
		}
	}
	if err = iprot.ReadStructEnd(); err != nil {
		goto ReadStructEndError
	}

	return nil
ReadStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_BizServiceBizMethod3Result[fieldId]), err)
SkipFieldError:
	return thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)

ReadFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *BizServiceBizMethod3Result) ReadField0(iprot thrift.TProtocol) error {
	p.Success = NewBizResponse()
	if err := p.Success.Read(iprot); err != nil {
		return err
	}
	return nil
}

func (p *BizServiceBizMethod3Result) Write(oprot thrift.TProtocol) (err error) {
	var fieldId int16
	if err = oprot.WriteStructBegin("BizMethod3_result"); err != nil {
		goto WriteStructBeginError
	}
	if p != nil {
		if err = p.writeField0(oprot); err != nil {
			fieldId = 0
			goto WriteFieldError
		}

	}
	if err = oprot.WriteFieldStop(); err != nil {
		goto WriteFieldStopError
	}
	if err = oprot.WriteStructEnd(); err != nil {
		goto WriteStructEndError
	}
	return nil
WriteStructBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
WriteFieldError:
	return thrift.PrependError(fmt.Sprintf("%T write field %d error: ", p, fieldId), err)
WriteFieldStopError:
	return thrift.PrependError(fmt.Sprintf("%T write field stop error: ", p), err)
WriteStructEndError:
	return thrift.PrependError(fmt.Sprintf("%T write struct end error: ", p), err)
}

func (p *BizServiceBizMethod3Result) writeField0(oprot thrift.TProtocol) (err error) {
	if p.IsSetSuccess() {
		if err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
			goto WriteFieldBeginError
		}
		if err := p.Success.Write(oprot); err != nil {
			return err
		}
		if err = oprot.WriteFieldEnd(); err != nil {
			goto WriteFieldEndError
		}
	}
	return nil
WriteFieldBeginError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 begin error: ", p), err)
WriteFieldEndError:
	return thrift.PrependError(fmt.Sprintf("%T write field 0 end error: ", p), err)
}

func (p *BizServiceBizMethod3Result) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BizServiceBizMethod3Result(%+v)", *p)
}

func (p *BizServiceBizMethod3Result) DeepEqual(ano *BizServiceBizMethod3Result) bool {
	if p == ano {
		return true
	} else if p == nil || ano == nil {
		return false
	}
	if !p.Field0DeepEqual(ano.Success) {
		return false
	}
	return true
}

func (p *BizServiceBizMethod3Result) Field0DeepEqual(src *BizResponse) bool {

	if !p.Success.DeepEqual(src) {
		return false
	}
	return true
}

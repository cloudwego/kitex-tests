// Code generated by thriftgo (0.3.20). DO NOT EDIT.

package instparam

import (
	"fmt"
)

type SubMessage struct {
	Id           *int64  `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id,omitempty"`
	Value        *string `thrift:"value,2,optional" frugal:"2,optional,string" json:"value,omitempty"`
	DefaultValue string  `thrift:"defaultValue,3,optional" frugal:"3,optional,string" json:"defaultValue,omitempty"`
}

func NewSubMessage() *SubMessage {
	return &SubMessage{

		DefaultValue: "default",
	}
}

func (p *SubMessage) InitDefault() {
	p.DefaultValue = "default"
}

var SubMessage_Id_DEFAULT int64

func (p *SubMessage) GetId() (v int64) {
	if !p.IsSetId() {
		return SubMessage_Id_DEFAULT
	}
	return *p.Id
}

var SubMessage_Value_DEFAULT string

func (p *SubMessage) GetValue() (v string) {
	if !p.IsSetValue() {
		return SubMessage_Value_DEFAULT
	}
	return *p.Value
}

var SubMessage_DefaultValue_DEFAULT string = "default"

func (p *SubMessage) GetDefaultValue() (v string) {
	if !p.IsSetDefaultValue() {
		return SubMessage_DefaultValue_DEFAULT
	}
	return p.DefaultValue
}
func (p *SubMessage) SetId(val *int64) {
	p.Id = val
}
func (p *SubMessage) SetValue(val *string) {
	p.Value = val
}
func (p *SubMessage) SetDefaultValue(val string) {
	p.DefaultValue = val
}

func (p *SubMessage) IsSetId() bool {
	return p.Id != nil
}

func (p *SubMessage) IsSetValue() bool {
	return p.Value != nil
}

func (p *SubMessage) IsSetDefaultValue() bool {
	return p.DefaultValue != SubMessage_DefaultValue_DEFAULT
}

func (p *SubMessage) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("SubMessage(%+v)", *p)
}

var fieldIDToName_SubMessage = map[int16]string{
	1: "id",
	2: "value",
	3: "defaultValue",
}

type Message struct {
	Id          *int64        `thrift:"id,1,optional" frugal:"1,optional,i64" json:"id,omitempty"`
	Value       *string       `thrift:"value,2,optional" frugal:"2,optional,string" json:"value,omitempty"`
	SubMessages []*SubMessage `thrift:"subMessages,3,optional" frugal:"3,optional,list<SubMessage>" json:"subMessages,omitempty"`
}

func NewMessage() *Message {
	return &Message{}
}

func (p *Message) InitDefault() {
}

var Message_Id_DEFAULT int64

func (p *Message) GetId() (v int64) {
	if !p.IsSetId() {
		return Message_Id_DEFAULT
	}
	return *p.Id
}

var Message_Value_DEFAULT string

func (p *Message) GetValue() (v string) {
	if !p.IsSetValue() {
		return Message_Value_DEFAULT
	}
	return *p.Value
}

var Message_SubMessages_DEFAULT []*SubMessage

func (p *Message) GetSubMessages() (v []*SubMessage) {
	if !p.IsSetSubMessages() {
		return Message_SubMessages_DEFAULT
	}
	return p.SubMessages
}
func (p *Message) SetId(val *int64) {
	p.Id = val
}
func (p *Message) SetValue(val *string) {
	p.Value = val
}
func (p *Message) SetSubMessages(val []*SubMessage) {
	p.SubMessages = val
}

func (p *Message) IsSetId() bool {
	return p.Id != nil
}

func (p *Message) IsSetValue() bool {
	return p.Value != nil
}

func (p *Message) IsSetSubMessages() bool {
	return p.SubMessages != nil
}

func (p *Message) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Message(%+v)", *p)
}

var fieldIDToName_Message = map[int16]string{
	1: "id",
	2: "value",
	3: "subMessages",
}

type ObjReq struct {
	Msg      *Message                 `thrift:"msg,1,required" frugal:"1,required,Message" json:"msg"`
	MsgMap   map[*Message]*SubMessage `thrift:"msgMap,2,required" frugal:"2,required,map<Message:SubMessage>" json:"msgMap"`
	SubMsgs  []*SubMessage            `thrift:"subMsgs,3,required" frugal:"3,required,list<SubMessage>" json:"subMsgs"`
	MsgSet   []*Message               `thrift:"msgSet,4,optional" frugal:"4,optional,set<Message>" json:"msgSet,omitempty"`
	FlagMsg  string                   `thrift:"flagMsg,5,required" frugal:"5,required,string" json:"flagMsg"`
	MockCost *string                  `thrift:"mockCost,6,optional" frugal:"6,optional,string" json:"mockCost,omitempty"`
}

func NewObjReq() *ObjReq {
	return &ObjReq{}
}

func (p *ObjReq) InitDefault() {
}

var ObjReq_Msg_DEFAULT *Message

func (p *ObjReq) GetMsg() (v *Message) {
	if !p.IsSetMsg() {
		return ObjReq_Msg_DEFAULT
	}
	return p.Msg
}

func (p *ObjReq) GetMsgMap() (v map[*Message]*SubMessage) {
	return p.MsgMap
}

func (p *ObjReq) GetSubMsgs() (v []*SubMessage) {
	return p.SubMsgs
}

var ObjReq_MsgSet_DEFAULT []*Message

func (p *ObjReq) GetMsgSet() (v []*Message) {
	if !p.IsSetMsgSet() {
		return ObjReq_MsgSet_DEFAULT
	}
	return p.MsgSet
}

func (p *ObjReq) GetFlagMsg() (v string) {
	return p.FlagMsg
}

var ObjReq_MockCost_DEFAULT string

func (p *ObjReq) GetMockCost() (v string) {
	if !p.IsSetMockCost() {
		return ObjReq_MockCost_DEFAULT
	}
	return *p.MockCost
}
func (p *ObjReq) SetMsg(val *Message) {
	p.Msg = val
}
func (p *ObjReq) SetMsgMap(val map[*Message]*SubMessage) {
	p.MsgMap = val
}
func (p *ObjReq) SetSubMsgs(val []*SubMessage) {
	p.SubMsgs = val
}
func (p *ObjReq) SetMsgSet(val []*Message) {
	p.MsgSet = val
}
func (p *ObjReq) SetFlagMsg(val string) {
	p.FlagMsg = val
}
func (p *ObjReq) SetMockCost(val *string) {
	p.MockCost = val
}

func (p *ObjReq) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *ObjReq) IsSetMsgSet() bool {
	return p.MsgSet != nil
}

func (p *ObjReq) IsSetMockCost() bool {
	return p.MockCost != nil
}

func (p *ObjReq) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ObjReq(%+v)", *p)
}

var fieldIDToName_ObjReq = map[int16]string{
	1: "msg",
	2: "msgMap",
	3: "subMsgs",
	4: "msgSet",
	5: "flagMsg",
	6: "mockCost",
}

type ObjResp struct {
	Msg     *Message                 `thrift:"msg,1,required" frugal:"1,required,Message" json:"msg"`
	MsgMap  map[*Message]*SubMessage `thrift:"msgMap,2,required" frugal:"2,required,map<Message:SubMessage>" json:"msgMap"`
	SubMsgs []*SubMessage            `thrift:"subMsgs,3,required" frugal:"3,required,list<SubMessage>" json:"subMsgs"`
	MsgSet  []*Message               `thrift:"msgSet,4,optional" frugal:"4,optional,set<Message>" json:"msgSet,omitempty"`
	FlagMsg string                   `thrift:"flagMsg,5,required" frugal:"5,required,string" json:"flagMsg"`
}

func NewObjResp() *ObjResp {
	return &ObjResp{}
}

func (p *ObjResp) InitDefault() {
}

var ObjResp_Msg_DEFAULT *Message

func (p *ObjResp) GetMsg() (v *Message) {
	if !p.IsSetMsg() {
		return ObjResp_Msg_DEFAULT
	}
	return p.Msg
}

func (p *ObjResp) GetMsgMap() (v map[*Message]*SubMessage) {
	return p.MsgMap
}

func (p *ObjResp) GetSubMsgs() (v []*SubMessage) {
	return p.SubMsgs
}

var ObjResp_MsgSet_DEFAULT []*Message

func (p *ObjResp) GetMsgSet() (v []*Message) {
	if !p.IsSetMsgSet() {
		return ObjResp_MsgSet_DEFAULT
	}
	return p.MsgSet
}

func (p *ObjResp) GetFlagMsg() (v string) {
	return p.FlagMsg
}
func (p *ObjResp) SetMsg(val *Message) {
	p.Msg = val
}
func (p *ObjResp) SetMsgMap(val map[*Message]*SubMessage) {
	p.MsgMap = val
}
func (p *ObjResp) SetSubMsgs(val []*SubMessage) {
	p.SubMsgs = val
}
func (p *ObjResp) SetMsgSet(val []*Message) {
	p.MsgSet = val
}
func (p *ObjResp) SetFlagMsg(val string) {
	p.FlagMsg = val
}

func (p *ObjResp) IsSetMsg() bool {
	return p.Msg != nil
}

func (p *ObjResp) IsSetMsgSet() bool {
	return p.MsgSet != nil
}

func (p *ObjResp) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ObjResp(%+v)", *p)
}

var fieldIDToName_ObjResp = map[int16]string{
	1: "msg",
	2: "msgMap",
	3: "subMsgs",
	4: "msgSet",
	5: "flagMsg",
}

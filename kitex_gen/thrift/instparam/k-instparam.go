// Code generated by Kitex v0.5.2. DO NOT EDIT.

package instparam

import (
	"bytes"
	"fmt"
	"reflect"
	"strings"

	"github.com/apache/thrift/lib/go/thrift"
	"github.com/cloudwego/kitex/pkg/protocol/bthrift"
	kutils "github.com/cloudwego/kitex/pkg/utils"
)

// unused protection
var (
	_ = fmt.Formatter(nil)
	_ = (*bytes.Buffer)(nil)
	_ = (*strings.Builder)(nil)
	_ = reflect.Type(nil)
	_ = thrift.TProtocol(nil)
	_ = bthrift.BinaryWriter(nil)
)

func (p *SubMessage) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_SubMessage[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *SubMessage) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Id = &v

	}
	return offset, nil
}

func (p *SubMessage) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Value = &v

	}
	return offset, nil
}

// for compatibility
func (p *SubMessage) FastWrite(buf []byte) int {
	return 0
}

func (p *SubMessage) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "SubMessage")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *SubMessage) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("SubMessage")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *SubMessage) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "id", thrift.I64, 1)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.Id)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *SubMessage) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetValue() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "value", thrift.STRING, 2)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.Value)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *SubMessage) field1Length() int {
	l := 0
	if p.IsSetId() {
		l += bthrift.Binary.FieldBeginLength("id", thrift.I64, 1)
		l += bthrift.Binary.I64Length(*p.Id)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *SubMessage) field2Length() int {
	l := 0
	if p.IsSetValue() {
		l += bthrift.Binary.FieldBeginLength("value", thrift.STRING, 2)
		l += bthrift.Binary.StringLengthNocopy(*p.Value)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *Message) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.I64 {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_Message[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
}

func (p *Message) FastReadField1(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadI64(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Id = &v

	}
	return offset, nil
}

func (p *Message) FastReadField2(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.Value = &v

	}
	return offset, nil
}

func (p *Message) FastReadField3(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.SubMessages = make([]*SubMessage, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewSubMessage()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.SubMessages = append(p.SubMessages, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

// for compatibility
func (p *Message) FastWrite(buf []byte) int {
	return 0
}

func (p *Message) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "Message")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *Message) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("Message")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *Message) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetId() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "id", thrift.I64, 1)
		offset += bthrift.Binary.WriteI64(buf[offset:], *p.Id)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *Message) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetValue() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "value", thrift.STRING, 2)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.Value)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *Message) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetSubMessages() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "subMessages", thrift.LIST, 3)
		listBeginOffset := offset
		offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
		var length int
		for _, v := range p.SubMessages {
			length++
			offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
		}
		bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
		offset += bthrift.Binary.WriteListEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *Message) field1Length() int {
	l := 0
	if p.IsSetId() {
		l += bthrift.Binary.FieldBeginLength("id", thrift.I64, 1)
		l += bthrift.Binary.I64Length(*p.Id)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *Message) field2Length() int {
	l := 0
	if p.IsSetValue() {
		l += bthrift.Binary.FieldBeginLength("value", thrift.STRING, 2)
		l += bthrift.Binary.StringLengthNocopy(*p.Value)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *Message) field3Length() int {
	l := 0
	if p.IsSetSubMessages() {
		l += bthrift.Binary.FieldBeginLength("subMessages", thrift.LIST, 3)
		l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.SubMessages))
		for _, v := range p.SubMessages {
			l += v.BLength()
		}
		l += bthrift.Binary.ListEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *ObjReq) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetMsg bool = false
	var issetMsgMap bool = false
	var issetSubMsgs bool = false
	var issetFlagMsg bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetMsg = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetMsgMap = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetSubMsgs = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.SET {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetFlagMsg = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 6:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField6(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetMsg {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetMsgMap {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetSubMsgs {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetFlagMsg {
		fieldId = 5
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ObjReq[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ObjReq[fieldId]))
}

func (p *ObjReq) FastReadField1(buf []byte) (int, error) {
	offset := 0

	tmp := NewMessage()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.Msg = tmp
	return offset, nil
}

func (p *ObjReq) FastReadField2(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.MsgMap = make(map[*Message]*SubMessage, size)
	for i := 0; i < size; i++ {
		_key := NewMessage()
		if l, err := _key.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		_val := NewSubMessage()
		if l, err := _val.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.MsgMap[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *ObjReq) FastReadField3(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.SubMsgs = make([]*SubMessage, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewSubMessage()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.SubMsgs = append(p.SubMsgs, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *ObjReq) FastReadField4(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadSetBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.MsgSet = make([]*Message, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewMessage()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.MsgSet = append(p.MsgSet, _elem)
	}
	if l, err := bthrift.Binary.ReadSetEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *ObjReq) FastReadField5(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.FlagMsg = v

	}
	return offset, nil
}

func (p *ObjReq) FastReadField6(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
		p.MockCost = &v

	}
	return offset, nil
}

// for compatibility
func (p *ObjReq) FastWrite(buf []byte) int {
	return 0
}

func (p *ObjReq) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "ObjReq")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
		offset += p.fastWriteField6(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *ObjReq) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("ObjReq")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
		l += p.field6Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *ObjReq) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "msg", thrift.STRUCT, 1)
	offset += p.Msg.FastWriteNocopy(buf[offset:], binaryWriter)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *ObjReq) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "msgMap", thrift.MAP, 2)
	mapBeginOffset := offset
	offset += bthrift.Binary.MapBeginLength(thrift.STRUCT, thrift.STRUCT, 0)
	var length int
	for k, v := range p.MsgMap {
		length++

		offset += k.FastWriteNocopy(buf[offset:], binaryWriter)

		offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
	}
	bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.STRUCT, thrift.STRUCT, length)
	offset += bthrift.Binary.WriteMapEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *ObjReq) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "subMsgs", thrift.LIST, 3)
	listBeginOffset := offset
	offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
	var length int
	for _, v := range p.SubMsgs {
		length++
		offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
	}
	bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
	offset += bthrift.Binary.WriteListEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *ObjReq) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetMsgSet() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "msgSet", thrift.SET, 4)
		setBeginOffset := offset
		offset += bthrift.Binary.SetBeginLength(thrift.STRUCT, 0)

		for i := 0; i < len(p.MsgSet); i++ {
			for j := i + 1; j < len(p.MsgSet); j++ {
				if func(tgt, src *Message) bool {
					if !tgt.DeepEqual(src) {
						return false
					}
					return true
				}(p.MsgSet[i], p.MsgSet[j]) {
					panic(fmt.Errorf("%T error writing set field: slice is not unique", p.MsgSet[i]))
				}
			}
		}
		var length int
		for _, v := range p.MsgSet {
			length++
			offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
		}
		bthrift.Binary.WriteSetBegin(buf[setBeginOffset:], thrift.STRUCT, length)
		offset += bthrift.Binary.WriteSetEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *ObjReq) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "flagMsg", thrift.STRING, 5)
	offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, p.FlagMsg)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *ObjReq) fastWriteField6(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetMockCost() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "mockCost", thrift.STRING, 6)
		offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, *p.MockCost)

		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *ObjReq) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("msg", thrift.STRUCT, 1)
	l += p.Msg.BLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *ObjReq) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("msgMap", thrift.MAP, 2)
	l += bthrift.Binary.MapBeginLength(thrift.STRUCT, thrift.STRUCT, len(p.MsgMap))
	for k, v := range p.MsgMap {

		l += k.BLength()

		l += v.BLength()
	}
	l += bthrift.Binary.MapEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *ObjReq) field3Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("subMsgs", thrift.LIST, 3)
	l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.SubMsgs))
	for _, v := range p.SubMsgs {
		l += v.BLength()
	}
	l += bthrift.Binary.ListEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *ObjReq) field4Length() int {
	l := 0
	if p.IsSetMsgSet() {
		l += bthrift.Binary.FieldBeginLength("msgSet", thrift.SET, 4)
		l += bthrift.Binary.SetBeginLength(thrift.STRUCT, len(p.MsgSet))

		for i := 0; i < len(p.MsgSet); i++ {
			for j := i + 1; j < len(p.MsgSet); j++ {
				if func(tgt, src *Message) bool {
					if !tgt.DeepEqual(src) {
						return false
					}
					return true
				}(p.MsgSet[i], p.MsgSet[j]) {
					panic(fmt.Errorf("%T error writing set field: slice is not unique", p.MsgSet[i]))
				}
			}
		}
		for _, v := range p.MsgSet {
			l += v.BLength()
		}
		l += bthrift.Binary.SetEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *ObjReq) field5Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("flagMsg", thrift.STRING, 5)
	l += bthrift.Binary.StringLengthNocopy(p.FlagMsg)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *ObjReq) field6Length() int {
	l := 0
	if p.IsSetMockCost() {
		l += bthrift.Binary.FieldBeginLength("mockCost", thrift.STRING, 6)
		l += bthrift.Binary.StringLengthNocopy(*p.MockCost)

		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *ObjResp) FastRead(buf []byte) (int, error) {
	var err error
	var offset int
	var l int
	var fieldTypeId thrift.TType
	var fieldId int16
	var issetMsg bool = false
	var issetMsgMap bool = false
	var issetSubMsgs bool = false
	var issetFlagMsg bool = false
	_, l, err = bthrift.Binary.ReadStructBegin(buf)
	offset += l
	if err != nil {
		goto ReadStructBeginError
	}

	for {
		_, fieldTypeId, fieldId, l, err = bthrift.Binary.ReadFieldBegin(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldBeginError
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if fieldTypeId == thrift.STRUCT {
				l, err = p.FastReadField1(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetMsg = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 2:
			if fieldTypeId == thrift.MAP {
				l, err = p.FastReadField2(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetMsgMap = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 3:
			if fieldTypeId == thrift.LIST {
				l, err = p.FastReadField3(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetSubMsgs = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 4:
			if fieldTypeId == thrift.SET {
				l, err = p.FastReadField4(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		case 5:
			if fieldTypeId == thrift.STRING {
				l, err = p.FastReadField5(buf[offset:])
				offset += l
				if err != nil {
					goto ReadFieldError
				}
				issetFlagMsg = true
			} else {
				l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
				offset += l
				if err != nil {
					goto SkipFieldError
				}
			}
		default:
			l, err = bthrift.Binary.Skip(buf[offset:], fieldTypeId)
			offset += l
			if err != nil {
				goto SkipFieldError
			}
		}

		l, err = bthrift.Binary.ReadFieldEnd(buf[offset:])
		offset += l
		if err != nil {
			goto ReadFieldEndError
		}
	}
	l, err = bthrift.Binary.ReadStructEnd(buf[offset:])
	offset += l
	if err != nil {
		goto ReadStructEndError
	}

	if !issetMsg {
		fieldId = 1
		goto RequiredFieldNotSetError
	}

	if !issetMsgMap {
		fieldId = 2
		goto RequiredFieldNotSetError
	}

	if !issetSubMsgs {
		fieldId = 3
		goto RequiredFieldNotSetError
	}

	if !issetFlagMsg {
		fieldId = 5
		goto RequiredFieldNotSetError
	}
	return offset, nil
ReadStructBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct begin error: ", p), err)
ReadFieldBeginError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d begin error: ", p, fieldId), err)
ReadFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field %d '%s' error: ", p, fieldId, fieldIDToName_ObjResp[fieldId]), err)
SkipFieldError:
	return offset, thrift.PrependError(fmt.Sprintf("%T field %d skip type %d error: ", p, fieldId, fieldTypeId), err)
ReadFieldEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read field end error", p), err)
ReadStructEndError:
	return offset, thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
RequiredFieldNotSetError:
	return offset, thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("required field %s is not set", fieldIDToName_ObjResp[fieldId]))
}

func (p *ObjResp) FastReadField1(buf []byte) (int, error) {
	offset := 0

	tmp := NewMessage()
	if l, err := tmp.FastRead(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	p.Msg = tmp
	return offset, nil
}

func (p *ObjResp) FastReadField2(buf []byte) (int, error) {
	offset := 0

	_, _, size, l, err := bthrift.Binary.ReadMapBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.MsgMap = make(map[*Message]*SubMessage, size)
	for i := 0; i < size; i++ {
		_key := NewMessage()
		if l, err := _key.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		_val := NewSubMessage()
		if l, err := _val.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.MsgMap[_key] = _val
	}
	if l, err := bthrift.Binary.ReadMapEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *ObjResp) FastReadField3(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadListBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.SubMsgs = make([]*SubMessage, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewSubMessage()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.SubMsgs = append(p.SubMsgs, _elem)
	}
	if l, err := bthrift.Binary.ReadListEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *ObjResp) FastReadField4(buf []byte) (int, error) {
	offset := 0

	_, size, l, err := bthrift.Binary.ReadSetBegin(buf[offset:])
	offset += l
	if err != nil {
		return offset, err
	}
	p.MsgSet = make([]*Message, 0, size)
	for i := 0; i < size; i++ {
		_elem := NewMessage()
		if l, err := _elem.FastRead(buf[offset:]); err != nil {
			return offset, err
		} else {
			offset += l
		}

		p.MsgSet = append(p.MsgSet, _elem)
	}
	if l, err := bthrift.Binary.ReadSetEnd(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l
	}
	return offset, nil
}

func (p *ObjResp) FastReadField5(buf []byte) (int, error) {
	offset := 0

	if v, l, err := bthrift.Binary.ReadString(buf[offset:]); err != nil {
		return offset, err
	} else {
		offset += l

		p.FlagMsg = v

	}
	return offset, nil
}

// for compatibility
func (p *ObjResp) FastWrite(buf []byte) int {
	return 0
}

func (p *ObjResp) FastWriteNocopy(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteStructBegin(buf[offset:], "ObjResp")
	if p != nil {
		offset += p.fastWriteField1(buf[offset:], binaryWriter)
		offset += p.fastWriteField2(buf[offset:], binaryWriter)
		offset += p.fastWriteField3(buf[offset:], binaryWriter)
		offset += p.fastWriteField4(buf[offset:], binaryWriter)
		offset += p.fastWriteField5(buf[offset:], binaryWriter)
	}
	offset += bthrift.Binary.WriteFieldStop(buf[offset:])
	offset += bthrift.Binary.WriteStructEnd(buf[offset:])
	return offset
}

func (p *ObjResp) BLength() int {
	l := 0
	l += bthrift.Binary.StructBeginLength("ObjResp")
	if p != nil {
		l += p.field1Length()
		l += p.field2Length()
		l += p.field3Length()
		l += p.field4Length()
		l += p.field5Length()
	}
	l += bthrift.Binary.FieldStopLength()
	l += bthrift.Binary.StructEndLength()
	return l
}

func (p *ObjResp) fastWriteField1(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "msg", thrift.STRUCT, 1)
	offset += p.Msg.FastWriteNocopy(buf[offset:], binaryWriter)
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *ObjResp) fastWriteField2(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "msgMap", thrift.MAP, 2)
	mapBeginOffset := offset
	offset += bthrift.Binary.MapBeginLength(thrift.STRUCT, thrift.STRUCT, 0)
	var length int
	for k, v := range p.MsgMap {
		length++

		offset += k.FastWriteNocopy(buf[offset:], binaryWriter)

		offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
	}
	bthrift.Binary.WriteMapBegin(buf[mapBeginOffset:], thrift.STRUCT, thrift.STRUCT, length)
	offset += bthrift.Binary.WriteMapEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *ObjResp) fastWriteField3(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "subMsgs", thrift.LIST, 3)
	listBeginOffset := offset
	offset += bthrift.Binary.ListBeginLength(thrift.STRUCT, 0)
	var length int
	for _, v := range p.SubMsgs {
		length++
		offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
	}
	bthrift.Binary.WriteListBegin(buf[listBeginOffset:], thrift.STRUCT, length)
	offset += bthrift.Binary.WriteListEnd(buf[offset:])
	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *ObjResp) fastWriteField4(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	if p.IsSetMsgSet() {
		offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "msgSet", thrift.SET, 4)
		setBeginOffset := offset
		offset += bthrift.Binary.SetBeginLength(thrift.STRUCT, 0)

		for i := 0; i < len(p.MsgSet); i++ {
			for j := i + 1; j < len(p.MsgSet); j++ {
				if func(tgt, src *Message) bool {
					if !tgt.DeepEqual(src) {
						return false
					}
					return true
				}(p.MsgSet[i], p.MsgSet[j]) {
					panic(fmt.Errorf("%T error writing set field: slice is not unique", p.MsgSet[i]))
				}
			}
		}
		var length int
		for _, v := range p.MsgSet {
			length++
			offset += v.FastWriteNocopy(buf[offset:], binaryWriter)
		}
		bthrift.Binary.WriteSetBegin(buf[setBeginOffset:], thrift.STRUCT, length)
		offset += bthrift.Binary.WriteSetEnd(buf[offset:])
		offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	}
	return offset
}

func (p *ObjResp) fastWriteField5(buf []byte, binaryWriter bthrift.BinaryWriter) int {
	offset := 0
	offset += bthrift.Binary.WriteFieldBegin(buf[offset:], "flagMsg", thrift.STRING, 5)
	offset += bthrift.Binary.WriteStringNocopy(buf[offset:], binaryWriter, p.FlagMsg)

	offset += bthrift.Binary.WriteFieldEnd(buf[offset:])
	return offset
}

func (p *ObjResp) field1Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("msg", thrift.STRUCT, 1)
	l += p.Msg.BLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *ObjResp) field2Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("msgMap", thrift.MAP, 2)
	l += bthrift.Binary.MapBeginLength(thrift.STRUCT, thrift.STRUCT, len(p.MsgMap))
	for k, v := range p.MsgMap {

		l += k.BLength()

		l += v.BLength()
	}
	l += bthrift.Binary.MapEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *ObjResp) field3Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("subMsgs", thrift.LIST, 3)
	l += bthrift.Binary.ListBeginLength(thrift.STRUCT, len(p.SubMsgs))
	for _, v := range p.SubMsgs {
		l += v.BLength()
	}
	l += bthrift.Binary.ListEndLength()
	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *ObjResp) field4Length() int {
	l := 0
	if p.IsSetMsgSet() {
		l += bthrift.Binary.FieldBeginLength("msgSet", thrift.SET, 4)
		l += bthrift.Binary.SetBeginLength(thrift.STRUCT, len(p.MsgSet))

		for i := 0; i < len(p.MsgSet); i++ {
			for j := i + 1; j < len(p.MsgSet); j++ {
				if func(tgt, src *Message) bool {
					if !tgt.DeepEqual(src) {
						return false
					}
					return true
				}(p.MsgSet[i], p.MsgSet[j]) {
					panic(fmt.Errorf("%T error writing set field: slice is not unique", p.MsgSet[i]))
				}
			}
		}
		for _, v := range p.MsgSet {
			l += v.BLength()
		}
		l += bthrift.Binary.SetEndLength()
		l += bthrift.Binary.FieldEndLength()
	}
	return l
}

func (p *ObjResp) field5Length() int {
	l := 0
	l += bthrift.Binary.FieldBeginLength("flagMsg", thrift.STRING, 5)
	l += bthrift.Binary.StringLengthNocopy(p.FlagMsg)

	l += bthrift.Binary.FieldEndLength()
	return l
}

func (p *SubMessage) DeepCopy(s interface{}) error {
	src, ok := s.(*SubMessage)
	if !ok {
		return fmt.Errorf("%T's type not matched %T", s, p)
	}

	if src.Id != nil {
		tmp := *src.Id
		p.Id = &tmp
	}

	if src.Value != nil {
		if *src.Value != "" {
			tmp := kutils.StringDeepCopy(*src.Value)
			p.Value = &tmp
		}
	}

	return nil
}

func (p *Message) DeepCopy(s interface{}) error {
	src, ok := s.(*Message)
	if !ok {
		return fmt.Errorf("%T's type not matched %T", s, p)
	}

	if src.Id != nil {
		tmp := *src.Id
		p.Id = &tmp
	}

	if src.Value != nil {
		if *src.Value != "" {
			tmp := kutils.StringDeepCopy(*src.Value)
			p.Value = &tmp
		}
	}

	if src.SubMessages != nil {
		p.SubMessages = make([]*SubMessage, 0, len(src.SubMessages))
		for _, elem := range src.SubMessages {
			var _elem *SubMessage
			if elem != nil {
				_elem = &SubMessage{}
				if err := _elem.DeepCopy(elem); err != nil {
					return err
				}
			}

			p.SubMessages = append(p.SubMessages, _elem)
		}
	}

	return nil
}

func (p *ObjReq) DeepCopy(s interface{}) error {
	src, ok := s.(*ObjReq)
	if !ok {
		return fmt.Errorf("%T's type not matched %T", s, p)
	}

	var _msg *Message
	if src.Msg != nil {
		_msg = &Message{}
		if err := _msg.DeepCopy(src.Msg); err != nil {
			return err
		}
	}
	p.Msg = _msg

	if src.MsgMap != nil {
		p.MsgMap = make(map[*Message]*SubMessage, len(src.MsgMap))
		for key, val := range src.MsgMap {
			var _key *Message
			if key != nil {
				_key = &Message{}
				if err := _key.DeepCopy(key); err != nil {
					return err
				}
			}

			var _val *SubMessage
			if val != nil {
				_val = &SubMessage{}
				if err := _val.DeepCopy(val); err != nil {
					return err
				}
			}

			p.MsgMap[_key] = _val
		}
	}

	if src.SubMsgs != nil {
		p.SubMsgs = make([]*SubMessage, 0, len(src.SubMsgs))
		for _, elem := range src.SubMsgs {
			var _elem *SubMessage
			if elem != nil {
				_elem = &SubMessage{}
				if err := _elem.DeepCopy(elem); err != nil {
					return err
				}
			}

			p.SubMsgs = append(p.SubMsgs, _elem)
		}
	}

	if src.MsgSet != nil {
		p.MsgSet = make([]*Message, 0, len(src.MsgSet))
		for _, elem := range src.MsgSet {
			var _elem *Message
			if elem != nil {
				_elem = &Message{}
				if err := _elem.DeepCopy(elem); err != nil {
					return err
				}
			}

			p.MsgSet = append(p.MsgSet, _elem)
		}
	}

	if src.FlagMsg != "" {
		p.FlagMsg = kutils.StringDeepCopy(src.FlagMsg)
	}

	if src.MockCost != nil {
		if *src.MockCost != "" {
			tmp := kutils.StringDeepCopy(*src.MockCost)
			p.MockCost = &tmp
		}
	}

	return nil
}

func (p *ObjResp) DeepCopy(s interface{}) error {
	src, ok := s.(*ObjResp)
	if !ok {
		return fmt.Errorf("%T's type not matched %T", s, p)
	}

	var _msg *Message
	if src.Msg != nil {
		_msg = &Message{}
		if err := _msg.DeepCopy(src.Msg); err != nil {
			return err
		}
	}
	p.Msg = _msg

	if src.MsgMap != nil {
		p.MsgMap = make(map[*Message]*SubMessage, len(src.MsgMap))
		for key, val := range src.MsgMap {
			var _key *Message
			if key != nil {
				_key = &Message{}
				if err := _key.DeepCopy(key); err != nil {
					return err
				}
			}

			var _val *SubMessage
			if val != nil {
				_val = &SubMessage{}
				if err := _val.DeepCopy(val); err != nil {
					return err
				}
			}

			p.MsgMap[_key] = _val
		}
	}

	if src.SubMsgs != nil {
		p.SubMsgs = make([]*SubMessage, 0, len(src.SubMsgs))
		for _, elem := range src.SubMsgs {
			var _elem *SubMessage
			if elem != nil {
				_elem = &SubMessage{}
				if err := _elem.DeepCopy(elem); err != nil {
					return err
				}
			}

			p.SubMsgs = append(p.SubMsgs, _elem)
		}
	}

	if src.MsgSet != nil {
		p.MsgSet = make([]*Message, 0, len(src.MsgSet))
		for _, elem := range src.MsgSet {
			var _elem *Message
			if elem != nil {
				_elem = &Message{}
				if err := _elem.DeepCopy(elem); err != nil {
					return err
				}
			}

			p.MsgSet = append(p.MsgSet, _elem)
		}
	}

	if src.FlagMsg != "" {
		p.FlagMsg = kutils.StringDeepCopy(src.FlagMsg)
	}

	return nil
}
